package randoop;

import junit.framework.*;

public class RandoopTest4 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test1");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    var0.setScore(0);
    int var6 = var0.getScore();
    var0.setFiring(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test2");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    javax.swing.InputVerifier var18 = var6.getInputVerifier();
    java.awt.ComponentOrientation var19 = var6.getComponentOrientation();
    var6.removeAll();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var27 = var21.getVisibleRect();
    java.awt.event.MouseListener[] var28 = var21.getMouseListeners();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    java.awt.dnd.DropTarget var34 = var29.getDropTarget();
    boolean var35 = var29.isFocusCycleRoot();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    java.awt.Color var38 = var37.getBackground();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.updateUI();
    var39.enableInputMethods(true);
    var36.add((java.awt.Component)var37, (java.lang.Object)true);
    java.awt.Dimension var48 = var37.getPreferredSize();
    var29.setSize(var48);
    var29.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    var54.nextFocus();
    var54.repaint(1L);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.setVisible(false);
    java.awt.Dimension var71 = var67.getPreferredSize();
    var61.setMaximumSize(var71);
    var54.setPreferredSize(var71);
    var29.setSize(var71);
    javax.swing.plaf.PanelUI var75 = var29.getUI();
    var21.setUI(var75);
    boolean var77 = var21.isMinimumSizeSet();
    boolean var78 = var6.isFocusCycleRoot((java.awt.Container)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test3");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    var12.setName("");
    var12.enable(true);
    var12.enable();
    java.awt.Point var18 = var12.location();
    var12.repaint(0, 3, (-1), 1);
    var12.setBounds(25, 100, 1, 0);
    var0.addKeyListener((java.awt.event.KeyListener)var12);
    boolean var30 = var0.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test4");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var8.setAutoscrolls(true);
    java.awt.Image var29 = var8.createImage(400, 400);
    var8.enableInputMethods(true);
    javax.swing.plaf.PanelUI var32 = var8.getUI();
    var8.setIgnoreRepaint(true);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    boolean var39 = var35.isDoubleBuffered();
    java.awt.dnd.DropTarget var40 = var35.getDropTarget();
    var35.show(false);
    boolean var43 = var35.isPaintingForPrint();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var50 = var44.getMouseListeners();
    int var51 = var44.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var52 = var44.getInputMethodRequests();
    var35.addKeyListener((java.awt.event.KeyListener)var44);
    java.awt.Container var54 = var44.getFocusCycleRootAncestor();
    boolean var55 = var44.hasFocus();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.setInheritsPopupMenu(false);
    boolean var62 = var56.isDoubleBuffered();
    boolean var63 = var56.isMinimumSizeSet();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    java.awt.Dimension var74 = var70.getPreferredSize();
    var64.setMaximumSize(var74);
    boolean var76 = var64.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var77 = var64.getAccessibleContext();
    boolean var78 = var64.isDoubleBuffered();
    java.awt.Rectangle var79 = var64.getVisibleRect();
    var56.setBounds(var79);
    java.lang.Object var81 = var44.getClientProperty((java.lang.Object)var56);
    java.awt.Cursor var82 = var44.getCursor();
    var8.setCursor(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test5");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.Graphics var5 = var0.getGraphics();
    boolean var6 = var0.isMinimumSizeSet();
    var0.hide();
    var0.setSize((-1), 499);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var17 = var11.getMouseListeners();
    int var18 = var11.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var19 = var11.getInputMethodRequests();
    java.lang.String var20 = var11.getToolTipText();
    boolean var21 = var11.isOpaque();
    var0.removeKeyListener((java.awt.event.KeyListener)var11);
    boolean var23 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test6");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var41 = var35.getUI();
    java.awt.im.InputMethodRequests var42 = var35.getInputMethodRequests();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.updateUI();
    var43.enableInputMethods(true);
    var43.setSize((-1), 1);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    var54.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var35.add((java.awt.Component)var43, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.setInheritsPopupMenu(false);
    boolean var66 = var60.isDoubleBuffered();
    boolean var67 = var60.isMinimumSizeSet();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    java.awt.Dimension var78 = var74.getPreferredSize();
    var68.setMaximumSize(var78);
    boolean var80 = var68.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var81 = var68.getAccessibleContext();
    boolean var82 = var68.isDoubleBuffered();
    java.awt.Rectangle var83 = var68.getVisibleRect();
    var60.setBounds(var83);
    java.awt.Rectangle var85 = var35.getBounds(var83);
    var18.setBounds(var85);
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    java.awt.Color var88 = var87.getBackground();
    var87.repaint();
    var87.setRequestFocusEnabled(false);
    var87.setIgnoreRepaint(false);
    java.lang.String var94 = var87.toString();
    java.awt.Color var95 = var87.getBackground();
    javax.swing.InputMap var96 = var87.getInputMap();
    var18.addKeyListener((java.awt.event.KeyListener)var87);
    var87.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var94,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var94.equals("SpaceWar.SpacePanel[,0,0,0var94,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test7");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    boolean var22 = var0.isManagingFocus();
    var0.transferFocusUpCycle();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var30 = var24.getUI();
    java.awt.im.InputMethodRequests var31 = var24.getInputMethodRequests();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.updateUI();
    var32.enableInputMethods(true);
    var32.setSize((-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    var43.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var24.add((java.awt.Component)var32, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    var49.setInheritsPopupMenu(false);
    boolean var55 = var49.isDoubleBuffered();
    boolean var56 = var49.isMinimumSizeSet();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    java.awt.Dimension var67 = var63.getPreferredSize();
    var57.setMaximumSize(var67);
    boolean var69 = var57.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var70 = var57.getAccessibleContext();
    boolean var71 = var57.isDoubleBuffered();
    java.awt.Rectangle var72 = var57.getVisibleRect();
    var49.setBounds(var72);
    java.awt.Rectangle var74 = var24.getBounds(var72);
    var0.computeVisibleRect(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test8");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test9");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    javax.swing.InputMap var9 = var0.getInputMap(1);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var16 = var10.getUI();
    java.awt.im.InputMethodRequests var17 = var10.getInputMethodRequests();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.updateUI();
    var18.enableInputMethods(true);
    var18.setSize((-1), 1);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    var29.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var10.add((java.awt.Component)var18, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    java.awt.Dimension var39 = var35.getPreferredSize();
    java.awt.Toolkit var40 = var35.getToolkit();
    java.awt.Toolkit var41 = var35.getToolkit();
    java.awt.Component var42 = var18.add((java.awt.Component)var35);
    int var43 = var18.getY();
    var18.removeNotify();
    java.awt.event.KeyListener[] var45 = var18.getKeyListeners();
    boolean var46 = var18.isFocusCycleRoot();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    boolean var51 = var47.inside(0, (-1));
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var52.setForeground(var57);
    var47.setForeground(var57);
    var0.add((java.awt.Component)var18, (java.lang.Object)var47, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test10");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    boolean var44 = var42.hasFocus();
    boolean var45 = var42.isPreferredSizeSet();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var46.repaint();
    var46.setRequestFocusEnabled(false);
    int var51 = var42.getComponentZOrder((java.awt.Component)var46);
    boolean var52 = var42.requestDefaultFocus();
    javax.swing.border.Border var53 = var42.getBorder();
    int var54 = var0.getComponentZOrder((java.awt.Component)var42);
    javax.accessibility.AccessibleContext var55 = var42.getAccessibleContext();
    int var56 = var42.getY();
    java.awt.Rectangle var57 = var42.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test11");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    boolean var13 = var0.isManagingFocus();
    java.awt.Image var16 = var0.createImage(1, 10);
    boolean var17 = var0.isOptimizedDrawingEnabled();
    java.lang.String var18 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test12");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(1, 19.998476951563912d, 593.2940477488812d);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test13");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(100.0d, 514.6637810615505d, 25, 25);
    boolean var5 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test14");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    java.awt.Image var8 = var0.createImage(10, 100);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var0.setForeground(var10);
    var0.setFocusTraversalPolicyProvider(true);
    java.util.Set var15 = var0.getFocusTraversalKeys(2);
    boolean var16 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.reshape((-1), 1, (-1), 10);
    var17.disable();
    java.awt.LayoutManager var28 = var17.getLayout();
    java.awt.Container var29 = var17.getParent();
    boolean var30 = var17.isPaintingForPrint();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    var31.nextFocus();
    var31.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    var41.setRequestFocusEnabled(false);
    var41.reshape(100, 0, 100, 0);
    java.awt.Component var51 = var31.add((java.awt.Component)var41);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    var52.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var57 = var52.getUI();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    var58.nextFocus();
    var58.repaint(1L);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.setVisible(false);
    java.awt.Dimension var75 = var71.getPreferredSize();
    var65.setMaximumSize(var75);
    var58.setPreferredSize(var75);
    var52.setMaximumSize(var75);
    java.awt.Dimension var79 = var41.getSize(var75);
    var17.setSize(var79);
    var0.setMinimumSize(var79);
    java.awt.Point var82 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test15");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.move((-1), 100);
    var19.validate();
    java.awt.Toolkit var32 = var19.getToolkit();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    java.awt.Color var39 = var38.getBackground();
    var38.repaint();
    java.lang.Object var41 = var33.getClientProperty((java.lang.Object)var38);
    var38.repaint(10, 1, 25, 0);
    var19.removeKeyListener((java.awt.event.KeyListener)var38);
    var38.grabFocus();
    var38.setOpaque(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test16");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    var0.setAlignmentY(100.0f);
    var0.setAlignmentX(0.0f);
    var0.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test17");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    var0.disable();
    javax.swing.InputMap var8 = var0.getInputMap();
    var0.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test18");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var41 = var35.getUI();
    java.awt.im.InputMethodRequests var42 = var35.getInputMethodRequests();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.updateUI();
    var43.enableInputMethods(true);
    var43.setSize((-1), 1);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    var54.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var35.add((java.awt.Component)var43, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.setInheritsPopupMenu(false);
    boolean var66 = var60.isDoubleBuffered();
    boolean var67 = var60.isMinimumSizeSet();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    java.awt.Dimension var78 = var74.getPreferredSize();
    var68.setMaximumSize(var78);
    boolean var80 = var68.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var81 = var68.getAccessibleContext();
    boolean var82 = var68.isDoubleBuffered();
    java.awt.Rectangle var83 = var68.getVisibleRect();
    var60.setBounds(var83);
    java.awt.Rectangle var85 = var35.getBounds(var83);
    var18.setBounds(var85);
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    java.awt.Color var88 = var87.getBackground();
    var87.repaint();
    var87.setRequestFocusEnabled(false);
    var87.setIgnoreRepaint(false);
    java.lang.String var94 = var87.toString();
    java.awt.Color var95 = var87.getBackground();
    javax.swing.InputMap var96 = var87.getInputMap();
    var18.addKeyListener((java.awt.event.KeyListener)var87);
    java.awt.Color var98 = var18.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var94,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var94.equals("SpaceWar.SpacePanel[,0,0,0var94,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test19");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Rectangle var4 = var0.bounds();
    boolean var5 = var0.isMaximumSizeSet();
    var0.setAlignmentX(1.0f);
    var0.list();
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test20");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    int var12 = var0.getPowerLevel();
    int var13 = var0.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test21");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    boolean var23 = var21.hasFocus();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    java.awt.dnd.DropTarget var29 = var24.getDropTarget();
    boolean var30 = var24.isFocusCycleRoot();
    var24.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var41 = var35.getUI();
    var24.add((java.awt.Component)var35, (java.lang.Object)(short)0);
    java.awt.Insets var44 = var35.getInsets();
    java.awt.Insets var45 = var21.getInsets(var44);
    java.awt.Insets var46 = var0.getInsets(var44);
    var0.repaint(1L, (-1), 2, 3, 500);
    var0.setBounds(500, 500, 100, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test22");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    boolean var6 = var0.requestFocus(false);
    javax.swing.JPopupMenu var7 = var0.getComponentPopupMenu();
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    boolean var11 = var9.hasFocus();
    boolean var12 = var9.isPreferredSizeSet();
    var9.firePropertyChange("", (short)1, (short)0);
    boolean var17 = var9.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var18 = var9.getPeer();
    java.awt.ComponentOrientation var19 = var9.getComponentOrientation();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var20.setForeground(var25);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var20.repaint(var35);
    java.awt.FocusTraversalPolicy var37 = var20.getFocusTraversalPolicy();
    var20.resetKeyboardActions();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var45 = var39.getMouseListeners();
    int var46 = var39.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    boolean var51 = var47.isDoubleBuffered();
    java.awt.dnd.DropTarget var52 = var47.getDropTarget();
    var47.show(false);
    java.awt.Rectangle var55 = var47.getVisibleRect();
    var39.paintImmediately(var55);
    var20.setBounds(var55);
    java.awt.Rectangle var58 = var9.getBounds(var55);
    java.awt.Rectangle var59 = var0.getBounds(var55);
    var0.setDoubleBuffered(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test23");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    boolean var10 = var0.inside(1, 500);
    var0.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test24");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    boolean var10 = var0.isPaintingTile();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    var11.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var16 = var11.getUI();
    java.awt.Color var17 = var11.getBackground();
    var0.addKeyListener((java.awt.event.KeyListener)var11);
    int var19 = var0.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test25");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    boolean var17 = var13.isDoubleBuffered();
    var13.list();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    java.awt.Rectangle var27 = var19.getVisibleRect();
    java.awt.image.BufferedImage var29 = var19.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var30 = var13.isAncestorOf((java.awt.Component)var19);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    var31.setRequestFocusEnabled(false);
    var31.setIgnoreRepaint(false);
    java.lang.String var38 = var31.toString();
    java.awt.Color var39 = var31.getBackground();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    java.awt.Toolkit var45 = var40.getToolkit();
    java.awt.Toolkit var46 = var40.getToolkit();
    SpaceWar.Player var47 = new SpaceWar.Player();
    var47.increasePower(25);
    int var50 = var47.getScore();
    var47.setRigth(true);
    var47.loseLife();
    var31.putClientProperty((java.lang.Object)var40, (java.lang.Object)var47);
    java.awt.Rectangle var55 = var40.bounds();
    java.awt.Rectangle var56 = var19.getBounds(var55);
    var19.setLocation(499, 25);
    var19.transferFocusUpCycle();
    java.awt.Component var61 = var0.add((java.awt.Component)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var38,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var38.equals("SpaceWar.SpacePanel[,0,0,0var38,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test26");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var10 = var0.getAncestorListeners();
    var0.resize(10, 0);
    java.awt.event.ComponentListener[] var14 = var0.getComponentListeners();
    int var15 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test27");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    var0.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.setInheritsPopupMenu(false);
    boolean var20 = var14.isDoubleBuffered();
    boolean var21 = var14.isMinimumSizeSet();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    var22.setMaximumSize(var32);
    boolean var34 = var22.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var35 = var22.getAccessibleContext();
    boolean var36 = var22.isDoubleBuffered();
    java.awt.Rectangle var37 = var22.getVisibleRect();
    var14.setBounds(var37);
    var0.computeVisibleRect(var37);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    var40.setMaximumSize(var50);
    boolean var52 = var40.getVerifyInputWhenFocusTarget();
    int var53 = var40.getX();
    java.awt.Rectangle var54 = var40.bounds();
    var0.remove((java.awt.Component)var40);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var56.repaint();
    var56.setRequestFocusEnabled(false);
    var56.setIgnoreRepaint(false);
    boolean var63 = var56.requestFocusInWindow();
    float var64 = var56.getAlignmentY();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    java.awt.Color var66 = var65.getBackground();
    var65.repaint();
    java.awt.im.InputMethodRequests var68 = var65.getInputMethodRequests();
    int var69 = var65.countComponents();
    java.awt.event.ComponentListener[] var70 = var65.getComponentListeners();
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.removeNotify();
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    boolean var78 = var74.isDoubleBuffered();
    var74.list();
    float var80 = var74.getAlignmentY();
    java.awt.Insets var81 = var74.getInsets();
    java.awt.Insets var82 = var71.getInsets(var81);
    java.awt.Insets var83 = var65.getInsets(var82);
    javax.swing.JPopupMenu var84 = var65.getComponentPopupMenu();
    java.awt.image.BufferedImage var86 = var65.loadImg("PanelUI");
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    float var88 = var87.getAlignmentX();
    var87.setVisible(false);
    var87.nextFocus();
    var87.updateUI();
    var87.enableInputMethods(true);
    int var95 = var87.getY();
    boolean var96 = var87.isDisplayable();
    var56.add((java.awt.Component)var65, (java.lang.Object)var87);
    var0.addKeyListener((java.awt.event.KeyListener)var56);
    boolean var99 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test28");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    var0.update();
    java.awt.image.BufferedImage var6 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var7 = var0.getX();
    var0.setLife(10);
    int var10 = var0.getRequiredPower();
    int var11 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 10);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test29");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    boolean var2 = var0.isRecovering();
    int var3 = var0.getRequiredPower();
    var0.setLeft(false);
    var0.loseLife();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test30");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    var4.nextFocus();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var9.setForeground(var14);
    var4.setBackground(var14);
    var0.setBackground(var14);
    boolean var18 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.setName("");
    int var22 = var19.getX();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    var23.setBackground(var33);
    var19.setBackground(var33);
    var0.setBackground(var33);
    java.awt.event.InputMethodListener[] var38 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test31");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.Rectangle var45 = var30.getBounds(var44);
    javax.swing.JToolTip var46 = var30.createToolTip();
    var22.removeKeyListener((java.awt.event.KeyListener)var30);
    var0.setComponentZOrder((java.awt.Component)var22, 0);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1.0f, 0.5f);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    var54.setName("");
    java.awt.Graphics var57 = var54.getGraphics();
    java.awt.event.MouseMotionListener[] var58 = var54.getMouseMotionListeners();
    boolean var59 = var54.getIgnoreRepaint();
    var54.transferFocusBackward();
    java.awt.Cursor var61 = var54.getCursor();
    var0.setCursor(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test32");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    var8.repaint();
    java.awt.im.InputMethodRequests var11 = var8.getInputMethodRequests();
    java.awt.GraphicsConfiguration var12 = var8.getGraphicsConfiguration();
    java.awt.Component var13 = var0.add((java.awt.Component)var8);
    java.lang.String var14 = var0.getName();
    boolean var15 = var0.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test33");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.image.VolatileImage var22 = var0.createVolatileImage(3, 2);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    java.awt.Rectangle var31 = var23.getVisibleRect();
    boolean var32 = var23.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    var33.enable(false);
    boolean var40 = var33.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    java.awt.Dimension var45 = var41.getPreferredSize();
    java.awt.Toolkit var46 = var41.getToolkit();
    boolean var47 = var41.isFocusable();
    javax.swing.KeyStroke[] var48 = var41.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    java.awt.Dimension var55 = var51.getPreferredSize();
    boolean var56 = var51.getVerifyInputWhenFocusTarget();
    java.awt.Component var59 = var51.findComponentAt(10, 1);
    var49.addKeyListener((java.awt.event.KeyListener)var51);
    var51.repaint(100, (-1), (-1), 1);
    boolean var66 = var41.isAncestorOf((java.awt.Component)var51);
    var33.addKeyListener((java.awt.event.KeyListener)var51);
    java.util.Locale var68 = var51.getLocale();
    var23.setLocale(var68);
    javax.swing.JComponent.setDefaultLocale(var68);
    var0.setLocale(var68);
    int var72 = var0.getHeight();
    var0.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test34");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isEnabled();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.Rectangle var45 = var30.getBounds(var44);
    javax.swing.JToolTip var46 = var30.createToolTip();
    var22.removeKeyListener((java.awt.event.KeyListener)var30);
    javax.swing.TransferHandler var48 = var22.getTransferHandler();
    var22.transferFocus();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    java.awt.Dimension var56 = var52.getPreferredSize();
    boolean var57 = var52.getVerifyInputWhenFocusTarget();
    java.awt.Component var60 = var52.findComponentAt(10, 1);
    var50.addKeyListener((java.awt.event.KeyListener)var52);
    java.awt.Dimension var62 = var52.getMinimumSize();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    var63.repaint();
    var63.setRequestFocusEnabled(false);
    var63.reshape(100, 0, 100, 0);
    var63.requestFocus();
    java.awt.Rectangle var74 = var63.getVisibleRect();
    var52.setBounds(var74);
    var22.scrollRectToVisible(var74);
    var10.setBounds(var74);
    var10.show();
    var10.enableInputMethods(false);
    java.awt.Toolkit var81 = var10.getToolkit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var83 = var10.getComponent(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test35");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.updateUI();
    var27.enableInputMethods(true);
    java.lang.String var35 = var27.toString();
    java.awt.FocusTraversalPolicy var36 = var27.getFocusTraversalPolicy();
    var15.removeKeyListener((java.awt.event.KeyListener)var27);
    var15.show(false);
    var15.disable();
    java.awt.FocusTraversalPolicy var41 = var15.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var35.equals("SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test36");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    java.awt.Font var23 = var17.getFont();
    javax.swing.TransferHandler var24 = var17.getTransferHandler();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    java.awt.Color var26 = var25.getBackground();
    var25.repaint();
    java.awt.im.InputMethodRequests var28 = var25.getInputMethodRequests();
    var25.setDoubleBuffered(true);
    var25.show(false);
    var25.setAlignmentY(100.0f);
    java.awt.Dimension var35 = var25.minimumSize();
    var17.setPreferredSize(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test37");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.setName("");
    java.awt.Dimension var36 = var33.minimumSize();
    boolean var37 = var33.isDoubleBuffered();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    boolean var45 = var40.getVerifyInputWhenFocusTarget();
    java.awt.Component var48 = var40.findComponentAt(10, 1);
    var38.addKeyListener((java.awt.event.KeyListener)var40);
    var40.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    var55.repaint();
    java.awt.im.InputMethodRequests var58 = var55.getInputMethodRequests();
    java.awt.GraphicsConfiguration var59 = var55.getGraphicsConfiguration();
    var40.remove((java.awt.Component)var55);
    java.awt.Font var61 = var55.getFont();
    java.awt.FontMetrics var62 = var33.getFontMetrics(var61);
    java.awt.FontMetrics var63 = var19.getFontMetrics(var61);
    boolean var64 = var19.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var71 = var65.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var72 = var65.getComponentListeners();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    var73.nextFocus();
    var73.repaint(1L);
    SpaceWar.SpacePanel var80 = new SpaceWar.SpacePanel();
    float var81 = var80.getAlignmentX();
    var80.setVisible(false);
    boolean var84 = var80.isDoubleBuffered();
    var80.list();
    SpaceWar.SpacePanel var86 = new SpaceWar.SpacePanel();
    float var87 = var86.getAlignmentX();
    var86.setVisible(false);
    boolean var90 = var86.isDoubleBuffered();
    java.awt.dnd.DropTarget var91 = var86.getDropTarget();
    var86.show(false);
    java.awt.Rectangle var94 = var86.getVisibleRect();
    java.awt.Rectangle var95 = var80.getBounds(var94);
    var73.setBounds(var95);
    var65.paintImmediately(var95);
    var19.repaint(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test38");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.increasePower(3);
    var0.setRigth(true);
    var0.setDown(true);
    var0.setFiring(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test39");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    double var4 = var2.getY();
    var2.update();
    double var6 = var2.getY();
    var2.update();
    int var8 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 10);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test40");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Rectangle var15 = var0.bounds();
    var0.setAutoscrolls(true);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var24 = var18.getUI();
    java.awt.im.InputMethodRequests var25 = var18.getInputMethodRequests();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    var26.nextFocus();
    var26.updateUI();
    var26.enableInputMethods(true);
    var26.setSize((-1), 1);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    var37.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var18.add((java.awt.Component)var26, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var43 = var18.isCursorSet();
    javax.swing.TransferHandler var44 = var18.getTransferHandler();
    java.awt.Point var45 = var18.location();
    java.awt.Point var46 = var0.getLocation(var45);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    java.awt.Dimension var57 = var53.getPreferredSize();
    var47.setMaximumSize(var57);
    boolean var59 = var47.getVerifyInputWhenFocusTarget();
    boolean var60 = var47.isFontSet();
    boolean var61 = var47.getIgnoreRepaint();
    java.awt.Component var64 = var47.locate(1, 25);
    boolean var65 = var47.isLightweight();
    var47.move(100, 500);
    var47.resetKeyboardActions();
    java.awt.Dimension var70 = var47.preferredSize();
    java.awt.Point var71 = var47.getLocation();
    java.awt.Component[] var72 = var47.getComponents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setComponentZOrder((java.awt.Component)var47, 399);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test41");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPowerLevel();
    var0.setLeft(false);
    int var5 = var0.getScore();
    int var6 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 400);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test42");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(5.0d, 24, 499);
    double var4 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 24.0d);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test43");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    var17.hit();
    int var23 = var17.getR();
    int var24 = var17.getType();
    var17.hit();
    java.awt.image.BufferedImage var27 = var17.loadImg("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test44");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var10 = var0.getAncestorListeners();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    boolean var18 = var13.getVerifyInputWhenFocusTarget();
    java.awt.Component var21 = var13.findComponentAt(10, 1);
    var11.addKeyListener((java.awt.event.KeyListener)var13);
    java.awt.Cursor var23 = var11.getCursor();
    var0.setCursor(var23);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    var26.list();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    java.awt.Rectangle var41 = var26.getBounds(var40);
    javax.swing.JToolTip var42 = var26.createToolTip();
    java.awt.Graphics var43 = var26.getGraphics();
    var26.setAutoscrolls(false);
    boolean var46 = var26.requestFocusInWindow();
    javax.swing.InputMap var47 = var26.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputMap(100, var47);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test45");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    int var7 = var0.getPower();
    var0.setLife(0);
    var0.setScore(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test46");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    int var6 = var0.getX();
    var0.loseLife();
    var0.setLeft(true);
    var0.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 400);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test47");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    var42.firePropertyChange("PanelUI", (short)1, (short)1);
    int var89 = var42.getHeight();
    var42.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 10L, 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test48");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    var0.invalidate();
    var0.setRequestFocusEnabled(true);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var11.setForeground(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    var11.repaint(var26);
    java.awt.FocusTraversalPolicy var28 = var11.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var29 = var11.getInputMethodRequests();
    var11.layout();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var37.setForeground(var42);
    var31.setBackground(var42);
    var11.setForeground(var42);
    int var46 = var11.getWidth();
    int var47 = var0.getComponentZOrder((java.awt.Component)var11);
    java.awt.Color var48 = var11.getBackground();
    int var49 = var11.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test49");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    boolean var27 = var19.isPaintingForPrint();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var19.addKeyListener((java.awt.event.KeyListener)var28);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    var38.list();
    float var44 = var38.getAlignmentY();
    boolean var45 = var28.isFocusCycleRoot((java.awt.Container)var38);
    boolean var46 = var38.isEnabled();
    java.awt.Dimension var47 = var38.getMaximumSize();
    var38.setFocusCycleRoot(false);
    java.awt.event.ComponentListener[] var50 = var38.getComponentListeners();
    boolean var51 = var38.isFocusCycleRoot();
    var38.show();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    var53.list();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    boolean var63 = var59.isDoubleBuffered();
    java.awt.dnd.DropTarget var64 = var59.getDropTarget();
    var59.show(false);
    java.awt.Rectangle var67 = var59.getVisibleRect();
    java.awt.Rectangle var68 = var53.getBounds(var67);
    javax.swing.JToolTip var69 = var53.createToolTip();
    var53.firePropertyChange("", false, false);
    var53.revalidate();
    int var75 = var53.getComponentCount();
    var0.add((java.awt.Component)var38, (java.lang.Object)var75);
    java.lang.String var77 = var38.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "PanelUI"+ "'", var77.equals("PanelUI"));

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test50");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    int var4 = var0.getDebugGraphicsOptions();
    var0.setLocation(400, 24);
    var0.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test51");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    boolean var14 = var0.inside(400, 0);
    java.awt.event.MouseWheelListener[] var15 = var0.getMouseWheelListeners();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    java.awt.Toolkit var23 = var18.getToolkit();
    boolean var24 = var18.isFocusable();
    javax.swing.KeyStroke[] var25 = var18.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    var26.nextFocus();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    java.awt.Color var36 = var35.getBackground();
    var31.setForeground(var36);
    var26.setBackground(var36);
    var18.setBackground(var36);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    var0.repaint(399, 24, 400, 25);
    boolean var46 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test52");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    var0.setToolTipText("PanelUI");
    javax.swing.border.Border var10 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test53");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    boolean var8 = var0.isFocusTraversalPolicySet();
    var0.transferFocusUpCycle();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    java.awt.Rectangle var18 = var10.getVisibleRect();
    java.awt.image.BufferedImage var20 = var10.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    java.awt.Component var22 = var0.add((java.awt.Component)var10);
    var0.enable();
    boolean var24 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test54");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    var0.transferFocusUpCycle();
    java.awt.Container var6 = var0.getParent();
    boolean var7 = var0.isMaximumSizeSet();
    java.awt.event.InputMethodListener[] var8 = var0.getInputMethodListeners();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    javax.swing.JPopupMenu var10 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test55");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    java.awt.Point var33 = var0.getMousePosition();
    javax.swing.border.Border var34 = var0.getBorder();
    boolean var35 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test56");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    boolean var13 = var0.isManagingFocus();
    java.awt.Image var16 = var0.createImage(1, 10);
    java.awt.Rectangle var17 = var0.bounds();
    var0.transferFocusBackward();
    var0.revalidate();
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test57");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    var9.repaint();
    java.awt.Point var20 = var9.location();
    java.awt.Container var21 = var9.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test58");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    var12.setName("");
    var12.enable(true);
    var12.enable();
    java.awt.Point var18 = var12.location();
    var12.repaint(0, 3, (-1), 1);
    var12.setBounds(25, 100, 1, 0);
    var0.addKeyListener((java.awt.event.KeyListener)var12);
    java.awt.event.FocusListener[] var30 = var0.getFocusListeners();
    java.awt.Container var31 = var0.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test59");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.repaint(1L);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    var32.setMaximumSize(var42);
    var25.setPreferredSize(var42);
    var0.setSize(var42);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    java.awt.Color var52 = var51.getBackground();
    var47.setForeground(var52);
    javax.swing.InputMap var54 = var47.getInputMap();
    var0.setInputMap(0, var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test60");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(499, 495.44236387443226d, 0.0d);
    boolean var4 = var3.update();
    int var5 = var3.getType();
    int var6 = var3.getType();
    boolean var7 = var3.update();
    double var8 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 499);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 499);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 495.44236387443226d);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test61");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    int var8 = var0.getY();
    boolean var9 = var0.isDisplayable();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.setInheritsPopupMenu(false);
    var10.move(10, 10);
    var10.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Rectangle var23 = var10.bounds();
    java.awt.image.ColorModel var24 = var10.getColorModel();
    var0.setComponentZOrder((java.awt.Component)var10, 0);
    java.awt.GraphicsConfiguration var27 = var10.getGraphicsConfiguration();
    var10.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test62");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPowerLevel();
    var0.setLeft(false);
    int var5 = var0.getRequiredPower();
    var0.setFiring(false);
    int var8 = var0.getLives();
    int var9 = var0.getPowerLevel();
    int var10 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test63");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    java.util.Locale var6 = var0.getLocale();
    var0.paintImmediately(25, 100, 3, 0);
    boolean var12 = var0.isCursorSet();
    boolean var13 = var0.isCursorSet();
    boolean var14 = var0.isFocusCycleRoot();
    javax.swing.InputMap var15 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test64");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(495.44236387443226d, 25, 0);
    boolean var4 = var3.update();
    double var5 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 5.0d);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test65");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    java.lang.Object var35 = var34.getTreeLock();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    var36.setMaximumSize(var46);
    boolean var48 = var36.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var49 = var36.getAccessibleContext();
    boolean var50 = var36.isDoubleBuffered();
    boolean var51 = var36.getAutoscrolls();
    var36.repaint(10L, (-1), 25, (-1), 100);
    var36.updateUI();
    boolean var59 = var36.requestDefaultFocus();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    boolean var64 = var60.isDoubleBuffered();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    var65.nextFocus();
    var65.reshape((-1), 1, (-1), 10);
    var65.disable();
    boolean var76 = var65.isFocusable();
    int var77 = var65.getHeight();
    var60.setNextFocusableComponent((java.awt.Component)var65);
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    float var80 = var79.getAlignmentX();
    var79.setVisible(false);
    var79.nextFocus();
    SpaceWar.SpacePanel var84 = new SpaceWar.SpacePanel();
    float var85 = var84.getAlignmentX();
    var84.setVisible(false);
    SpaceWar.SpacePanel var88 = new SpaceWar.SpacePanel();
    java.awt.Color var89 = var88.getBackground();
    var84.setForeground(var89);
    var79.setBackground(var89);
    java.awt.Component var92 = var79.getNextFocusableComponent();
    float var93 = var79.getAlignmentY();
    java.awt.event.MouseListener[] var94 = var79.getMouseListeners();
    java.awt.Point var95 = var79.location();
    java.awt.Point var96 = var60.getLocation(var95);
    java.awt.Point var97 = var36.getLocation(var95);
    var34.setLocation(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test66");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    int var24 = var16.getPowerLevel();
    var16.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test67");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    boolean var36 = var0.requestFocus(true);
    var0.reshape((-1), 10, 24, 0);
    java.awt.event.MouseWheelListener[] var42 = var0.getMouseWheelListeners();
    var0.setLocation(2, 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test68");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    var0.computeVisibleRect(var22);
    var0.removeNotify();
    java.awt.GraphicsConfiguration var26 = var0.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test69");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var28 = var0.getRegisteredKeyStrokes();
    java.lang.String var29 = var0.getName();
    java.lang.String var30 = var0.getName();
    boolean var31 = var0.getVerifyInputWhenFocusTarget();
    var0.setAlignmentX((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test70");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Point var16 = var0.getMousePosition(false);
    var0.setDebugGraphicsOptions(1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var25 = var19.getUI();
    var0.setUI(var25);
    java.awt.event.FocusListener[] var27 = var0.getFocusListeners();
    boolean var28 = var0.isVisible();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)10, (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test71");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.transferFocusBackward();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.enable(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    boolean var17 = var15.hasFocus();
    java.awt.Insets var18 = var15.getInsets();
    java.awt.Rectangle var19 = var15.bounds();
    var8.repaint(var19);
    java.awt.Component var21 = var0.add("", (java.awt.Component)var8);
    java.awt.Component.BaselineResizeBehavior var22 = var8.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test72");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    java.awt.Container var19 = var9.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.reshape((-1), 1, (-1), 10);
    var20.disable();
    java.awt.LayoutManager var31 = var20.getLayout();
    java.awt.Container var32 = var20.getParent();
    java.beans.PropertyChangeListener[] var34 = var20.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var9.setNextFocusableComponent((java.awt.Component)var20);
    var20.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test73");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    int var12 = var0.getPowerLevel();
    int var13 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test74");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.setInheritsPopupMenu(false);
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Container var26 = var18.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.removeNotify();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    java.awt.Insets var37 = var30.getInsets();
    java.awt.Insets var38 = var27.getInsets(var37);
    java.awt.Insets var39 = var18.getInsets(var38);
    java.awt.Insets var40 = var0.getInsets(var38);
    java.awt.ComponentOrientation var41 = var0.getComponentOrientation();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var42.setForeground(var47);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    java.awt.dnd.DropTarget var54 = var49.getDropTarget();
    var49.show(false);
    java.awt.Rectangle var57 = var49.getVisibleRect();
    var42.repaint(var57);
    java.awt.FocusTraversalPolicy var59 = var42.getFocusTraversalPolicy();
    javax.swing.TransferHandler var60 = var42.getTransferHandler();
    javax.swing.JToolTip var61 = var42.createToolTip();
    boolean var62 = var61.isValidateRoot();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var69 = var63.getUI();
    java.awt.im.InputMethodRequests var70 = var63.getInputMethodRequests();
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.setVisible(false);
    var71.nextFocus();
    var71.updateUI();
    var71.enableInputMethods(true);
    var71.setSize((-1), 1);
    SpaceWar.SpacePanel var82 = new SpaceWar.SpacePanel();
    var82.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var63.add((java.awt.Component)var71, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var88 = var63.getKeyListeners();
    var63.reshape(10, 100, 3, 3);
    javax.accessibility.AccessibleContext var94 = var63.getAccessibleContext();
    java.awt.Rectangle var95 = var63.getVisibleRect();
    var61.paintImmediately(var95);
    var0.repaint(var95);
    java.awt.Color var98 = var0.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test75");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    java.awt.Color var15 = var14.getBackground();
    var10.setForeground(var15);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    var10.repaint(var25);
    java.awt.FocusTraversalPolicy var27 = var10.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var28 = var10.getInputMethodRequests();
    var10.layout();
    boolean var30 = var10.isFocusTraversalPolicyProvider();
    java.awt.Insets var31 = var10.insets();
    java.awt.Dimension var32 = var10.getMinimumSize();
    java.awt.Dimension var33 = var0.getSize(var32);
    java.awt.Component var36 = var0.locate(10, 400);
    boolean var37 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test76");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    var19.setRequestFocusEnabled(false);
    var19.reshape(100, 0, 100, 0);
    var19.requestFocus();
    var19.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var34 = var19.getLocation();
    java.awt.Component var35 = var11.getComponentAt(var34);
    java.beans.VetoableChangeListener[] var36 = var11.getVetoableChangeListeners();
    var11.removeAll();
    java.awt.event.HierarchyListener[] var38 = var11.getHierarchyListeners();
    var11.repaint(500, 499, 10, 25);
    boolean var44 = var11.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test77");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    boolean var38 = var33.getVerifyInputWhenFocusTarget();
    java.awt.Component var41 = var33.findComponentAt(10, 1);
    var31.addKeyListener((java.awt.event.KeyListener)var33);
    boolean var43 = var33.getFocusTraversalKeysEnabled();
    var33.requestFocus();
    var33.layout();
    var19.remove((java.awt.Component)var33);
    float var47 = var19.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test78");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    var8.setDebugGraphicsOptions(0);
    java.awt.im.InputMethodRequests var35 = var8.getInputMethodRequests();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var8.setForeground(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    var39.repaint();
    java.awt.im.InputMethodRequests var42 = var39.getInputMethodRequests();
    int var43 = var39.countComponents();
    java.awt.event.ComponentListener[] var44 = var39.getComponentListeners();
    var39.removeNotify();
    javax.swing.InputMap var46 = var39.getInputMap();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    java.awt.Color var58 = var57.getBackground();
    var53.setForeground(var58);
    var47.setBackground(var58);
    java.awt.Point var61 = var47.location();
    var39.setLocation(var61);
    boolean var63 = var8.contains(var61);
    int var64 = var8.getHeight();
    boolean var65 = var8.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test79");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    boolean var9 = var7.hasFocus();
    java.awt.Insets var10 = var7.getInsets();
    java.awt.Rectangle var11 = var7.bounds();
    var0.repaint(var11);
    boolean var13 = var0.hasFocus();
    float var14 = var0.getAlignmentX();
    boolean var15 = var0.isCursorSet();
    java.beans.VetoableChangeListener[] var16 = var0.getVetoableChangeListeners();
    var0.firePropertyChange("hi!", 0, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test80");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    boolean var13 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Toolkit var23 = var14.getToolkit();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    var24.list();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    java.awt.dnd.DropTarget var35 = var30.getDropTarget();
    var30.show(false);
    java.awt.Rectangle var38 = var30.getVisibleRect();
    java.awt.Rectangle var39 = var24.getBounds(var38);
    javax.swing.JToolTip var40 = var24.createToolTip();
    var24.firePropertyChange("", false, false);
    var24.validate();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.updateUI();
    var46.enableInputMethods(true);
    java.lang.String var54 = var46.toString();
    var14.putClientProperty((java.lang.Object)var24, (java.lang.Object)var46);
    SpaceWar.Player var56 = new SpaceWar.Player();
    int var57 = var56.getPower();
    var56.setLeft(true);
    var56.increasePower(0);
    int var62 = var56.getR();
    var56.setUp(false);
    var56.setLeft(true);
    var56.setUp(true);
    int var69 = var56.getRequiredPower();
    var0.putClientProperty((java.lang.Object)var24, (java.lang.Object)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var54,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var54.equals("SpaceWar.SpacePanel[,0,0,0var54,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test81");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    javax.swing.border.Border var12 = var0.getBorder();
    var0.setEnabled(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    java.awt.Dimension var21 = var17.getPreferredSize();
    boolean var22 = var17.getVerifyInputWhenFocusTarget();
    java.awt.Component var25 = var17.findComponentAt(10, 1);
    var15.addKeyListener((java.awt.event.KeyListener)var17);
    var17.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var32 = var17.getColorModel();
    boolean var33 = var17.isFocusTraversalPolicyProvider();
    var17.show(false);
    boolean var36 = var17.isManagingFocus();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    java.awt.Color var38 = var37.getBackground();
    var37.repaint();
    var37.setRequestFocusEnabled(false);
    var37.reshape(100, 0, 100, 0);
    var37.requestFocus();
    java.awt.Rectangle var48 = var37.getVisibleRect();
    java.awt.Rectangle var49 = var37.getBounds();
    java.awt.im.InputMethodRequests var50 = var37.getInputMethodRequests();
    boolean var51 = var37.requestFocusInWindow();
    java.awt.Point var53 = var37.getMousePosition(false);
    var37.setDebugGraphicsOptions(1);
    java.awt.Graphics var56 = var37.getGraphics();
    var17.paint(var56);
    var0.paintComponents(var56);
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test82");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(true);
    var0.setFocusTraversalKeysEnabled(false);
    var0.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test83");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    var0.show();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    java.awt.Rectangle var27 = var12.getBounds(var26);
    javax.swing.JToolTip var28 = var12.createToolTip();
    var12.firePropertyChange("", false, false);
    var12.validate();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    boolean var42 = var34.isPaintingForPrint();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var49 = var43.getMouseListeners();
    int var50 = var43.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var51 = var43.getInputMethodRequests();
    var34.addKeyListener((java.awt.event.KeyListener)var43);
    var43.repaint();
    java.awt.Point var54 = var43.location();
    java.awt.Component var55 = var12.getComponentAt(var54);
    java.awt.Point var56 = var0.getLocation(var54);
    var0.setAlignmentY(0.5f);
    boolean var59 = var0.getVerifyInputWhenFocusTarget();
    boolean var60 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    boolean var65 = var61.isDoubleBuffered();
    java.awt.dnd.DropTarget var66 = var61.getDropTarget();
    var61.show(false);
    java.awt.Rectangle var69 = var61.getVisibleRect();
    java.awt.image.BufferedImage var71 = var61.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var72 = var61.getComponentOrientation();
    boolean var73 = var0.isAncestorOf((java.awt.Component)var61);
    java.awt.Rectangle var74 = var61.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test84");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    boolean var23 = var0.requestFocus(false);
    boolean var24 = var0.isFocusTraversalPolicyProvider();
    boolean var25 = var0.isFocusCycleRoot();
    java.lang.String var26 = var0.getUIClassID();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.reshape((-1), 1, (-1), 10);
    var27.disable();
    java.awt.LayoutManager var38 = var27.getLayout();
    java.awt.Container var39 = var27.getParent();
    boolean var40 = var27.isOptimizedDrawingEnabled();
    var27.enableInputMethods(true);
    var27.setFocusTraversalKeysEnabled(false);
    var0.addKeyListener((java.awt.event.KeyListener)var27);
    var27.setLocation(399, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test85");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isCursorSet();
    var10.paintImmediately(3, 10, (-1), (-1));
    javax.swing.plaf.PanelUI var27 = var10.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test86");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.removeAll();
    int var8 = var0.getHeight();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.removeNotify();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    float var18 = var12.getAlignmentY();
    java.awt.Insets var19 = var12.getInsets();
    java.awt.Insets var20 = var9.getInsets(var19);
    boolean var21 = var9.isDoubleBuffered();
    java.awt.Component var22 = var0.add((java.awt.Component)var9);
    boolean var23 = var0.isBackgroundSet();
    java.awt.event.MouseListener[] var24 = var0.getMouseListeners();
    var0.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test87");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy((-1), 2);
    int var3 = var2.getType();
    var2.hit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test88");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    java.awt.Point var14 = var0.location();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.updateUI();
    var18.enableInputMethods(true);
    var15.add((java.awt.Component)var16, (java.lang.Object)true);
    java.awt.Dimension var27 = var16.getPreferredSize();
    var16.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    java.awt.Color var38 = var37.getBackground();
    var37.repaint();
    java.lang.Object var40 = var32.getClientProperty((java.lang.Object)var37);
    var16.remove((java.awt.Component)var32);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var48 = var42.getMouseMotionListeners();
    java.awt.Dimension var49 = var42.getMinimumSize();
    var16.setMaximumSize(var49);
    var0.setMinimumSize(var49);
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test89");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    java.awt.Rectangle var9 = var0.getBounds();
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test90");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getX();
    double var5 = var3.getY();
    boolean var6 = var3.update();
    double var7 = var3.getY();
    int var8 = var3.getType();
    double var9 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2.0d);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test91");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    var0.show(true);
    boolean var21 = var0.hasFocus();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test92");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    java.awt.event.ComponentListener[] var11 = var0.getComponentListeners();
    var0.reshape(400, 3, 500, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test93");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var10 = var0.getAncestorListeners();
    int var11 = var0.getWidth();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    var12.nextFocus();
    var12.reshape((-1), 1, (-1), 10);
    var12.disable();
    java.awt.Component var25 = var12.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    var26.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var31 = var26.getUI();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.repaint(1L);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    java.awt.Dimension var49 = var45.getPreferredSize();
    var39.setMaximumSize(var49);
    var32.setPreferredSize(var49);
    var26.setMaximumSize(var49);
    var12.setSize(var49);
    var12.show();
    int var55 = var0.getComponentZOrder((java.awt.Component)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test94");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    var0.resize(400, 2);
    boolean var23 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    boolean var35 = var24.isFocusable();
    int var36 = var24.getHeight();
    javax.swing.InputVerifier var37 = var24.getInputVerifier();
    java.awt.Graphics var38 = var24.getGraphics();
    java.awt.Color var39 = var24.getForeground();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    java.awt.Rectangle var48 = var40.getVisibleRect();
    java.awt.Toolkit var49 = var40.getToolkit();
    java.awt.event.MouseMotionListener[] var50 = var40.getMouseMotionListeners();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    java.awt.dnd.DropTarget var56 = var51.getDropTarget();
    var51.show(false);
    boolean var59 = var51.isPaintingForPrint();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var66 = var60.getMouseListeners();
    int var67 = var60.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var68 = var60.getInputMethodRequests();
    var51.addKeyListener((java.awt.event.KeyListener)var60);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    boolean var74 = var70.isDoubleBuffered();
    var70.list();
    float var76 = var70.getAlignmentY();
    boolean var77 = var60.isFocusCycleRoot((java.awt.Container)var70);
    javax.swing.JPopupMenu var78 = var70.getComponentPopupMenu();
    var70.move((-1), 100);
    var70.validate();
    java.awt.Rectangle var83 = var70.getVisibleRect();
    var40.paintImmediately(var83);
    var24.paintImmediately(var83);
    var0.scrollRectToVisible(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test95");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.removeAll();
    int var8 = var0.getHeight();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.removeNotify();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    float var18 = var12.getAlignmentY();
    java.awt.Insets var19 = var12.getInsets();
    java.awt.Insets var20 = var9.getInsets(var19);
    boolean var21 = var9.isDoubleBuffered();
    java.awt.Component var22 = var0.add((java.awt.Component)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.remove(2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test96");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    var0.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var15 = var9.getUI();
    java.awt.im.InputMethodRequests var16 = var9.getInputMethodRequests();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var17.setSize((-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    var28.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var9.add((java.awt.Component)var17, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var34 = var9.getKeyListeners();
    var9.repaint(3, 1, 25, 0);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    java.awt.Color var41 = var40.getBackground();
    boolean var44 = var40.inside(0, (-1));
    var40.transferFocusUpCycle();
    java.awt.Container var46 = var40.getParent();
    boolean var47 = var40.isMaximumSizeSet();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.updateUI();
    var51.enableInputMethods(true);
    var48.add((java.awt.Component)var49, (java.lang.Object)true);
    boolean var61 = var49.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    java.awt.dnd.DropTarget var67 = var62.getDropTarget();
    var62.show(false);
    java.awt.Rectangle var70 = var62.getVisibleRect();
    var49.setBounds(var70);
    var40.setBounds(var70);
    java.awt.Rectangle var73 = var9.getBounds(var70);
    var0.setBounds(var73);
    java.lang.String var75 = var0.toString();
    javax.swing.border.Border var76 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var75,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var75.equals("SpaceWar.SpacePanel[,0,0,0var75,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test97");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    javax.swing.plaf.PanelUI var20 = var3.getUI();
    var3.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test98");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    java.awt.Image var8 = var0.createImage(10, 100);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var0.setForeground(var10);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var14 = var0.getAutoscrolls();
    java.lang.String var15 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test99");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    boolean var18 = var0.isLightweight();
    boolean var21 = var0.contains(3, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test100");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    boolean var23 = var0.isValid();
    var0.setFocusCycleRoot(true);
    java.awt.event.KeyListener[] var26 = var0.getKeyListeners();
    java.awt.LayoutManager var27 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test101");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    java.awt.Point var33 = var0.getMousePosition();
    java.awt.image.BufferedImage var35 = var0.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3, 100);
    boolean var40 = var0.isMaximumSizeSet();
    var0.updateUI();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var42.setForeground(var47);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    java.awt.dnd.DropTarget var54 = var49.getDropTarget();
    var49.show(false);
    java.awt.Rectangle var57 = var49.getVisibleRect();
    var42.repaint(var57);
    java.awt.FocusTraversalPolicy var59 = var42.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var60 = var42.getInputMethodRequests();
    var42.layout();
    var42.setDebugGraphicsOptions(10);
    javax.swing.ActionMap var64 = var42.getActionMap();
    var0.setActionMap(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test102");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    java.awt.Dimension var6 = var0.size();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]", (byte)100, (byte)10);
    var0.setDebugGraphicsOptions(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test103");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    boolean var6 = var0.requestFocus(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    var0.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test104");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test105");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    var0.setRigth(false);
    int var8 = var0.getPower();
    var0.setRigth(false);
    boolean var11 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test106");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    int var18 = var0.getWidth();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    var19.setForeground(var24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var19.repaint(var34);
    java.awt.FocusTraversalPolicy var36 = var19.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var37 = var19.getInputMethodRequests();
    var19.layout();
    java.awt.Container var39 = var19.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    var40.list();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    java.awt.dnd.DropTarget var51 = var46.getDropTarget();
    var46.show(false);
    java.awt.Rectangle var54 = var46.getVisibleRect();
    java.awt.Rectangle var55 = var40.getBounds(var54);
    javax.swing.JToolTip var56 = var40.createToolTip();
    var40.firePropertyChange("", false, false);
    var40.validate();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    java.awt.dnd.DropTarget var67 = var62.getDropTarget();
    var62.show(false);
    boolean var70 = var62.isPaintingForPrint();
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var77 = var71.getMouseListeners();
    int var78 = var71.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var79 = var71.getInputMethodRequests();
    var62.addKeyListener((java.awt.event.KeyListener)var71);
    var71.repaint();
    java.awt.Point var82 = var71.location();
    java.awt.Component var83 = var40.getComponentAt(var82);
    var19.setLocation(var82);
    java.beans.VetoableChangeListener[] var85 = var19.getVetoableChangeListeners();
    java.awt.Dimension var86 = var19.getMaximumSize();
    var0.setPreferredSize(var86);
    var0.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test107");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    java.awt.Dimension var36 = var0.getSize();
    var0.removeNotify();
    java.awt.Cursor var38 = var0.getCursor();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    boolean var43 = var39.inside(0, (-1));
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    java.awt.Color var49 = var48.getBackground();
    var44.setForeground(var49);
    var39.setForeground(var49);
    java.awt.image.VolatileImage var54 = var39.createVolatileImage(400, (-1));
    java.awt.LayoutManager var55 = var39.getLayout();
    var0.setLayout(var55);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.updateUI();
    var60.enableInputMethods(true);
    var57.add((java.awt.Component)var58, (java.lang.Object)true);
    java.awt.Dimension var69 = var58.getPreferredSize();
    var58.move(100, 10);
    java.awt.Graphics var73 = var58.getGraphics();
    var58.setVisible(true);
    boolean var76 = var0.isFocusCycleRoot((java.awt.Container)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test108");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.event.InputMethodListener[] var20 = var11.getInputMethodListeners();
    java.awt.Toolkit var21 = var11.getToolkit();
    var11.setSize(24, 2);
    java.awt.Dimension var25 = var11.getPreferredSize();
    boolean var26 = var11.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test109");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.setScore(3);
    int var3 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 500);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test110");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    var0.setAlignmentX(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test111");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.beans.VetoableChangeListener[] var3 = var0.getVetoableChangeListeners();
    var0.paintImmediately(10, 0, (-1), 25);
    boolean var9 = var0.getInheritsPopupMenu();
    var0.resize(500, 10);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    boolean var17 = var13.isDoubleBuffered();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.reshape((-1), 1, (-1), 10);
    var18.disable();
    boolean var29 = var18.isFocusable();
    int var30 = var18.getHeight();
    var13.setNextFocusableComponent((java.awt.Component)var18);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var37.setForeground(var42);
    var32.setBackground(var42);
    java.awt.Component var45 = var32.getNextFocusableComponent();
    float var46 = var32.getAlignmentY();
    java.awt.event.MouseListener[] var47 = var32.getMouseListeners();
    java.awt.Point var48 = var32.location();
    java.awt.Point var49 = var13.getLocation(var48);
    var0.setLocation(var49);
    var0.setSize(2, 3);
    SpaceWar.Player var54 = new SpaceWar.Player();
    boolean var55 = var54.isRecovering();
    var54.setRigth(false);
    int var58 = var54.getPower();
    boolean var59 = var54.isDead();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    java.awt.Color var61 = var60.getBackground();
    var60.repaint();
    java.awt.im.InputMethodRequests var63 = var60.getInputMethodRequests();
    var60.setDoubleBuffered(true);
    var60.setInheritsPopupMenu(false);
    boolean var68 = var60.isFocusTraversalPolicySet();
    var0.putClientProperty((java.lang.Object)var54, (java.lang.Object)var68);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    var70.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var75 = var70.getUI();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var77 = var0.add((java.awt.Component)var70, 399);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test112");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    var1.enable();
    var1.setIgnoreRepaint(true);
    java.awt.Point var30 = var1.location();
    float var31 = var1.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test113");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    java.awt.ComponentOrientation var35 = var28.getComponentOrientation();
    var28.transferFocusUpCycle();
    var28.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 10, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test114");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    var0.transferFocusUpCycle();
    boolean var8 = var0.isOptimizedDrawingEnabled();
    boolean var9 = var0.isOpaque();
    java.awt.Point var11 = var0.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test115");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    boolean var7 = var0.requestFocusInWindow();
    java.awt.Point var9 = var0.getMousePosition(false);
    boolean var10 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    boolean var11 = var0.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test116");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    java.awt.Graphics var19 = var11.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test117");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy((-1), 2);
    int var3 = var2.getType();
    double var4 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 212.52893787993318d);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test118");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    boolean var35 = var18.isPaintingTile();
    boolean var36 = var18.isDoubleBuffered();
    boolean var37 = var18.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test119");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    var6.repaint();
    var6.setRequestFocusEnabled(false);
    var6.reshape(100, 0, 100, 0);
    var6.requestFocus();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var23 = var17.getUI();
    java.awt.im.InputMethodRequests var24 = var17.getInputMethodRequests();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var25.setSize((-1), 1);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    var36.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var17.add((java.awt.Component)var25, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    var42.setName("");
    java.awt.ComponentOrientation var45 = var42.getComponentOrientation();
    var17.applyComponentOrientation(var45);
    var6.setComponentOrientation(var45);
    var0.applyComponentOrientation(var45);
    int var49 = var0.getHeight();
    boolean var50 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test120");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    var0.setAlignmentY(100.0f);
    var0.setAlignmentX(0.0f);
    java.awt.Component var13 = var0.getComponentAt(24, 100);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    var0.setUI(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test121");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    java.awt.im.InputMethodRequests var35 = var32.getInputMethodRequests();
    int var36 = var32.countComponents();
    java.awt.event.ComponentListener[] var37 = var32.getComponentListeners();
    var32.removeNotify();
    javax.swing.InputMap var39 = var32.getInputMap();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    java.awt.Color var51 = var50.getBackground();
    var46.setForeground(var51);
    var40.setBackground(var51);
    java.awt.Point var54 = var40.location();
    var32.setLocation(var54);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    java.awt.Color var67 = var66.getBackground();
    var66.repaint();
    var66.setRequestFocusEnabled(false);
    var66.reshape(100, 0, 100, 0);
    java.awt.Component var76 = var56.add((java.awt.Component)var66);
    var56.enable();
    SpaceWar.SpacePanel var78 = new SpaceWar.SpacePanel();
    float var79 = var78.getAlignmentX();
    boolean var80 = var78.hasFocus();
    boolean var81 = var78.isPreferredSizeSet();
    var32.putClientProperty((java.lang.Object)var56, (java.lang.Object)var78);
    java.awt.Component var83 = var19.add("PanelUI", (java.awt.Component)var78);
    javax.swing.plaf.PanelUI var84 = var78.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test122");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var53.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, true);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    var58.setInheritsPopupMenu(false);
    var58.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    boolean var70 = var66.isDoubleBuffered();
    var66.list();
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    float var73 = var72.getAlignmentX();
    var72.setVisible(false);
    boolean var76 = var72.isDoubleBuffered();
    java.awt.dnd.DropTarget var77 = var72.getDropTarget();
    var72.show(false);
    java.awt.Rectangle var80 = var72.getVisibleRect();
    java.awt.Rectangle var81 = var66.getBounds(var80);
    javax.swing.JToolTip var82 = var66.createToolTip();
    var58.removeKeyListener((java.awt.event.KeyListener)var66);
    java.awt.Rectangle var84 = var58.getVisibleRect();
    var53.paintImmediately(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test123");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.Insets var7 = var0.getInsets();
    java.awt.im.InputContext var8 = var0.getInputContext();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)10, (byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test124");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    int var3 = var2.getR();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var6 = var2.getRank();
    var2.hit();
    double var8 = var2.getY();
    double var9 = var2.getX();
    var2.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 289.89972941256605d);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test125");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    java.awt.Color var6 = var5.getBackground();
    var5.repaint();
    java.lang.Object var8 = var0.getClientProperty((java.lang.Object)var5);
    boolean var11 = var5.contains(1, 500);
    var5.firePropertyChange("PanelUI", 100L, 0L);
    java.awt.Dimension var16 = var5.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test126");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Dimension var4 = var0.getPreferredSize();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    var5.setName("");
    java.awt.Dimension var8 = var5.minimumSize();
    boolean var9 = var5.isDoubleBuffered();
    java.awt.event.HierarchyListener[] var10 = var5.getHierarchyListeners();
    java.awt.Font var11 = var5.getFont();
    var0.setFont(var11);
    var0.setDebugGraphicsOptions(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test127");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    java.awt.Dimension var36 = var0.getSize();
    boolean var37 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.resetKeyboardActions();
    var0.removeKeyListener((java.awt.event.KeyListener)var38);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    boolean var56 = var48.isPaintingForPrint();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var63 = var57.getMouseListeners();
    int var64 = var57.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var65 = var57.getInputMethodRequests();
    var48.addKeyListener((java.awt.event.KeyListener)var57);
    boolean var67 = var48.isDisplayable();
    java.awt.Dimension var68 = var48.getPreferredSize();
    var0.setSize(var68);
    java.awt.Graphics var70 = var0.getGraphics();
    boolean var71 = var0.requestDefaultFocus();
    java.awt.event.MouseWheelListener[] var72 = var0.getMouseWheelListeners();
    boolean var73 = var0.isCursorSet();
    var0.reshape(1, 399, 399, 10);
    javax.swing.border.Border var79 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test128");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.resetKeyboardActions();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    boolean var10 = var0.getAutoscrolls();
    var0.firePropertyChange("hi!", 0.5f, 100.0f);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 499, 500);
    var0.repaint(100L, 500, 25, 1, 2);
    java.awt.Container var25 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test129");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    java.awt.image.BufferedImage var21 = var0.loadImg("PanelUI");
    var0.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    boolean var28 = var24.inside(0, (-1));
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.reshape((-1), 1, (-1), 10);
    var30.disable();
    boolean var41 = var30.isFocusable();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var48 = var42.getUI();
    java.awt.im.InputMethodRequests var49 = var42.getInputMethodRequests();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.updateUI();
    var50.enableInputMethods(true);
    var50.setSize((-1), 1);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var42.add((java.awt.Component)var50, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var67 = var42.getKeyListeners();
    java.awt.FocusTraversalPolicy var68 = var42.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var74 = var69.getToolkit();
    var30.add((java.awt.Component)var42, (java.lang.Object)var69);
    var30.layout();
    java.awt.Component var77 = var24.add("", (java.awt.Component)var30);
    java.lang.Object var78 = var0.getClientProperty((java.lang.Object)var77);
    javax.swing.KeyStroke[] var79 = var0.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test130");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.setInheritsPopupMenu(false);
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Container var26 = var18.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.removeNotify();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    java.awt.Insets var37 = var30.getInsets();
    java.awt.Insets var38 = var27.getInsets(var37);
    java.awt.Insets var39 = var18.getInsets(var38);
    java.awt.Insets var40 = var0.getInsets(var38);
    var0.setFocusCycleRoot(true);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    java.awt.Color var44 = var43.getBackground();
    var43.repaint();
    java.awt.im.InputMethodRequests var46 = var43.getInputMethodRequests();
    int var47 = var43.countComponents();
    java.awt.Dimension var48 = var43.getSize();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var54 = var49.getUI();
    java.awt.Color var55 = var49.getBackground();
    var43.setBackground(var55);
    var0.setForeground(var55);
    var0.enable();
    javax.accessibility.AccessibleContext var59 = var0.getAccessibleContext();
    int var60 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test131");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    var0.firePropertyChange("hi!", '4', '#');
    var0.enableInputMethods(false);
    javax.swing.InputMap var21 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test132");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.reshape((-1), (-1), 100, 100);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 10, 0);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.updateUI();
    var19.enableInputMethods(true);
    var16.add((java.awt.Component)var17, (java.lang.Object)true);
    java.awt.Dimension var28 = var17.getPreferredSize();
    var17.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', ' ');
    java.lang.String var33 = var17.getUIClassID();
    var0.setNextFocusableComponent((java.awt.Component)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test133");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(289.89972941256605d, 3, 10);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test134");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.firePropertyChange("", 0.5f, 100.0f);
    var0.enable(false);
    boolean var13 = var0.isOpaque();
    var0.enableInputMethods(false);
    var0.setAlignmentX(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test135");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    java.awt.event.KeyListener[] var27 = var5.getKeyListeners();
    var5.enable();
    int var31 = var5.getBaseline(24, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test136");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.image.BufferedImage var10 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var11 = var0.getComponentCount();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    var12.nextFocus();
    var12.repaint(1L);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    var19.setMaximumSize(var29);
    var12.setPreferredSize(var29);
    java.awt.Container var32 = var12.getFocusCycleRootAncestor();
    java.awt.image.ColorModel var33 = var12.getColorModel();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    boolean var42 = var34.isPaintingForPrint();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var49 = var43.getMouseListeners();
    int var50 = var43.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var51 = var43.getInputMethodRequests();
    var34.addKeyListener((java.awt.event.KeyListener)var43);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    var53.list();
    float var59 = var53.getAlignmentY();
    boolean var60 = var43.isFocusCycleRoot((java.awt.Container)var53);
    var53.firePropertyChange("", 1L, 1L);
    var53.setVerifyInputWhenFocusTarget(true);
    var53.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var71 = var53.getLocation();
    java.awt.Point var72 = var12.getLocation(var71);
    java.awt.Component var73 = var0.findComponentAt(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test137");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    var9.paintImmediately(var25);
    java.awt.Rectangle var27 = var9.getBounds();
    var0.scrollRectToVisible(var27);
    boolean var29 = var0.getIgnoreRepaint();
    java.lang.String var30 = var0.toString();
    var0.setBounds(0, 25, 1, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var30,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var30.equals("SpaceWar.SpacePanel[,0,0,0var30,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test138");


    SpaceWar.Text var4 = new SpaceWar.Text(561.355847267745d, 495.44236387443226d, 1L, "SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test139");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.repaint(1L);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    java.awt.Rectangle var48 = var40.getVisibleRect();
    java.awt.Rectangle var49 = var34.getBounds(var48);
    var27.setBounds(var49);
    var0.setBounds(var49);
    boolean var52 = var0.isVisible();
    java.awt.Insets var53 = var0.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test140");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    boolean var3 = var2.isDead();
    int var4 = var2.getType();
    var2.hit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test141");


    SpaceWar.Text var4 = new SpaceWar.Text(408.3256835490439d, 432.7832140219743d, 100L, "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test142");


    SpaceWar.Text var4 = new SpaceWar.Text((-8.529389630162045d), 240.9713786093358d, (-1L), "SpaceWar.SpacePanel[,100,0,100x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var5 = var4.update();
    boolean var6 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test143");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    java.awt.Container var19 = var9.getFocusCycleRootAncestor();
    boolean var20 = var9.hasFocus();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.setInheritsPopupMenu(false);
    boolean var27 = var21.isDoubleBuffered();
    boolean var28 = var21.isMinimumSizeSet();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    java.awt.Dimension var39 = var35.getPreferredSize();
    var29.setMaximumSize(var39);
    boolean var41 = var29.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var42 = var29.getAccessibleContext();
    boolean var43 = var29.isDoubleBuffered();
    java.awt.Rectangle var44 = var29.getVisibleRect();
    var21.setBounds(var44);
    java.lang.Object var46 = var9.getClientProperty((java.lang.Object)var21);
    java.awt.Insets var47 = var9.insets();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    var48.setInheritsPopupMenu(false);
    boolean var54 = var48.isMinimumSizeSet();
    java.awt.Point var56 = var48.getMousePosition(true);
    boolean var57 = var9.isFocusCycleRoot((java.awt.Container)var48);
    var9.revalidate();
    boolean var59 = var9.isOptimizedDrawingEnabled();
    java.awt.Rectangle var60 = var9.getBounds();
    var9.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test144");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    var0.increasePower(0);
    int var5 = var0.getX();
    var0.setDown(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 400);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test145");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    var0.enable(true);
    boolean var15 = var0.getVerifyInputWhenFocusTarget();
    int var16 = var0.getWidth();
    java.lang.Object var17 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test146");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    boolean var6 = var0.isDead();
    int var7 = var0.getPower();
    var0.increasePower(10);
    var0.setFiring(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test147");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    var0.reshape(499, 2, 499, 500);
    var0.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test148");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    float var18 = var0.getAlignmentX();
    java.awt.image.VolatileImage var21 = var0.createVolatileImage(25, 1);
    java.beans.PropertyChangeListener[] var23 = var0.getPropertyChangeListeners("PanelUI");
    boolean var24 = var0.isPaintingForPrint();
    java.awt.im.InputContext var25 = var0.getInputContext();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var32 = var26.getUI();
    java.awt.im.InputMethodRequests var33 = var26.getInputMethodRequests();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    var34.nextFocus();
    var34.updateUI();
    var34.enableInputMethods(true);
    var34.setSize((-1), 1);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    var45.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var26.add((java.awt.Component)var34, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.setInheritsPopupMenu(false);
    boolean var57 = var51.isDoubleBuffered();
    boolean var58 = var51.isMinimumSizeSet();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    java.awt.Dimension var69 = var65.getPreferredSize();
    var59.setMaximumSize(var69);
    boolean var71 = var59.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var72 = var59.getAccessibleContext();
    boolean var73 = var59.isDoubleBuffered();
    java.awt.Rectangle var74 = var59.getVisibleRect();
    var51.setBounds(var74);
    java.awt.Rectangle var76 = var26.getBounds(var74);
    var0.scrollRectToVisible(var76);
    int var78 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test149");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    boolean var4 = var0.isFocusTraversalPolicyProvider();
    java.beans.PropertyChangeListener[] var6 = var0.getPropertyChangeListeners("hi!");
    boolean var7 = var0.getIgnoreRepaint();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    float var14 = var8.getAlignmentY();
    java.awt.Insets var15 = var8.getInsets();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var22 = var16.getMouseListeners();
    var16.firePropertyChange("", 0.5f, 100.0f);
    var16.enable(false);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    boolean var36 = var31.getVerifyInputWhenFocusTarget();
    java.awt.Component var39 = var31.findComponentAt(10, 1);
    var29.addKeyListener((java.awt.event.KeyListener)var31);
    java.awt.Cursor var41 = var29.getCursor();
    java.awt.Dimension var42 = var29.getMinimumSize();
    var16.setSize(var42);
    java.awt.Dimension var44 = var8.getSize(var42);
    var0.setPreferredSize(var44);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)10, (short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test150");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    int var6 = var0.getX();
    int var7 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test151");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.image.ColorModel var9 = var0.getColorModel();
    var0.enableInputMethods(true);
    boolean var12 = var0.isPaintingForPrint();
    boolean var13 = var0.isValidateRoot();
    java.awt.Toolkit var14 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test152");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.setToolTipText("");
    boolean var11 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test153");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    java.awt.Point var14 = var0.location();
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setName("");
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.repaint(1L);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    java.awt.Dimension var36 = var32.getPreferredSize();
    var26.setMaximumSize(var36);
    var19.setPreferredSize(var36);
    javax.swing.plaf.PanelUI var39 = var19.getUI();
    java.awt.Dimension var40 = var19.getMinimumSize();
    boolean var41 = var19.isFocusable();
    var19.enable();
    boolean var43 = var0.isAncestorOf((java.awt.Component)var19);
    var19.setAutoscrolls(false);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    boolean var48 = var46.hasFocus();
    java.awt.Insets var49 = var46.getInsets();
    java.awt.Rectangle var50 = var46.bounds();
    java.awt.event.MouseMotionListener[] var51 = var46.getMouseMotionListeners();
    boolean var52 = var46.isMaximumSizeSet();
    java.awt.LayoutManager var53 = var46.getLayout();
    java.awt.Rectangle var54 = var46.getBounds();
    var19.remove((java.awt.Component)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test154");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    java.awt.Point var20 = var0.getLocation();
    var0.layout();
    java.awt.peer.ComponentPeer var22 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test155");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    boolean var10 = var0.isPaintingTile();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    var11.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var16 = var11.getUI();
    java.awt.Color var17 = var11.getBackground();
    var0.addKeyListener((java.awt.event.KeyListener)var11);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.repaint(1L);
    var19.firePropertyChange("", (short)(-1), (short)(-1));
    java.awt.Component var32 = var19.getComponentAt(0, 100);
    var19.nextFocus();
    boolean var34 = var0.isAncestorOf((java.awt.Component)var19);
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test156");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var28 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    java.awt.Dimension var33 = var29.getPreferredSize();
    java.awt.Toolkit var34 = var29.getToolkit();
    boolean var35 = var29.isFocusable();
    javax.swing.KeyStroke[] var36 = var29.getRegisteredKeyStrokes();
    java.awt.Component var39 = var29.getComponentAt(100, 100);
    java.lang.Object var40 = var29.getTreeLock();
    boolean var43 = var29.inside(400, 0);
    java.awt.event.MouseWheelListener[] var44 = var29.getMouseWheelListeners();
    var29.enableInputMethods(true);
    boolean var47 = var0.isAncestorOf((java.awt.Component)var29);
    boolean var48 = var0.isEnabled();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    boolean var54 = var49.getVerifyInputWhenFocusTarget();
    java.awt.Component var57 = var49.findComponentAt(10, 1);
    boolean var58 = var49.requestDefaultFocus();
    var49.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var61 = var49.getLocation();
    boolean var62 = var0.contains(var61);
    boolean var63 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test157");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.isCursorSet();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    java.awt.Point var18 = var10.location();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var29.repaint();
    var29.setRequestFocusEnabled(false);
    var29.reshape(100, 0, 100, 0);
    java.awt.Component var39 = var19.add((java.awt.Component)var29);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    var40.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var45 = var40.getUI();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.repaint(1L);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    java.awt.Dimension var63 = var59.getPreferredSize();
    var53.setMaximumSize(var63);
    var46.setPreferredSize(var63);
    var40.setMaximumSize(var63);
    java.awt.Dimension var67 = var29.getSize(var63);
    var10.setMaximumSize(var63);
    var0.setMinimumSize(var63);
    boolean var70 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test158");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var8 = var0.getUI();
    java.util.Set var10 = var0.getFocusTraversalKeys(3);
    var0.requestFocus();
    var0.setLocation(0, 24);
    var0.doLayout();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var22 = var16.getMouseListeners();
    var16.firePropertyChange("", 0.5f, 100.0f);
    var16.enable(false);
    int var29 = var16.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.repaint(1L);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    java.awt.Dimension var47 = var43.getPreferredSize();
    var37.setMaximumSize(var47);
    var30.setPreferredSize(var47);
    java.awt.Container var50 = var30.getFocusCycleRootAncestor();
    java.awt.image.ColorModel var51 = var30.getColorModel();
    int var52 = var30.getComponentCount();
    java.awt.Component var53 = var16.add((java.awt.Component)var30);
    var30.setBounds((-1), 25, 10, (-1));
    var30.grabFocus();
    boolean var60 = var0.isAncestorOf((java.awt.Component)var30);
    var30.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test159");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    var42.firePropertyChange("PanelUI", (short)1, (short)1);
    int var89 = var42.getHeight();
    var42.layout();
    var42.resize(499, 24);
    java.lang.String var94 = var42.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test160");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPower();
    int var3 = var0.getLives();
    boolean var4 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test161");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    boolean var36 = var0.requestFocus(true);
    java.awt.Dimension var37 = var0.getMinimumSize();
    java.lang.String var38 = var0.toString();
    int var39 = var0.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var38,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]"+ "'", var38.equals("SpaceWar.SpacePanel[,0,0,0var38,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test162");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    java.awt.Color var6 = var5.getBackground();
    var5.repaint();
    java.lang.Object var8 = var0.getClientProperty((java.lang.Object)var5);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    boolean var13 = var9.inside(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    var9.setForeground(var19);
    var5.setBackground(var19);
    java.awt.Image var25 = var5.createImage(100, 24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    var26.setName("");
    java.awt.Dimension var29 = var26.minimumSize();
    boolean var30 = var26.isDoubleBuffered();
    java.awt.event.HierarchyListener[] var31 = var26.getHierarchyListeners();
    java.awt.Font var32 = var26.getFont();
    var5.setFont(var32);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var35.add((java.awt.Component)var36, (java.lang.Object)true);
    boolean var47 = var35.isMinimumSizeSet();
    var35.reshape(499, 2, 499, 500);
    java.awt.Component var53 = var5.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]", (java.awt.Component)var35);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    java.awt.dnd.DropTarget var59 = var54.getDropTarget();
    var54.show(false);
    java.awt.Rectangle var62 = var54.getVisibleRect();
    java.awt.image.BufferedImage var64 = var54.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var65 = var54.getComponentOrientation();
    var35.setComponentOrientation(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test163");


    SpaceWar.Text var4 = new SpaceWar.Text(506.9915098063617d, 323.62099822147866d, 10L, "hi!");
    boolean var5 = var4.update();
    boolean var6 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test164");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setFiring(true);
    var0.loseLife();
    int var5 = var0.getR();
    boolean var6 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test165");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.setInheritsPopupMenu(false);
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Container var26 = var18.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.removeNotify();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    java.awt.Insets var37 = var30.getInsets();
    java.awt.Insets var38 = var27.getInsets(var37);
    java.awt.Insets var39 = var18.getInsets(var38);
    java.awt.Insets var40 = var0.getInsets(var38);
    java.awt.image.VolatileImage var43 = var0.createVolatileImage(3, 0);
    int var44 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test166");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.firePropertyChange("hi!", 3, 0);
    boolean var32 = var19.isValidateRoot();
    java.awt.Rectangle var33 = var19.getVisibleRect();
    var19.setSize(500, 499);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test167");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    float var37 = var0.getAlignmentY();
    boolean var38 = var0.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test168");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isCursorSet();
    java.awt.Dimension var21 = var0.size();
    var0.enable();
    java.awt.Rectangle var23 = var0.getVisibleRect();
    var0.setAlignmentY((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test169");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    var0.enable();
    boolean var21 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test170");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    boolean var6 = var0.isShowing();
    boolean var7 = var0.isBackgroundSet();
    java.awt.im.InputContext var8 = var0.getInputContext();
    var0.firePropertyChange("hi!", (short)100, (short)1);
    javax.swing.plaf.PanelUI var13 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test171");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.isMinimumSizeSet();
    var1.firePropertyChange("SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)10, (short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test172");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    float var8 = var0.getAlignmentX();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var14.add((java.awt.Component)var15, (java.lang.Object)true);
    java.awt.Dimension var26 = var15.getPreferredSize();
    var9.setMaximumSize(var26);
    java.awt.Dimension var28 = var9.preferredSize();
    boolean var29 = var9.getVerifyInputWhenFocusTarget();
    java.awt.Rectangle var30 = var9.bounds();
    var0.computeVisibleRect(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test173");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Dimension var9 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test174");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var6 = var2.getType();
    int var7 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test175");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    var0.resize(400, 2);
    boolean var23 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    boolean var26 = var24.hasFocus();
    boolean var27 = var24.isPreferredSizeSet();
    var24.firePropertyChange("", (short)1, (short)0);
    boolean var32 = var24.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var33 = var24.getPeer();
    java.awt.ComponentOrientation var34 = var24.getComponentOrientation();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    var35.setForeground(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    java.awt.dnd.DropTarget var47 = var42.getDropTarget();
    var42.show(false);
    java.awt.Rectangle var50 = var42.getVisibleRect();
    var35.repaint(var50);
    java.awt.FocusTraversalPolicy var52 = var35.getFocusTraversalPolicy();
    var35.resetKeyboardActions();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var60 = var54.getMouseListeners();
    int var61 = var54.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    java.awt.dnd.DropTarget var67 = var62.getDropTarget();
    var62.show(false);
    java.awt.Rectangle var70 = var62.getVisibleRect();
    var54.paintImmediately(var70);
    var35.setBounds(var70);
    java.awt.Rectangle var73 = var24.getBounds(var70);
    var0.paintImmediately(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test176");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(10, 2);
    var2.update();
    var2.explode();

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test177");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    int var4 = var0.getY();
    var0.increasePower(499);
    var0.setRigth(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 500);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test178");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    var19.setRequestFocusEnabled(false);
    var19.reshape(100, 0, 100, 0);
    var19.requestFocus();
    var19.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var34 = var19.getLocation();
    java.awt.Component var35 = var11.getComponentAt(var34);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    boolean var42 = var36.isFocusCycleRoot();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.updateUI();
    var46.enableInputMethods(true);
    var43.add((java.awt.Component)var44, (java.lang.Object)true);
    java.awt.Dimension var55 = var44.getPreferredSize();
    var36.setSize(var55);
    var36.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    var61.nextFocus();
    var61.repaint(1L);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    java.awt.Dimension var78 = var74.getPreferredSize();
    var68.setMaximumSize(var78);
    var61.setPreferredSize(var78);
    var36.setSize(var78);
    javax.swing.plaf.PanelUI var82 = var36.getUI();
    var11.setUI(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test179");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    int var4 = var0.getY();
    var0.increasePower(499);
    java.awt.image.BufferedImage var8 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var9 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test180");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    java.awt.Point var35 = var0.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test181");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    java.awt.image.BufferedImage var21 = var0.loadImg("PanelUI");
    var0.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    boolean var28 = var24.inside(0, (-1));
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.reshape((-1), 1, (-1), 10);
    var30.disable();
    boolean var41 = var30.isFocusable();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var48 = var42.getUI();
    java.awt.im.InputMethodRequests var49 = var42.getInputMethodRequests();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.updateUI();
    var50.enableInputMethods(true);
    var50.setSize((-1), 1);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var42.add((java.awt.Component)var50, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var67 = var42.getKeyListeners();
    java.awt.FocusTraversalPolicy var68 = var42.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var74 = var69.getToolkit();
    var30.add((java.awt.Component)var42, (java.lang.Object)var69);
    var30.layout();
    java.awt.Component var77 = var24.add("", (java.awt.Component)var30);
    java.lang.Object var78 = var0.getClientProperty((java.lang.Object)var77);
    boolean var79 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test182");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    java.awt.Point var14 = var0.getMousePosition(true);
    boolean var15 = var0.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var0.getSize();
    java.awt.image.ColorModel var17 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test183");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.increasePower(499);
    var0.setLife(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test184");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    boolean var77 = var0.isValid();
    int var78 = var0.getWidth();
    var0.setAlignmentY(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test185");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    var1.show(true);
    boolean var14 = var1.isShowing();
    java.awt.Color var15 = var1.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test186");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    var12.repaint();
    java.awt.im.InputMethodRequests var15 = var12.getInputMethodRequests();
    int var16 = var12.countComponents();
    java.awt.event.ComponentListener[] var17 = var12.getComponentListeners();
    var12.removeNotify();
    javax.swing.InputMap var19 = var12.getInputMap();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var26.setForeground(var31);
    var20.setBackground(var31);
    java.awt.Point var34 = var20.location();
    var12.setLocation(var34);
    var0.setLocation(var34);
    java.awt.Image var39 = var0.createImage(399, 1);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test187");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.increasePower(3);
    var0.setRigth(true);
    var0.setScore(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test188");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    java.lang.String var50 = var2.getUIClassID();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var57 = var51.getMouseListeners();
    int var58 = var51.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var59 = var51.getInputMethodRequests();
    var51.removeNotify();
    var51.enable();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    java.awt.Color var63 = var62.getBackground();
    boolean var66 = var62.inside(0, (-1));
    var62.transferFocusUpCycle();
    java.lang.String var68 = var62.getName();
    boolean var69 = var51.isFocusCycleRoot((java.awt.Container)var62);
    java.awt.Dimension var70 = var51.getMinimumSize();
    boolean var73 = var51.inside(500, 3);
    boolean var74 = var2.isFocusCycleRoot((java.awt.Container)var51);
    java.awt.image.ColorModel var75 = var2.getColorModel();
    var2.setLocation(3, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "PanelUI"+ "'", var50.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test189");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.event.ContainerListener[] var5 = var0.getContainerListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    var6.setInheritsPopupMenu(false);
    boolean var12 = var6.isDoubleBuffered();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.reshape((-1), 1, (-1), 10);
    var13.disable();
    java.awt.LayoutManager var24 = var13.getLayout();
    var6.setLayout(var24);
    var0.setLayout(var24);
    int var27 = var0.getComponentCount();
    java.awt.LayoutManager var28 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test190");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    var18.hide();
    java.awt.event.MouseWheelListener[] var36 = var18.getMouseWheelListeners();
    var18.setLocation((-1), 500);
    java.awt.Insets var40 = var18.insets();
    boolean var41 = var18.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test191");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(25, (-1));
    var2.update();
    var2.update();
    double var5 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 261.0993676452089d);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test192");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.reshape((-1), 1, (-1), 10);
    java.util.Set var19 = var8.getFocusTraversalKeys(3);
    var0.setFocusTraversalKeys(1, var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    java.awt.Color var26 = var25.getBackground();
    var21.setForeground(var26);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    java.awt.dnd.DropTarget var33 = var28.getDropTarget();
    var28.show(false);
    java.awt.Rectangle var36 = var28.getVisibleRect();
    var21.repaint(var36);
    java.awt.FocusTraversalPolicy var38 = var21.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var39 = var21.getInputMethodRequests();
    var21.layout();
    java.awt.Container var41 = var21.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    var42.list();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    java.awt.Rectangle var56 = var48.getVisibleRect();
    java.awt.Rectangle var57 = var42.getBounds(var56);
    javax.swing.JToolTip var58 = var42.createToolTip();
    var42.firePropertyChange("", false, false);
    var42.validate();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    java.awt.dnd.DropTarget var69 = var64.getDropTarget();
    var64.show(false);
    boolean var72 = var64.isPaintingForPrint();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var79 = var73.getMouseListeners();
    int var80 = var73.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var81 = var73.getInputMethodRequests();
    var64.addKeyListener((java.awt.event.KeyListener)var73);
    var73.repaint();
    java.awt.Point var84 = var73.location();
    java.awt.Component var85 = var42.getComponentAt(var84);
    var21.setLocation(var84);
    java.awt.Point var87 = var0.getLocation(var84);
    java.awt.Component var90 = var0.locate(10, 25);
    var0.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test193");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    var7.hide();
    java.awt.Component var41 = var7.locate(2, 24);
    var7.show(false);
    boolean var44 = var7.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test194");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    var9.firePropertyChange("hi!", 'a', '4');
    java.awt.Color var39 = var9.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test195");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    java.awt.Component.BaselineResizeBehavior var10 = var0.getBaselineResizeBehavior();
    boolean var11 = var0.isMaximumSizeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test196");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    java.lang.String var2 = var0.toString();
    var0.setAlignmentX(0.5f);
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var11 = var5.getUI();
    java.awt.im.InputMethodRequests var12 = var5.getInputMethodRequests();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.updateUI();
    var13.enableInputMethods(true);
    var13.setSize((-1), 1);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    var24.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var5.add((java.awt.Component)var13, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    java.awt.Toolkit var35 = var30.getToolkit();
    java.awt.Toolkit var36 = var30.getToolkit();
    java.awt.Component var37 = var13.add((java.awt.Component)var30);
    int var38 = var13.getY();
    int var41 = var13.getBaseline(25, 10);
    var0.setComponentZOrder((java.awt.Component)var13, 0);
    java.awt.event.HierarchyBoundsListener[] var44 = var13.getHierarchyBoundsListeners();
    var13.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var2,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var2.equals("SpaceWar.SpacePanel[,0,0,0var2,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test197");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    var0.repaint(0L);
    boolean var16 = var0.isShowing();
    java.awt.event.InputMethodListener[] var17 = var0.getInputMethodListeners();
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test198");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    var7.nextFocus();
    var7.reshape((-1), 1, (-1), 10);
    var7.disable();
    java.awt.LayoutManager var18 = var7.getLayout();
    var0.setLayout(var18);
    java.awt.event.MouseMotionListener[] var20 = var0.getMouseMotionListeners();
    java.awt.event.MouseWheelListener[] var21 = var0.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test199");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(10, 370.2289277239558d, 5.0d);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test200");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    boolean var6 = var0.requestFocus(false);
    var0.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test201");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.loseLife();
    int var5 = var0.getY();
    var0.setRigth(true);
    int var8 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test202");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    boolean var38 = var32.isFocusOwner();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    java.awt.Toolkit var45 = var40.getToolkit();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    var46.setName("");
    int var49 = var46.getX();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    java.awt.Color var60 = var59.getBackground();
    var55.setForeground(var60);
    var50.setBackground(var60);
    var46.setBackground(var60);
    var40.setForeground(var60);
    var32.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var60);
    var14.setBackground(var60);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    java.awt.Color var78 = var77.getBackground();
    var73.setForeground(var78);
    var67.setBackground(var78);
    java.awt.Point var81 = var67.location();
    java.awt.Point var82 = var14.getLocation(var81);
    boolean var83 = var1.contains(var82);
    boolean var84 = var1.isDisplayable();
    boolean var85 = var1.isFocusTraversalPolicyProvider();
    var1.resize((-1), 3);
    var1.setFocusTraversalPolicyProvider(true);
    boolean var91 = var1.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test203");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    java.awt.Point var18 = var12.getMousePosition();
    java.lang.String var19 = var12.getUIClassID();
    var0.setNextFocusableComponent((java.awt.Component)var12);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var27 = var21.getUI();
    java.awt.im.InputMethodRequests var28 = var21.getInputMethodRequests();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    var29.setSize((-1), 1);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    var40.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var21.add((java.awt.Component)var29, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    java.awt.Toolkit var51 = var46.getToolkit();
    java.awt.Toolkit var52 = var46.getToolkit();
    java.awt.Component var53 = var29.add((java.awt.Component)var46);
    var29.setDebugGraphicsOptions(0);
    var29.setVerifyInputWhenFocusTarget(false);
    var29.nextFocus();
    var29.repaint(100, 0, 10, 3);
    java.awt.Dimension var64 = var29.getSize();
    javax.swing.InputVerifier var65 = var29.getInputVerifier();
    var0.remove((java.awt.Component)var29);
    var0.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "PanelUI"+ "'", var19.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test204");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    boolean var85 = var0.getFocusTraversalKeysEnabled();
    java.awt.event.InputMethodListener[] var86 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test205");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    boolean var9 = var0.requestFocus(false);
    var0.setDebugGraphicsOptions(25);
    int var12 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test206");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setForeground(var10);
    var0.setAutoscrolls(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    boolean var23 = var15.isPaintingForPrint();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var30 = var24.getMouseListeners();
    int var31 = var24.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var32 = var24.getInputMethodRequests();
    var15.addKeyListener((java.awt.event.KeyListener)var24);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    float var40 = var34.getAlignmentY();
    boolean var41 = var24.isFocusCycleRoot((java.awt.Container)var34);
    var34.firePropertyChange("", 1L, 1L);
    var34.setVerifyInputWhenFocusTarget(true);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    java.awt.Dimension var51 = var48.minimumSize();
    boolean var52 = var48.isDoubleBuffered();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    java.awt.Dimension var59 = var55.getPreferredSize();
    boolean var60 = var55.getVerifyInputWhenFocusTarget();
    java.awt.Component var63 = var55.findComponentAt(10, 1);
    var53.addKeyListener((java.awt.event.KeyListener)var55);
    var55.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    java.awt.Color var71 = var70.getBackground();
    var70.repaint();
    java.awt.im.InputMethodRequests var73 = var70.getInputMethodRequests();
    java.awt.GraphicsConfiguration var74 = var70.getGraphicsConfiguration();
    var55.remove((java.awt.Component)var70);
    java.awt.Font var76 = var70.getFont();
    java.awt.FontMetrics var77 = var48.getFontMetrics(var76);
    java.awt.FontMetrics var78 = var34.getFontMetrics(var76);
    var0.setFont(var76);
    SpaceWar.SpacePanel var81 = new SpaceWar.SpacePanel();
    float var82 = var81.getAlignmentX();
    var81.setVisible(false);
    var81.setEnabled(false);
    java.awt.Image var89 = var81.createImage(10, 100);
    SpaceWar.SpacePanel var90 = new SpaceWar.SpacePanel();
    java.awt.Color var91 = var90.getBackground();
    var81.setForeground(var91);
    var81.setFocusTraversalPolicyProvider(true);
    java.util.Set var96 = var81.getFocusTraversalKeys(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(10, var96);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test207");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    boolean var7 = var0.getAutoscrolls();
    java.awt.Image var10 = var0.createImage(100, 25);
    boolean var11 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test208");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isMinimumSizeSet();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.setInheritsPopupMenu(false);
    var9.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    var17.list();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    java.awt.Rectangle var31 = var23.getVisibleRect();
    java.awt.Rectangle var32 = var17.getBounds(var31);
    javax.swing.JToolTip var33 = var17.createToolTip();
    var9.removeKeyListener((java.awt.event.KeyListener)var17);
    var9.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var37 = var9.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    java.awt.Toolkit var43 = var38.getToolkit();
    boolean var44 = var38.isFocusable();
    javax.swing.KeyStroke[] var45 = var38.getRegisteredKeyStrokes();
    java.awt.Component var48 = var38.getComponentAt(100, 100);
    java.lang.Object var49 = var38.getTreeLock();
    boolean var52 = var38.inside(400, 0);
    java.awt.event.MouseWheelListener[] var53 = var38.getMouseWheelListeners();
    var38.enableInputMethods(true);
    boolean var56 = var9.isAncestorOf((java.awt.Component)var38);
    java.awt.Component var57 = var0.add("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var38);
    boolean var58 = var57.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test209");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    int var4 = var0.getX();
    var0.setLife(100);
    boolean var7 = var0.isRecovering();
    var0.setUp(true);
    var0.increasePower((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test210");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.firePropertyChange("", 0.5f, 100.0f);
    var0.enable(false);
    var0.transferFocusDownCycle();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 1.0f);
    java.awt.Dimension var18 = var0.minimumSize();
    java.lang.Object var19 = var0.getTreeLock();
    java.awt.Rectangle var20 = var0.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test211");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    boolean var15 = var0.isValid();
    boolean var16 = var0.getVerifyInputWhenFocusTarget();
    var0.removeNotify();
    java.awt.dnd.DropTarget var18 = var0.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test212");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    boolean var3 = var2.isDead();
    var2.hit();
    double var5 = var2.getY();
    double var6 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test213");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    boolean var19 = var0.requestFocus(false);
    java.awt.Dimension var20 = var0.minimumSize();
    java.awt.image.VolatileImage var23 = var0.createVolatileImage(24, 10);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    var24.setMaximumSize(var34);
    boolean var36 = var24.getVerifyInputWhenFocusTarget();
    int var37 = var24.getX();
    java.awt.Rectangle var38 = var24.bounds();
    var0.repaint(var38);
    boolean var40 = var0.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test214");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(400, 241.4584513263457d, 475.3294093279198d);
    double var4 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 475.3294093279198d);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test215");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var48 = var42.getUI();
    java.awt.im.InputMethodRequests var49 = var42.getInputMethodRequests();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.updateUI();
    var50.enableInputMethods(true);
    var50.setSize((-1), 1);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var42.add((java.awt.Component)var50, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var67 = var42.getKeyListeners();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    boolean var72 = var68.isDoubleBuffered();
    var68.list();
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    boolean var78 = var74.isDoubleBuffered();
    java.awt.dnd.DropTarget var79 = var74.getDropTarget();
    var74.show(false);
    java.awt.Rectangle var82 = var74.getVisibleRect();
    java.awt.image.BufferedImage var84 = var74.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var85 = var68.isAncestorOf((java.awt.Component)var74);
    java.awt.GraphicsConfiguration var86 = var74.getGraphicsConfiguration();
    java.awt.Font var87 = var74.getFont();
    var42.setFont(var87);
    var42.nextFocus();
    java.awt.Point var90 = var42.getLocation();
    java.awt.Component var91 = var0.getComponentAt(var90);
    var91.setSize(10, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test216");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Graphics var3 = var0.getGraphics();
    java.awt.event.MouseMotionListener[] var4 = var0.getMouseMotionListeners();
    boolean var5 = var0.getIgnoreRepaint();
    var0.transferFocusBackward();
    java.awt.Cursor var7 = var0.getCursor();
    java.awt.Point var8 = var0.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test217");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    boolean var21 = var0.isRequestFocusEnabled();
    float var22 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test218");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isFocusTraversalPolicyProvider();
    java.awt.Insets var21 = var0.insets();
    java.awt.Rectangle var22 = var0.getVisibleRect();
    boolean var23 = var0.isMinimumSizeSet();
    boolean var24 = var0.isMinimumSizeSet();
    boolean var25 = var0.isFocusable();
    java.awt.Dimension var26 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test219");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    var0.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.setInheritsPopupMenu(false);
    boolean var20 = var14.isDoubleBuffered();
    boolean var21 = var14.isMinimumSizeSet();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    var22.setMaximumSize(var32);
    boolean var34 = var22.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var35 = var22.getAccessibleContext();
    boolean var36 = var22.isDoubleBuffered();
    java.awt.Rectangle var37 = var22.getVisibleRect();
    var14.setBounds(var37);
    var0.computeVisibleRect(var37);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    var40.setMaximumSize(var50);
    boolean var52 = var40.getVerifyInputWhenFocusTarget();
    int var53 = var40.getX();
    java.awt.Rectangle var54 = var40.bounds();
    var0.remove((java.awt.Component)var40);
    boolean var56 = var0.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test220");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    var1.enable();
    var1.setIgnoreRepaint(true);
    boolean var30 = var1.isPaintingForPrint();
    int var31 = var1.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test221");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var28 = var0.getRegisteredKeyStrokes();
    java.lang.String var29 = var0.getName();
    var0.repaint(1L);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    boolean var34 = var32.hasFocus();
    boolean var35 = var32.isPreferredSizeSet();
    var32.firePropertyChange("", (short)1, (short)0);
    boolean var40 = var32.isMaximumSizeSet();
    var32.list();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    java.awt.dnd.DropTarget var47 = var42.getDropTarget();
    var42.show(false);
    java.awt.Rectangle var50 = var42.getVisibleRect();
    java.awt.image.BufferedImage var52 = var42.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var53 = var42.getComponentOrientation();
    var42.transferFocusBackward();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    var55.setFocusCycleRoot(true);
    var32.add((java.awt.Component)var42, (java.lang.Object)true);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test222");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    var0.doLayout();
    boolean var21 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    boolean var22 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test223");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Rectangle var15 = var0.bounds();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.reshape((-1), 1, (-1), 10);
    var16.disable();
    boolean var27 = var16.isFocusable();
    java.awt.Dimension var28 = var16.getSize();
    var0.setSize(var28);
    boolean var30 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test224");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    java.awt.image.VolatileImage var9 = var0.createVolatileImage(0, (-1));
    var0.transferFocusUpCycle();
    var0.setAlignmentY(0.0f);
    var0.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test225");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var0.repaint(25, 25, 24, 10);
    var0.transferFocusBackward();
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test226");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.isMinimumSizeSet();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    java.awt.Toolkit var27 = var18.getToolkit();
    java.awt.event.MouseMotionListener[] var28 = var18.getMouseMotionListeners();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    java.awt.dnd.DropTarget var34 = var29.getDropTarget();
    var29.show(false);
    boolean var37 = var29.isPaintingForPrint();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var44 = var38.getMouseListeners();
    int var45 = var38.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var46 = var38.getInputMethodRequests();
    var29.addKeyListener((java.awt.event.KeyListener)var38);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    float var54 = var48.getAlignmentY();
    boolean var55 = var38.isFocusCycleRoot((java.awt.Container)var48);
    javax.swing.JPopupMenu var56 = var48.getComponentPopupMenu();
    var48.move((-1), 100);
    var48.validate();
    java.awt.Rectangle var61 = var48.getVisibleRect();
    var18.paintImmediately(var61);
    var1.repaint(var61);
    var1.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test227");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    boolean var10 = var0.isShowing();
    var0.repaint(10, 100, 100, 25);
    javax.swing.ActionMap var16 = var0.getActionMap();
    var0.setRequestFocusEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test228");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    float var18 = var0.getAlignmentY();
    boolean var19 = var0.getInheritsPopupMenu();
    boolean var20 = var0.isMaximumSizeSet();
    javax.swing.plaf.PanelUI var21 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test229");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    var0.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    javax.swing.plaf.PanelUI var13 = var10.getUI();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    boolean var22 = var14.isPaintingForPrint();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var29 = var23.getMouseListeners();
    int var30 = var23.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var31 = var23.getInputMethodRequests();
    var14.addKeyListener((java.awt.event.KeyListener)var23);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    var33.list();
    float var39 = var33.getAlignmentY();
    boolean var40 = var23.isFocusCycleRoot((java.awt.Container)var33);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    var42.updateUI();
    java.awt.Component var48 = var23.add("", (java.awt.Component)var42);
    java.awt.ComponentOrientation var49 = var42.getComponentOrientation();
    boolean var50 = var42.isFocusable();
    var10.remove((java.awt.Component)var42);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.setInheritsPopupMenu(false);
    boolean var58 = var52.isDoubleBuffered();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.nextFocus();
    var59.reshape((-1), 1, (-1), 10);
    var59.disable();
    java.awt.LayoutManager var70 = var59.getLayout();
    var52.setLayout(var70);
    var0.add((java.awt.Component)var10, (java.lang.Object)var70);
    int var73 = var0.getX();
    java.awt.LayoutManager var74 = var0.getLayout();
    javax.swing.JToolTip var75 = var0.createToolTip();
    var0.setOpaque(false);
    boolean var78 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test230");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.update();
    java.awt.image.BufferedImage var6 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test231");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    var0.invalidate();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    boolean var18 = var16.hasFocus();
    java.awt.Insets var19 = var16.getInsets();
    java.awt.Insets var20 = var8.getInsets(var19);
    boolean var21 = var8.isManagingFocus();
    java.awt.Image var24 = var8.createImage(1, 10);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    int var38 = var25.getX();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.setEnabled(false);
    var8.add((java.awt.Component)var25, (java.lang.Object)false);
    boolean var46 = var8.isForegroundSet();
    java.awt.Component var47 = var0.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var8);
    var8.revalidate();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var55 = var49.getVisibleRect();
    var8.repaint(var55);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var63 = var57.getMouseListeners();
    int var64 = var57.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    boolean var69 = var65.isDoubleBuffered();
    java.awt.dnd.DropTarget var70 = var65.getDropTarget();
    var65.show(false);
    java.awt.Rectangle var73 = var65.getVisibleRect();
    var57.paintImmediately(var73);
    java.awt.Rectangle var75 = var57.getBounds();
    var8.paintImmediately(var75);
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    float var78 = var77.getAlignmentX();
    boolean var79 = var77.hasFocus();
    boolean var80 = var77.isPreferredSizeSet();
    var77.firePropertyChange("", (short)1, (short)0);
    boolean var85 = var77.isMaximumSizeSet();
    var77.list();
    java.awt.Rectangle var87 = var77.getBounds();
    java.awt.Font var88 = var77.getFont();
    var8.setFont(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test232");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.removeAll();
    int var8 = var0.getHeight();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var9.setForeground(var14);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    java.awt.Rectangle var24 = var16.getVisibleRect();
    var9.repaint(var24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var32 = var26.getMouseListeners();
    java.awt.Dimension var33 = var26.getPreferredSize();
    java.util.Locale var34 = var26.getLocale();
    var9.setLocale(var34);
    var0.setLocale(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test233");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var8.setAutoscrolls(true);
    java.awt.Image var29 = var8.createImage(400, 400);
    var8.enableInputMethods(true);
    javax.swing.plaf.PanelUI var32 = var8.getUI();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var39 = var33.getMouseListeners();
    int var40 = var33.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var41 = var33.getInputMethodRequests();
    var33.removeNotify();
    var33.enable();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    boolean var48 = var44.inside(0, (-1));
    var44.transferFocusUpCycle();
    java.lang.String var50 = var44.getName();
    boolean var51 = var33.isFocusCycleRoot((java.awt.Container)var44);
    var8.addKeyListener((java.awt.event.KeyListener)var33);
    var33.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test234");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var6.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    java.lang.Object var30 = var22.getClientProperty((java.lang.Object)var27);
    var6.remove((java.awt.Component)var22);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var38 = var32.getMouseMotionListeners();
    java.awt.Dimension var39 = var32.getMinimumSize();
    var6.setMaximumSize(var39);
    var0.setPreferredSize(var39);
    java.awt.Toolkit var42 = var0.getToolkit();
    javax.swing.InputMap var43 = var0.getInputMap();
    java.beans.PropertyChangeListener[] var44 = var0.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test235");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    java.awt.Rectangle var14 = var0.bounds();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    java.awt.im.InputMethodRequests var18 = var15.getInputMethodRequests();
    int var19 = var15.countComponents();
    java.awt.event.ComponentListener[] var20 = var15.getComponentListeners();
    var15.removeNotify();
    javax.swing.InputMap var22 = var15.getInputMap();
    int var23 = var15.getDebugGraphicsOptions();
    var0.addKeyListener((java.awt.event.KeyListener)var15);
    boolean var25 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test236");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.transferFocus();
    boolean var28 = var0.isFocusable();
    var0.disable();
    var0.setDebugGraphicsOptions(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test237");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var53.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, true);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    var58.setName("");
    java.awt.Dimension var61 = var58.minimumSize();
    boolean var62 = var58.isDoubleBuffered();
    java.awt.event.HierarchyListener[] var63 = var58.getHierarchyListeners();
    java.awt.Font var64 = var58.getFont();
    java.awt.FontMetrics var65 = var53.getFontMetrics(var64);
    int var66 = var53.getX();
    boolean var67 = var53.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test238");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getPowerLevel();
    var0.increasePower((-1));
    boolean var7 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test239");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    boolean var21 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    boolean var31 = var22.requestDefaultFocus();
    var22.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var34 = var22.getLocation();
    java.awt.Point var35 = var0.getLocation(var34);
    var0.setSize(24, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test240");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    boolean var7 = var0.requestFocusInWindow();
    float var8 = var0.getAlignmentY();
    java.awt.LayoutManager var9 = var0.getLayout();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var10.setSize((-1), 1);
    java.awt.Rectangle var21 = var10.bounds();
    var0.setBounds(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test241");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    java.awt.Rectangle var7 = var0.getBounds();
    int var8 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test242");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    boolean var6 = var0.requestFocus(false);
    java.awt.Dimension var7 = var0.size();
    boolean var8 = var0.isShowing();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    var9.updateUI();
    var9.enableInputMethods(true);
    var9.setSize((-1), 1);
    boolean var22 = var9.contains(1, 1);
    java.awt.Component var25 = var9.getComponentAt(100, 3);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    var26.enable(false);
    boolean var33 = var26.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    java.awt.Dimension var38 = var34.getPreferredSize();
    java.awt.Toolkit var39 = var34.getToolkit();
    boolean var40 = var34.isFocusable();
    javax.swing.KeyStroke[] var41 = var34.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    java.awt.Dimension var48 = var44.getPreferredSize();
    boolean var49 = var44.getVerifyInputWhenFocusTarget();
    java.awt.Component var52 = var44.findComponentAt(10, 1);
    var42.addKeyListener((java.awt.event.KeyListener)var44);
    var44.repaint(100, (-1), (-1), 1);
    boolean var59 = var34.isAncestorOf((java.awt.Component)var44);
    var26.addKeyListener((java.awt.event.KeyListener)var44);
    java.awt.ComponentOrientation var61 = var26.getComponentOrientation();
    var9.setComponentOrientation(var61);
    var0.applyComponentOrientation(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test243");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    int var6 = var0.getRequiredPower();
    var0.setLeft(false);
    int var9 = var0.getR();
    int var10 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test244");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    java.awt.image.BufferedImage var21 = var0.loadImg("PanelUI");
    java.awt.Dimension var22 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test245");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setBackground(var10);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    boolean var17 = var13.isDoubleBuffered();
    var13.list();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    java.awt.Rectangle var27 = var19.getVisibleRect();
    java.awt.Rectangle var28 = var13.getBounds(var27);
    javax.swing.JToolTip var29 = var13.createToolTip();
    var13.firePropertyChange("", false, false);
    var13.validate();
    boolean var35 = var13.isEnabled();
    java.awt.Color var36 = var13.getBackground();
    var0.setForeground(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test246");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.firePropertyChange("hi!", 3, 0);
    var19.setAlignmentY(100.0f);
    boolean var34 = var19.getAutoscrolls();
    var19.invalidate();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var42 = var36.getMouseListeners();
    java.awt.Dimension var43 = var36.getPreferredSize();
    java.util.Locale var44 = var36.getLocale();
    var36.setFocusable(true);
    var36.setSize(3, 10);
    var36.invalidate();
    javax.swing.plaf.PanelUI var51 = var36.getUI();
    var36.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1.0f, 0.5f);
    var19.remove((java.awt.Component)var36);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    java.awt.Dimension var61 = var57.getPreferredSize();
    boolean var62 = var57.getVerifyInputWhenFocusTarget();
    java.awt.Component var65 = var57.findComponentAt(10, 1);
    java.awt.Dimension var66 = var57.minimumSize();
    var36.setPreferredSize(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test247");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    var0.removeAll();
    int var33 = var0.getX();
    boolean var34 = var0.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test248");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    java.awt.Dimension var18 = var1.minimumSize();
    java.awt.Insets var19 = var1.getInsets();
    int var20 = var1.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test249");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    var0.loseLife();
    var0.update();
    var0.setFiring(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test250");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.event.InputMethodListener[] var20 = var11.getInputMethodListeners();
    java.awt.Toolkit var21 = var11.getToolkit();
    var11.setSize(24, 2);
    java.awt.Container var25 = var11.getTopLevelAncestor();
    boolean var28 = var11.contains(1, 2);
    boolean var30 = var11.areFocusTraversalKeysSet(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test251");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    javax.swing.plaf.PanelUI var40 = var20.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    java.awt.Rectangle var56 = var48.getVisibleRect();
    var41.repaint(var56);
    java.awt.FocusTraversalPolicy var58 = var41.getFocusTraversalPolicy();
    var41.resetKeyboardActions();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    boolean var64 = var60.isDoubleBuffered();
    java.awt.dnd.DropTarget var65 = var60.getDropTarget();
    var60.show(false);
    java.awt.Rectangle var68 = var60.getVisibleRect();
    var41.computeVisibleRect(var68);
    javax.swing.ActionMap var70 = var41.getActionMap();
    var20.setActionMap(var70);
    java.awt.Point var72 = var20.getMousePosition();
    int var73 = var11.getComponentZOrder((java.awt.Component)var20);
    java.awt.Point var74 = var20.location();
    java.awt.event.HierarchyBoundsListener[] var75 = var20.getHierarchyBoundsListeners();
    java.beans.PropertyChangeListener[] var77 = var20.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test252");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    boolean var18 = var3.hasFocus();
    java.lang.String var19 = var3.toString();
    int var20 = var3.getX();
    java.awt.Graphics var21 = var3.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var19.equals("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test253");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    javax.swing.ActionMap var11 = var0.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test254");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(2.0d, 240.9713786093358d, 24, 24);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test255");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    boolean var4 = var0.isFocusTraversalPolicyProvider();
    java.beans.PropertyChangeListener[] var6 = var0.getPropertyChangeListeners("hi!");
    java.awt.Cursor var7 = var0.getCursor();
    var0.paintImmediately(24, 500, 3, 100);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var19 = var13.getUI();
    java.awt.im.InputMethodRequests var20 = var13.getInputMethodRequests();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.updateUI();
    var21.enableInputMethods(true);
    var21.setSize((-1), 1);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var13.add((java.awt.Component)var21, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var21.setAutoscrolls(true);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    var40.reshape((-1), 1, (-1), 10);
    var40.disable();
    java.awt.Component var53 = var40.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    var54.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var59 = var54.getUI();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.repaint(1L);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    var60.setPreferredSize(var77);
    var54.setMaximumSize(var77);
    var40.setSize(var77);
    var21.setMaximumSize(var77);
    var0.setMaximumSize(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test256");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    var0.setOpaque(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 500, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test257");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var24 = var18.getMouseListeners();
    int var25 = var18.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var18.paintImmediately(var34);
    java.awt.Rectangle var36 = var18.getBounds();
    var0.scrollRectToVisible(var36);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Container var40 = var0.getParent();
    var0.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test258");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    var0.repaint(3, 1, 25, 0);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    boolean var36 = var31.getVerifyInputWhenFocusTarget();
    java.awt.Dimension var37 = var31.size();
    var0.resize(var37);
    var0.reshape(2, 499, 399, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test259");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy((-1), 3);
    var2.explode();

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test260");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    boolean var23 = var0.isValid();
    var0.setFocusCycleRoot(true);
    var0.setFocusTraversalPolicyProvider(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test261");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    java.awt.Cursor var2 = var0.getCursor();
    java.awt.Color var3 = var0.getBackground();
    var0.setInheritsPopupMenu(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test262");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    boolean var9 = var0.requestFocus(false);
    var0.hide();
    java.awt.Point var11 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test263");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    java.awt.im.InputContext var6 = var0.getInputContext();
    boolean var7 = var0.isMinimumSizeSet();
    java.awt.image.BufferedImage var9 = var0.loadImg("SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.resize(2, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test264");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    boolean var15 = var0.isValid();
    boolean var16 = var0.getVerifyInputWhenFocusTarget();
    var0.setEnabled(true);
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test265");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    var1.firePropertyChange("PanelUI", 499, 2);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var20.setForeground(var25);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var20.repaint(var35);
    java.awt.FocusTraversalPolicy var37 = var20.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var38 = var20.getInputMethodRequests();
    var20.layout();
    java.awt.Point var40 = var20.getMousePosition();
    java.awt.Graphics var41 = var20.getGraphics();
    javax.swing.TransferHandler var42 = var20.getTransferHandler();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.reshape((-1), 1, (-1), 10);
    var43.disable();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    java.awt.Dimension var59 = var55.getPreferredSize();
    java.awt.Toolkit var60 = var55.getToolkit();
    boolean var61 = var55.isFocusable();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    var63.nextFocus();
    var63.reshape((-1), 1, (-1), 10);
    java.util.Set var74 = var63.getFocusTraversalKeys(3);
    var55.setFocusTraversalKeys(1, var74);
    var43.setFocusTraversalKeys(0, var74);
    java.awt.Rectangle var77 = var43.getVisibleRect();
    var20.scrollRectToVisible(var77);
    java.awt.Rectangle var79 = var1.getBounds(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test266");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    var8.setBackground(var19);
    java.awt.Point var22 = var8.location();
    var0.setLocation(var22);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var34.repaint();
    var34.setRequestFocusEnabled(false);
    var34.reshape(100, 0, 100, 0);
    java.awt.Component var44 = var24.add((java.awt.Component)var34);
    var24.enable();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    boolean var48 = var46.hasFocus();
    boolean var49 = var46.isPreferredSizeSet();
    var0.putClientProperty((java.lang.Object)var24, (java.lang.Object)var46);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.repaint(1L);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    boolean var62 = var58.isDoubleBuffered();
    var58.list();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    java.awt.dnd.DropTarget var69 = var64.getDropTarget();
    var64.show(false);
    java.awt.Rectangle var72 = var64.getVisibleRect();
    java.awt.Rectangle var73 = var58.getBounds(var72);
    var51.setBounds(var73);
    var46.repaint(var73);
    boolean var76 = var46.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test267");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.disable();
    java.awt.peer.ComponentPeer var30 = var19.getPeer();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    var31.setDoubleBuffered(true);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    boolean var39 = var37.hasFocus();
    java.awt.Insets var40 = var37.getInsets();
    java.awt.Insets var41 = var31.getInsets(var40);
    java.awt.Insets var42 = var19.getInsets(var41);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var49 = var43.getMouseListeners();
    int var50 = var43.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var51 = var43.getInputMethodRequests();
    var43.removeNotify();
    var43.enable();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    java.awt.Color var55 = var54.getBackground();
    boolean var58 = var54.inside(0, (-1));
    var54.transferFocusUpCycle();
    java.lang.String var60 = var54.getName();
    boolean var61 = var43.isFocusCycleRoot((java.awt.Container)var54);
    java.awt.Dimension var62 = var43.getMinimumSize();
    boolean var63 = var43.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    java.awt.Graphics var69 = var64.getGraphics();
    java.awt.event.MouseMotionListener[] var70 = var64.getMouseMotionListeners();
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.setVisible(false);
    var71.setInheritsPopupMenu(false);
    boolean var77 = var71.isDoubleBuffered();
    boolean var78 = var71.isMinimumSizeSet();
    java.awt.Font var79 = var71.getFont();
    var64.setFont(var79);
    java.awt.FontMetrics var81 = var43.getFontMetrics(var79);
    var19.setFont(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test268");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(0, 226.53068162065512d, 215.19350638961689d);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test269");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.updateUI();
    var27.enableInputMethods(true);
    java.lang.String var35 = var27.toString();
    java.awt.FocusTraversalPolicy var36 = var27.getFocusTraversalPolicy();
    var15.removeKeyListener((java.awt.event.KeyListener)var27);
    boolean var38 = var27.isShowing();
    java.awt.GraphicsConfiguration var39 = var27.getGraphicsConfiguration();
    var27.setDebugGraphicsOptions(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var35.equals("SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test270");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    double var4 = var2.getY();
    var2.explode();
    int var6 = var2.getR();
    int var7 = var2.getRank();
    int var8 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test271");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isMinimumSizeSet();
    java.awt.LayoutManager var7 = var0.getLayout();
    java.awt.event.HierarchyListener[] var8 = var0.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test272");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getPowerLevel();
    var0.increasePower((-1));
    int var7 = var0.getLives();
    int var8 = var0.getRequiredPower();
    java.awt.image.BufferedImage var10 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test273");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    var0.setOpaque(true);
    var0.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test274");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    var0.enable();
    var0.repaint(0L);
    var0.move(1, 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test275");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    boolean var10 = var0.isShowing();
    boolean var12 = var0.requestFocus(true);
    java.beans.PropertyChangeListener[] var14 = var0.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    javax.swing.event.AncestorListener[] var15 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test276");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    java.awt.Point var18 = var12.getMousePosition();
    java.lang.String var19 = var12.getUIClassID();
    var0.setNextFocusableComponent((java.awt.Component)var12);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var27 = var21.getUI();
    java.awt.im.InputMethodRequests var28 = var21.getInputMethodRequests();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    var29.setSize((-1), 1);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    var40.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var21.add((java.awt.Component)var29, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    java.awt.Toolkit var51 = var46.getToolkit();
    java.awt.Toolkit var52 = var46.getToolkit();
    java.awt.Component var53 = var29.add((java.awt.Component)var46);
    var29.setDebugGraphicsOptions(0);
    var29.setVerifyInputWhenFocusTarget(false);
    var29.nextFocus();
    var29.repaint(100, 0, 10, 3);
    java.awt.Dimension var64 = var29.getSize();
    javax.swing.InputVerifier var65 = var29.getInputVerifier();
    var0.remove((java.awt.Component)var29);
    boolean var67 = var0.hasFocus();
    java.awt.image.ColorModel var68 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "PanelUI"+ "'", var19.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test277");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    var2.update();
    double var4 = var2.getX();
    var2.explode();
    var2.explode();
    int var7 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 273.15587563254314d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test278");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.image.ColorModel var9 = var0.getColorModel();
    var0.enableInputMethods(true);
    boolean var12 = var0.isPaintingForPrint();
    boolean var13 = var0.isValidateRoot();
    java.awt.FocusTraversalPolicy var14 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test279");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    java.awt.im.InputContext var6 = var0.getInputContext();
    boolean var7 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test280");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isFocusTraversalPolicyProvider();
    java.awt.Insets var21 = var0.insets();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var28 = var22.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var29 = var22.getComponentListeners();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.repaint(1L);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    var37.list();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    boolean var47 = var43.isDoubleBuffered();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    var43.show(false);
    java.awt.Rectangle var51 = var43.getVisibleRect();
    java.awt.Rectangle var52 = var37.getBounds(var51);
    var30.setBounds(var52);
    var22.paintImmediately(var52);
    java.awt.Point var55 = var22.getMousePosition();
    boolean var56 = var22.isFocusCycleRoot();
    java.awt.Rectangle var57 = var22.getVisibleRect();
    var0.repaint(var57);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    java.awt.Dimension var65 = var61.getPreferredSize();
    boolean var66 = var61.getVerifyInputWhenFocusTarget();
    java.awt.Component var69 = var61.findComponentAt(10, 1);
    var59.addKeyListener((java.awt.event.KeyListener)var61);
    boolean var71 = var61.getFocusTraversalKeysEnabled();
    var0.remove((java.awt.Component)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test281");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    int var4 = var0.getY();
    var0.increasePower(499);
    java.awt.image.BufferedImage var8 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var9 = var0.isRecovering();
    var0.setLeft(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test282");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    java.lang.String var18 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var18.equals("SpaceWar.SpacePanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test283");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    java.awt.GraphicsConfiguration var10 = var4.getGraphicsConfiguration();
    java.lang.String var11 = var4.getUIClassID();
    javax.swing.ActionMap var12 = var4.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test284");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    java.awt.Component var18 = var10.findComponentAt(10, 1);
    var8.addKeyListener((java.awt.event.KeyListener)var10);
    var10.repaint(100, (-1), (-1), 1);
    boolean var25 = var0.isAncestorOf((java.awt.Component)var10);
    var0.nextFocus();
    var0.disable();
    int var28 = var0.countComponents();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0d), 467.04063594113916d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test285");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    var8.setBackground(var19);
    java.awt.Point var22 = var8.location();
    var0.setLocation(var22);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var34.repaint();
    var34.setRequestFocusEnabled(false);
    var34.reshape(100, 0, 100, 0);
    java.awt.Component var44 = var24.add((java.awt.Component)var34);
    var24.enable();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    boolean var48 = var46.hasFocus();
    boolean var49 = var46.isPreferredSizeSet();
    var0.putClientProperty((java.lang.Object)var24, (java.lang.Object)var46);
    var0.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test286");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    var0.transferFocusUpCycle();
    java.awt.Image var30 = var0.createImage(1, 25);
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test287");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    boolean var23 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test288");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(true);
    var0.setFocusTraversalKeysEnabled(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    var15.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var20 = var15.getUI();
    boolean var21 = var15.isDisplayable();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.removeNotify();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    var25.list();
    float var31 = var25.getAlignmentY();
    java.awt.Insets var32 = var25.getInsets();
    java.awt.Insets var33 = var22.getInsets(var32);
    java.awt.Insets var34 = var15.getInsets(var33);
    java.awt.Graphics var35 = var15.getGraphics();
    java.awt.Component var36 = var0.add("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var15);
    java.awt.Dimension var37 = var0.size();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 594.7973940347722d, 475.3294093279198d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test289");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    int var10 = var0.getDebugGraphicsOptions();
    var0.enableInputMethods(true);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Container var15 = var0.getFocusCycleRootAncestor();
    java.awt.Component.BaselineResizeBehavior var16 = var0.getBaselineResizeBehavior();
    var0.revalidate();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var18.repaint();
    java.awt.im.InputMethodRequests var21 = var18.getInputMethodRequests();
    int var22 = var18.countComponents();
    java.awt.event.ComponentListener[] var23 = var18.getComponentListeners();
    var18.removeNotify();
    javax.swing.InputMap var25 = var18.getInputMap();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var32.setForeground(var37);
    var26.setBackground(var37);
    java.awt.Point var40 = var26.location();
    var18.setLocation(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    var42.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    java.awt.Color var53 = var52.getBackground();
    var52.repaint();
    var52.setRequestFocusEnabled(false);
    var52.reshape(100, 0, 100, 0);
    java.awt.Component var62 = var42.add((java.awt.Component)var52);
    var42.enable();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    boolean var66 = var64.hasFocus();
    boolean var67 = var64.isPreferredSizeSet();
    var18.putClientProperty((java.lang.Object)var42, (java.lang.Object)var64);
    javax.swing.ActionMap var69 = var18.getActionMap();
    var0.setActionMap(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test290");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setFocusCycleRoot(false);
    java.awt.event.ComponentListener[] var31 = var19.getComponentListeners();
    boolean var32 = var19.isFocusCycleRoot();
    var19.firePropertyChange("PanelUI", 83.657626403857d, 10.0d);
    java.awt.Cursor var37 = var19.getCursor();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var44 = var38.getUI();
    java.awt.im.InputMethodRequests var45 = var38.getInputMethodRequests();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.updateUI();
    var46.enableInputMethods(true);
    var46.setSize((-1), 1);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    var57.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var38.add((java.awt.Component)var46, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var63 = var46.getComponentOrientation();
    boolean var64 = var46.isMaximumSizeSet();
    java.beans.PropertyChangeListener[] var66 = var46.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.setVisible(false);
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    java.awt.Color var72 = var71.getBackground();
    var67.setForeground(var72);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    boolean var78 = var74.isDoubleBuffered();
    java.awt.dnd.DropTarget var79 = var74.getDropTarget();
    var74.show(false);
    java.awt.Rectangle var82 = var74.getVisibleRect();
    var67.repaint(var82);
    SpaceWar.SpacePanel var84 = new SpaceWar.SpacePanel();
    float var85 = var84.getAlignmentX();
    var84.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var90 = var84.getMouseListeners();
    java.awt.Dimension var91 = var84.getPreferredSize();
    java.util.Locale var92 = var84.getLocale();
    var67.setLocale(var92);
    java.util.Locale var94 = var67.getLocale();
    var46.setLocale(var94);
    var19.setLocale(var94);
    java.awt.im.InputContext var97 = var19.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test291");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    java.awt.Point var14 = var0.location();
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.HierarchyBoundsListener[] var17 = var0.getHierarchyBoundsListeners();
    var0.revalidate();
    var0.setDoubleBuffered(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test292");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Graphics var3 = var0.getGraphics();
    java.awt.event.MouseMotionListener[] var4 = var0.getMouseMotionListeners();
    boolean var5 = var0.getIgnoreRepaint();
    var0.transferFocusBackward();
    boolean var7 = var0.hasFocus();
    java.awt.Component var10 = var0.findComponentAt(0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test293");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    boolean var77 = var0.isValid();
    var0.setOpaque(true);
    java.awt.GraphicsConfiguration var80 = var0.getGraphicsConfiguration();
    var0.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test294");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    var0.removeNotify();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var28 = var22.getUI();
    java.awt.im.InputMethodRequests var29 = var22.getInputMethodRequests();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.updateUI();
    var30.enableInputMethods(true);
    var30.setSize((-1), 1);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    var41.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var22.add((java.awt.Component)var30, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var47 = var22.getKeyListeners();
    var22.repaint(3, 1, 25, 0);
    java.awt.Color var53 = var22.getForeground();
    var0.setForeground(var53);
    java.awt.image.VolatileImage var57 = var0.createVolatileImage(3, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test295");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(500, 594.7973940347722d, 475.3294093279198d);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test296");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setFocusCycleRoot(false);
    var19.setInheritsPopupMenu(false);
    java.awt.Image var35 = var19.createImage((-1), 100);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var36.repaint();
    java.awt.im.InputMethodRequests var39 = var36.getInputMethodRequests();
    int var40 = var36.countComponents();
    java.awt.event.ComponentListener[] var41 = var36.getComponentListeners();
    var36.transferFocusBackward();
    java.awt.LayoutManager var43 = var36.getLayout();
    var19.setLayout(var43);
    boolean var45 = var19.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test297");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    boolean var23 = var0.isValid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var25 = var0.areFocusTraversalKeysSet(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test298");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    var0.resetKeyboardActions();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var25 = var19.getMouseListeners();
    int var26 = var19.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var19.paintImmediately(var35);
    var0.setBounds(var35);
    boolean var38 = var0.getVerifyInputWhenFocusTarget();
    var0.setFocusTraversalKeysEnabled(false);
    int var41 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test299");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    boolean var7 = var3.isDoubleBuffered();
    java.awt.dnd.DropTarget var8 = var3.getDropTarget();
    boolean var9 = var3.isFocusCycleRoot();
    var3.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var20 = var14.getUI();
    var3.add((java.awt.Component)var14, (java.lang.Object)(short)0);
    java.awt.Insets var23 = var14.getInsets();
    java.awt.Insets var24 = var0.getInsets(var23);
    var0.firePropertyChange("PanelUI", 296.18869876326414d, 203.2601655108183d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test300");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    float var6 = var0.getAlignmentY();
    var0.repaint((-1L));
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var15 = var9.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var16 = var9.getComponentListeners();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.repaint(1L);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    var24.list();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    java.awt.dnd.DropTarget var35 = var30.getDropTarget();
    var30.show(false);
    java.awt.Rectangle var38 = var30.getVisibleRect();
    java.awt.Rectangle var39 = var24.getBounds(var38);
    var17.setBounds(var39);
    var9.paintImmediately(var39);
    var0.scrollRectToVisible(var39);
    var0.setSize(10, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test301");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Rectangle var4 = var0.bounds();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    boolean var6 = var0.isMaximumSizeSet();
    java.awt.LayoutManager var7 = var0.getLayout();
    boolean var8 = var0.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test302");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    int var8 = var0.getY();
    boolean var9 = var0.isDisplayable();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.setInheritsPopupMenu(false);
    var10.move(10, 10);
    var10.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Rectangle var23 = var10.bounds();
    java.awt.image.ColorModel var24 = var10.getColorModel();
    var0.setComponentZOrder((java.awt.Component)var10, 0);
    java.awt.GraphicsConfiguration var27 = var10.getGraphicsConfiguration();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.setDoubleBuffered(true);
    java.awt.Point var34 = var28.getLocation();
    java.awt.Point var35 = var10.getLocation(var34);
    var10.firePropertyChange("SpaceWar.SpacePanel[,10,10,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", ' ', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test303");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    var0.reshape(10, 100, 3, 3);
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    java.awt.Rectangle var32 = var0.getVisibleRect();
    int var33 = var0.getComponentCount();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    java.awt.Rectangle var42 = var34.getVisibleRect();
    java.awt.image.BufferedImage var44 = var34.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var0.setComponentOrientation(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test304");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    int var7 = var0.getPower();
    int var8 = var0.getX();
    int var9 = var0.getPower();
    int var10 = var0.getY();
    int var11 = var0.getY();
    int var12 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 24);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test305");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    java.awt.Component var23 = var0.findComponentAt((-1), 500);
    java.awt.Toolkit var24 = var0.getToolkit();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var31 = var25.getUI();
    java.awt.im.InputMethodRequests var32 = var25.getInputMethodRequests();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.updateUI();
    var33.enableInputMethods(true);
    var33.setSize((-1), 1);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    var44.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var25.add((java.awt.Component)var33, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var50 = var33.getComponentOrientation();
    java.beans.VetoableChangeListener[] var51 = var33.getVetoableChangeListeners();
    int var52 = var33.countComponents();
    boolean var53 = var33.isFocusOwner();
    var33.enable(false);
    var33.nextFocus();
    java.awt.Component var57 = var0.add((java.awt.Component)var33);
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 500, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test306");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(true);
    var0.transferFocusDownCycle();
    var0.transferFocusUpCycle();
    javax.swing.border.Border var14 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test307");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    int var4 = var0.getY();
    int var5 = var0.getPowerLevel();
    int var6 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test308");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var14.add((java.awt.Component)var15, (java.lang.Object)true);
    boolean var26 = var14.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var27 = var14.getHierarchyListeners();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    boolean var39 = var35.isDoubleBuffered();
    java.awt.dnd.DropTarget var40 = var35.getDropTarget();
    var35.show(false);
    java.awt.Rectangle var43 = var35.getVisibleRect();
    var28.repaint(var43);
    java.awt.FocusTraversalPolicy var45 = var28.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var46 = var28.getInputMethodRequests();
    var28.layout();
    boolean var48 = var28.isFocusTraversalPolicyProvider();
    java.lang.Object var49 = var14.getClientProperty((java.lang.Object)var48);
    boolean var50 = var14.isFocusTraversable();
    var1.remove((java.awt.Component)var14);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    var52.updateUI();
    var52.enableInputMethods(true);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    boolean var62 = var60.hasFocus();
    java.awt.Insets var63 = var60.getInsets();
    java.awt.Insets var64 = var52.getInsets(var63);
    boolean var65 = var52.isManagingFocus();
    java.awt.Image var68 = var52.createImage(1, 10);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    java.awt.Dimension var79 = var75.getPreferredSize();
    var69.setMaximumSize(var79);
    boolean var81 = var69.getVerifyInputWhenFocusTarget();
    int var82 = var69.getX();
    SpaceWar.SpacePanel var83 = new SpaceWar.SpacePanel();
    float var84 = var83.getAlignmentX();
    var83.setVisible(false);
    var83.setEnabled(false);
    var52.add((java.awt.Component)var69, (java.lang.Object)false);
    int var90 = var14.getComponentZOrder((java.awt.Component)var69);
    var14.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test309");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    boolean var15 = var0.isPaintingForPrint();
    int var16 = var0.getDebugGraphicsOptions();
    java.awt.event.ComponentListener[] var17 = var0.getComponentListeners();
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test310");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    java.awt.im.InputMethodRequests var35 = var32.getInputMethodRequests();
    int var36 = var32.countComponents();
    java.awt.event.ComponentListener[] var37 = var32.getComponentListeners();
    var32.removeNotify();
    javax.swing.InputMap var39 = var32.getInputMap();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    java.awt.Color var51 = var50.getBackground();
    var46.setForeground(var51);
    var40.setBackground(var51);
    java.awt.Point var54 = var40.location();
    var32.setLocation(var54);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    java.awt.Color var67 = var66.getBackground();
    var66.repaint();
    var66.setRequestFocusEnabled(false);
    var66.reshape(100, 0, 100, 0);
    java.awt.Component var76 = var56.add((java.awt.Component)var66);
    var56.enable();
    SpaceWar.SpacePanel var78 = new SpaceWar.SpacePanel();
    float var79 = var78.getAlignmentX();
    boolean var80 = var78.hasFocus();
    boolean var81 = var78.isPreferredSizeSet();
    var32.putClientProperty((java.lang.Object)var56, (java.lang.Object)var78);
    java.awt.Component var83 = var19.add("PanelUI", (java.awt.Component)var78);
    var19.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test311");


    SpaceWar.Text var4 = new SpaceWar.Text(383.0566534864913d, 365.5281187817767d, 1L, "");
    boolean var5 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test312");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    javax.swing.plaf.PanelUI var15 = var0.getUI();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1.0f, 0.5f);
    int var20 = var0.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test313");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    java.awt.Insets var35 = var0.insets();
    boolean var36 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    boolean var39 = var37.hasFocus();
    boolean var40 = var37.isPreferredSizeSet();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    var41.setRequestFocusEnabled(false);
    int var46 = var37.getComponentZOrder((java.awt.Component)var41);
    boolean var47 = var37.requestDefaultFocus();
    var37.resetKeyboardActions();
    boolean var49 = var0.isFocusCycleRoot((java.awt.Container)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test314");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    java.awt.Container var42 = var0.getParent();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.reshape((-1), 1, (-1), 10);
    java.util.Set var54 = var43.getFocusTraversalKeys(3);
    java.awt.Point var55 = var43.getLocation();
    boolean var56 = var0.contains(var55);
    boolean var57 = var0.isForegroundSet();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    var58.repaint();
    java.awt.im.InputMethodRequests var61 = var58.getInputMethodRequests();
    java.awt.GraphicsConfiguration var62 = var58.getGraphicsConfiguration();
    boolean var64 = var58.requestFocus(false);
    javax.swing.JPopupMenu var65 = var58.getComponentPopupMenu();
    java.awt.Point var66 = var58.location();
    var0.setLocation(var66);
    boolean var68 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test315");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    boolean var9 = var0.requestFocus(false);
    var0.setDebugGraphicsOptions(25);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.enable(false);
    boolean var19 = var12.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    java.awt.Dimension var24 = var20.getPreferredSize();
    java.awt.Toolkit var25 = var20.getToolkit();
    boolean var26 = var20.isFocusable();
    javax.swing.KeyStroke[] var27 = var20.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    boolean var35 = var30.getVerifyInputWhenFocusTarget();
    java.awt.Component var38 = var30.findComponentAt(10, 1);
    var28.addKeyListener((java.awt.event.KeyListener)var30);
    var30.repaint(100, (-1), (-1), 1);
    boolean var45 = var20.isAncestorOf((java.awt.Component)var30);
    var12.addKeyListener((java.awt.event.KeyListener)var30);
    var30.hide();
    java.awt.Point var48 = var30.getLocation();
    boolean var49 = var0.isAncestorOf((java.awt.Component)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test316");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.setInheritsPopupMenu(false);
    boolean var31 = var25.isDoubleBuffered();
    boolean var32 = var25.isMinimumSizeSet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    boolean var45 = var33.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var46 = var33.getAccessibleContext();
    boolean var47 = var33.isDoubleBuffered();
    java.awt.Rectangle var48 = var33.getVisibleRect();
    var25.setBounds(var48);
    java.awt.Rectangle var50 = var0.getBounds(var48);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    var51.list();
    float var57 = var51.getAlignmentY();
    java.awt.Insets var58 = var51.getInsets();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    java.awt.Dimension var69 = var65.getPreferredSize();
    var59.setMaximumSize(var69);
    java.awt.Dimension var71 = var51.getSize(var69);
    var0.setPreferredSize(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test317");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Graphics var3 = var0.getGraphics();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    var4.setMaximumSize(var14);
    boolean var16 = var4.getVerifyInputWhenFocusTarget();
    int var17 = var4.getX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    java.awt.Dimension var24 = var20.getPreferredSize();
    boolean var25 = var20.getVerifyInputWhenFocusTarget();
    java.awt.Component var28 = var20.findComponentAt(10, 1);
    var18.addKeyListener((java.awt.event.KeyListener)var20);
    var20.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    java.awt.Color var36 = var35.getBackground();
    var35.repaint();
    java.awt.im.InputMethodRequests var38 = var35.getInputMethodRequests();
    java.awt.GraphicsConfiguration var39 = var35.getGraphicsConfiguration();
    var20.remove((java.awt.Component)var35);
    java.awt.Font var41 = var35.getFont();
    var4.setFont(var41);
    var0.setFont(var41);
    boolean var44 = var0.isLightweight();
    boolean var45 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test318");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    java.awt.Point var14 = var0.location();
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.HierarchyBoundsListener[] var17 = var0.getHierarchyBoundsListeners();
    var0.revalidate();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    java.awt.im.InputMethodRequests var22 = var19.getInputMethodRequests();
    int var23 = var19.countComponents();
    java.awt.event.ComponentListener[] var24 = var19.getComponentListeners();
    var19.removeNotify();
    javax.swing.InputMap var26 = var19.getInputMap();
    int var27 = var19.getDebugGraphicsOptions();
    java.awt.Graphics var28 = var19.getGraphics();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)(-1), (short)100);
    boolean var33 = var19.isEnabled();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    var34.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var39 = var34.getUI();
    boolean var40 = var34.isDisplayable();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.removeNotify();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    boolean var48 = var44.isDoubleBuffered();
    var44.list();
    float var50 = var44.getAlignmentY();
    java.awt.Insets var51 = var44.getInsets();
    java.awt.Insets var52 = var41.getInsets(var51);
    java.awt.Insets var53 = var34.getInsets(var52);
    java.awt.Insets var54 = var19.getInsets(var53);
    java.awt.Insets var55 = var0.getInsets(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test319");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    boolean var50 = var14.isFocusTraversable();
    var14.revalidate();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.setInheritsPopupMenu(false);
    boolean var58 = var52.isDoubleBuffered();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.nextFocus();
    var59.reshape((-1), 1, (-1), 10);
    var59.disable();
    java.awt.LayoutManager var70 = var59.getLayout();
    var52.setLayout(var70);
    java.awt.event.MouseMotionListener[] var72 = var52.getMouseMotionListeners();
    javax.swing.event.AncestorListener[] var73 = var52.getAncestorListeners();
    boolean var74 = var14.isFocusCycleRoot((java.awt.Container)var52);
    javax.swing.TransferHandler var75 = var14.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test320");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    java.awt.event.MouseMotionListener[] var10 = var0.getMouseMotionListeners();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var26 = var20.getMouseListeners();
    int var27 = var20.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var28 = var20.getInputMethodRequests();
    var11.addKeyListener((java.awt.event.KeyListener)var20);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    boolean var37 = var20.isFocusCycleRoot((java.awt.Container)var30);
    javax.swing.JPopupMenu var38 = var30.getComponentPopupMenu();
    var30.move((-1), 100);
    var30.validate();
    java.awt.Rectangle var43 = var30.getVisibleRect();
    var0.paintImmediately(var43);
    boolean var45 = var0.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test321");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    var0.setDown(true);
    var0.loseLife();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test322");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    var0.show();
    var0.setFocusTraversalKeysEnabled(true);
    var0.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test323");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    var0.setRigth(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test324");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    java.awt.LayoutManager var32 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test325");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.transferFocusBackward();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.enable(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    boolean var17 = var15.hasFocus();
    java.awt.Insets var18 = var15.getInsets();
    java.awt.Rectangle var19 = var15.bounds();
    var8.repaint(var19);
    java.awt.Component var21 = var0.add("", (java.awt.Component)var8);
    boolean var22 = var8.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test326");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    java.awt.Point var14 = var0.location();
    java.awt.Image var17 = var0.createImage((-1), 10);
    var0.setInheritsPopupMenu(true);
    javax.swing.border.Border var20 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test327");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(24, 24);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test328");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.setInheritsPopupMenu(false);
    boolean var31 = var25.isDoubleBuffered();
    boolean var32 = var25.isMinimumSizeSet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    boolean var45 = var33.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var46 = var33.getAccessibleContext();
    boolean var47 = var33.isDoubleBuffered();
    java.awt.Rectangle var48 = var33.getVisibleRect();
    var25.setBounds(var48);
    java.awt.Rectangle var50 = var0.getBounds(var48);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    java.awt.dnd.DropTarget var56 = var51.getDropTarget();
    var51.show(false);
    boolean var59 = var51.isPaintingForPrint();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var66 = var60.getMouseListeners();
    int var67 = var60.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var68 = var60.getInputMethodRequests();
    var51.addKeyListener((java.awt.event.KeyListener)var60);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    boolean var74 = var70.isDoubleBuffered();
    var70.list();
    float var76 = var70.getAlignmentY();
    boolean var77 = var60.isFocusCycleRoot((java.awt.Container)var70);
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    float var80 = var79.getAlignmentX();
    var79.setVisible(false);
    var79.nextFocus();
    var79.updateUI();
    java.awt.Component var85 = var60.add("", (java.awt.Component)var79);
    java.awt.ComponentOrientation var86 = var79.getComponentOrientation();
    var0.applyComponentOrientation(var86);
    javax.swing.JRootPane var88 = var0.getRootPane();
    javax.swing.JToolTip var89 = var0.createToolTip();
    var89.setName("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.MouseListener[] var92 = var89.getMouseListeners();
    boolean var93 = var89.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test329");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    int var3 = var2.getR();
    int var4 = var2.getR();
    int var5 = var2.getR();
    var2.explode();
    var2.update();
    int var8 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test330");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    int var8 = var0.getPowerLevel();
    var0.setDown(false);
    var0.setLeft(false);
    int var13 = var0.getPower();
    int var14 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test331");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    java.lang.String var5 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "PanelUI"+ "'", var5.equals("PanelUI"));

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test332");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    var0.list();
    boolean var10 = var0.requestFocusInWindow();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    var11.repaint();
    java.awt.im.InputMethodRequests var14 = var11.getInputMethodRequests();
    int var15 = var11.countComponents();
    java.awt.event.ComponentListener[] var16 = var11.getComponentListeners();
    var11.transferFocusBackward();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.enable(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    boolean var28 = var26.hasFocus();
    java.awt.Insets var29 = var26.getInsets();
    java.awt.Rectangle var30 = var26.bounds();
    var19.repaint(var30);
    java.awt.Component var32 = var11.add("", (java.awt.Component)var19);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.reshape((-1), 1, (-1), 10);
    java.util.Set var44 = var33.getFocusTraversalKeys(3);
    java.awt.Point var45 = var33.getLocation();
    var32.setLocation(var45);
    boolean var47 = var0.contains(var45);
    java.awt.Dimension var48 = var0.getMinimumSize();
    boolean var49 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test333");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    var0.repaint(0L);
    boolean var16 = var0.isValidateRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var18 = var0.getInputMap(3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test334");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(83.657626403857d, 499, (-1));

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test335");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    var0.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test336");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    var0.doLayout();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    var21.setMaximumSize(var31);
    boolean var33 = var21.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var34 = var21.getToolkit();
    java.awt.Dimension var35 = var21.minimumSize();
    java.awt.Image var38 = var21.createImage((-1), 400);
    java.awt.event.MouseMotionListener[] var39 = var21.getMouseMotionListeners();
    java.awt.Component var40 = var0.add((java.awt.Component)var21);
    var40.repaint(399, 100, 399, 399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test337");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(241.4584513263457d, 499, 10);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test338");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    var9.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    var19.setRequestFocusEnabled(false);
    var19.reshape(100, 0, 100, 0);
    java.awt.Component var29 = var9.add((java.awt.Component)var19);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    var30.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var35 = var30.getUI();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    var36.repaint(1L);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    var43.setMaximumSize(var53);
    var36.setPreferredSize(var53);
    var30.setMaximumSize(var53);
    java.awt.Dimension var57 = var19.getSize(var53);
    var0.setMaximumSize(var53);
    boolean var59 = var0.getIgnoreRepaint();
    boolean var60 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test339");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.setDown(false);
    var0.loseLife();
    var0.setLeft(true);
    var0.loseLife();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test340");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    boolean var23 = var17.isOptimizedDrawingEnabled();
    var17.setBounds(3, 1, 0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test341");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    var31.setRequestFocusEnabled(false);
    var31.reshape(100, 0, 100, 0);
    java.awt.Component var41 = var21.add((java.awt.Component)var31);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    var42.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var47 = var42.getUI();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    var48.nextFocus();
    var48.repaint(1L);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    java.awt.Dimension var65 = var61.getPreferredSize();
    var55.setMaximumSize(var65);
    var48.setPreferredSize(var65);
    var42.setMaximumSize(var65);
    java.awt.Dimension var69 = var31.getSize(var65);
    java.awt.Dimension var70 = var20.getSize(var69);
    java.awt.Dimension var71 = var11.getSize(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test342");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.move((-1), 100);
    var19.validate();
    boolean var32 = var19.isPaintingForPrint();
    var19.repaint();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    java.awt.Rectangle var48 = var40.getVisibleRect();
    java.awt.Rectangle var49 = var34.getBounds(var48);
    javax.swing.JToolTip var50 = var34.createToolTip();
    java.awt.Dimension var51 = var34.minimumSize();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.setInheritsPopupMenu(false);
    var52.setFocusTraversalPolicyProvider(true);
    java.awt.Container var60 = var52.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.removeNotify();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    var64.list();
    float var70 = var64.getAlignmentY();
    java.awt.Insets var71 = var64.getInsets();
    java.awt.Insets var72 = var61.getInsets(var71);
    java.awt.Insets var73 = var52.getInsets(var72);
    java.awt.Insets var74 = var34.getInsets(var72);
    java.awt.Insets var75 = var19.getInsets(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test343");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.inside(25, 1);
    boolean var13 = var0.isFocusTraversalPolicySet();
    java.awt.Dimension var14 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test344");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    var8.enable(true);
    int var30 = var8.getY();
    var8.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test345");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    java.awt.Dimension var26 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test346");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var18.setForeground(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    java.awt.dnd.DropTarget var30 = var25.getDropTarget();
    var25.show(false);
    java.awt.Rectangle var33 = var25.getVisibleRect();
    var18.repaint(var33);
    java.awt.FocusTraversalPolicy var35 = var18.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var36 = var18.getInputMethodRequests();
    var18.layout();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    java.awt.Color var49 = var48.getBackground();
    var44.setForeground(var49);
    var38.setBackground(var49);
    var18.setForeground(var49);
    int var53 = var18.getWidth();
    javax.swing.plaf.PanelUI var54 = var18.getUI();
    var10.setUI(var54);
    var0.setUI(var54);
    java.awt.event.MouseListener[] var57 = var0.getMouseListeners();
    var0.enableInputMethods(false);
    var0.transferFocusDownCycle();
    var0.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test347");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.show();
    var0.setBounds(24, 25, 100, 25);
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test348");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    java.awt.Cursor var33 = var19.getCursor();
    var19.resetKeyboardActions();
    var19.grabFocus();
    boolean var36 = var19.isForegroundSet();
    var19.repaint(10L, 505, 3, 24, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test349");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    var12.setName("");
    var12.enable(true);
    var12.enable();
    java.awt.Point var18 = var12.location();
    var12.repaint(0, 3, (-1), 1);
    var12.setBounds(25, 100, 1, 0);
    var0.addKeyListener((java.awt.event.KeyListener)var12);
    java.awt.Dimension var30 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test350");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    java.awt.event.MouseListener[] var20 = var0.getMouseListeners();
    java.lang.String var21 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test351");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    java.awt.event.MouseWheelListener[] var20 = var3.getMouseWheelListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    java.awt.Color var22 = var21.getBackground();
    var21.repaint();
    var21.setRequestFocusEnabled(false);
    var21.reshape(100, 0, 100, 0);
    var21.requestFocus();
    java.awt.Rectangle var32 = var21.getVisibleRect();
    java.awt.Rectangle var33 = var21.getBounds();
    java.awt.im.InputMethodRequests var34 = var21.getInputMethodRequests();
    boolean var35 = var21.requestFocusInWindow();
    java.awt.Point var37 = var21.getMousePosition(false);
    var21.setDebugGraphicsOptions(1);
    java.awt.Graphics var40 = var21.getGraphics();
    var3.printAll(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    var42.updateUI();
    var42.enableInputMethods(true);
    int var50 = var42.getY();
    boolean var51 = var42.isDisplayable();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.setInheritsPopupMenu(false);
    var52.move(10, 10);
    var52.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Rectangle var65 = var52.bounds();
    java.awt.image.ColorModel var66 = var52.getColorModel();
    var42.setComponentZOrder((java.awt.Component)var52, 0);
    javax.swing.plaf.PanelUI var69 = var52.getUI();
    var3.setUI(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test352");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.beans.PropertyChangeListener[] var15 = var1.getPropertyChangeListeners();
    java.awt.FocusTraversalPolicy var16 = var1.getFocusTraversalPolicy();
    var1.show(false);
    java.awt.Component[] var19 = var1.getComponents();
    var1.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test353");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    java.awt.Image var8 = var0.createImage(10, 100);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var0.setForeground(var10);
    java.awt.event.HierarchyBoundsListener[] var12 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test354");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    int var5 = var3.getType();
    double var6 = var3.getX();
    int var7 = var3.getType();
    double var8 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test355");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setFiring(false);
    var0.setFiring(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test356");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    boolean var7 = var0.isMinimumSizeSet();
    java.awt.Font var8 = var0.getFont();
    java.awt.event.MouseListener[] var9 = var0.getMouseListeners();
    boolean var10 = var0.getAutoscrolls();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var11 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test357");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    java.awt.Container var19 = var9.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.reshape((-1), 1, (-1), 10);
    var20.disable();
    java.awt.LayoutManager var31 = var20.getLayout();
    java.awt.Container var32 = var20.getParent();
    java.beans.PropertyChangeListener[] var34 = var20.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var9.setNextFocusableComponent((java.awt.Component)var20);
    var9.resetKeyboardActions();
    boolean var37 = var9.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test358");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    java.awt.event.MouseMotionListener[] var10 = var0.getMouseMotionListeners();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var26 = var20.getMouseListeners();
    int var27 = var20.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var28 = var20.getInputMethodRequests();
    var11.addKeyListener((java.awt.event.KeyListener)var20);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    boolean var37 = var20.isFocusCycleRoot((java.awt.Container)var30);
    javax.swing.JPopupMenu var38 = var30.getComponentPopupMenu();
    var30.move((-1), 100);
    var30.validate();
    java.awt.Rectangle var43 = var30.getVisibleRect();
    var0.paintImmediately(var43);
    boolean var45 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test359");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    int var4 = var0.getRequiredPower();
    var0.setScore(400);
    int var7 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test360");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.removeAll();
    java.awt.Component.BaselineResizeBehavior var7 = var0.getBaselineResizeBehavior();
    boolean var8 = var0.isVisible();
    java.awt.event.InputMethodListener[] var9 = var0.getInputMethodListeners();
    boolean var10 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test361");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.Graphics var5 = var0.getGraphics();
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.Point var8 = var0.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test362");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    java.awt.event.HierarchyListener[] var5 = var0.getHierarchyListeners();
    java.awt.Font var6 = var0.getFont();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    var7.setInheritsPopupMenu(false);
    var7.move(10, 10);
    var7.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var7.removeAll();
    javax.accessibility.AccessibleContext var21 = var7.getAccessibleContext();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.nextFocus();
    var22.requestFocus();
    boolean var28 = var22.isBackgroundSet();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var29.repaint();
    var29.setRequestFocusEnabled(false);
    var29.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.setInheritsPopupMenu(false);
    boolean var45 = var39.isDoubleBuffered();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.reshape((-1), 1, (-1), 10);
    var46.disable();
    java.awt.LayoutManager var57 = var46.getLayout();
    var39.setLayout(var57);
    var22.add((java.awt.Component)var29, (java.lang.Object)var57);
    var7.setLayout(var57);
    java.awt.Rectangle var61 = var7.bounds();
    var0.scrollRectToVisible(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test363");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var16 = var0.isRequestFocusEnabled();
    var0.setVerifyInputWhenFocusTarget(false);
    boolean var19 = var0.isLightweight();
    boolean var20 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test364");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    var0.transferFocusUpCycle();
    java.awt.Point var14 = var0.location();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    java.awt.im.InputMethodRequests var18 = var15.getInputMethodRequests();
    var15.setDoubleBuffered(true);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    boolean var23 = var21.hasFocus();
    java.awt.Insets var24 = var21.getInsets();
    java.awt.Insets var25 = var15.getInsets(var24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    var26.add((java.awt.Component)var27, (java.lang.Object)true);
    java.awt.Image var40 = var27.createImage(1, (-1));
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.updateUI();
    var41.enableInputMethods(true);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    boolean var51 = var49.hasFocus();
    java.awt.Insets var52 = var49.getInsets();
    java.awt.Insets var53 = var41.getInsets(var52);
    java.awt.Insets var54 = var27.getInsets(var52);
    java.awt.Insets var55 = var15.getInsets(var52);
    java.awt.Component var56 = var0.add((java.awt.Component)var15);
    java.lang.String var57 = var15.toString();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    var58.repaint();
    java.awt.im.InputMethodRequests var61 = var58.getInputMethodRequests();
    var58.setDoubleBuffered(true);
    var58.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var66 = var58.getUI();
    java.util.Set var68 = var58.getFocusTraversalKeys(3);
    var58.enable();
    var58.resize(500, 25);
    java.awt.FocusTraversalPolicy var73 = var58.getFocusTraversalPolicy();
    java.awt.Dimension var74 = var58.minimumSize();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var81 = var75.getMouseListeners();
    java.awt.Dimension var82 = var75.getPreferredSize();
    var58.setSize(var82);
    var15.setPreferredSize(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var57,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var57.equals("SpaceWar.SpacePanel[,0,0,0var57,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test365");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.isCursorSet();
    boolean var10 = var0.isFocusTraversalPolicyProvider();
    java.awt.ComponentOrientation var11 = var0.getComponentOrientation();
    java.lang.Object var12 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test366");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    java.awt.Point var21 = var0.getMousePosition();
    java.awt.Dimension var22 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test367");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    float var18 = var0.getAlignmentY();
    boolean var19 = var0.getInheritsPopupMenu();
    boolean var20 = var0.isMaximumSizeSet();
    int var21 = var0.countComponents();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    boolean var24 = var22.hasFocus();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.reshape((-1), 1, (-1), 10);
    var25.disable();
    java.awt.LayoutManager var36 = var25.getLayout();
    var25.setVisible(false);
    var22.remove((java.awt.Component)var25);
    var25.repaint();
    boolean var41 = var25.hasFocus();
    javax.swing.plaf.PanelUI var42 = var25.getUI();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.updateUI();
    var46.enableInputMethods(true);
    var43.add((java.awt.Component)var44, (java.lang.Object)true);
    java.awt.Image var57 = var44.createImage(1, (-1));
    java.awt.event.MouseListener[] var58 = var44.getMouseListeners();
    java.awt.Color var59 = var44.getBackground();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var25, (java.lang.Object)var44, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test368");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    boolean var16 = var0.isFocusOwner();
    java.awt.event.KeyListener[] var17 = var0.getKeyListeners();
    var0.setLocation(25, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test369");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    java.awt.image.ColorModel var24 = var9.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test370");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Dimension var12 = var2.getMinimumSize();
    java.lang.String var13 = var2.getToolTipText();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 10.0d, 100.0d);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    boolean var25 = var19.isFocusCycleRoot();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var30.repaint();
    var30.setRequestFocusEnabled(false);
    var30.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var40 = var30.getAncestorListeners();
    var30.grabFocus();
    boolean var42 = var19.isFocusCycleRoot((java.awt.Container)var30);
    javax.swing.ActionMap var43 = var30.getActionMap();
    var14.setActionMap(var43);
    var2.setActionMap(var43);
    int var46 = var2.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    var47.repaint();
    var47.setRequestFocusEnabled(false);
    var47.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var57 = var47.getAncestorListeners();
    var47.resize(10, 0);
    java.awt.Dimension var61 = var47.preferredSize();
    var2.setSize(var61);
    var2.repaint(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test371");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var18.repaint();
    var18.setRequestFocusEnabled(false);
    var18.reshape(100, 0, 100, 0);
    java.awt.Component var28 = var8.add((java.awt.Component)var18);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    var29.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var34 = var29.getUI();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    var35.nextFocus();
    var35.repaint(1L);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    java.awt.Dimension var52 = var48.getPreferredSize();
    var42.setMaximumSize(var52);
    var35.setPreferredSize(var52);
    var29.setMaximumSize(var52);
    java.awt.Dimension var56 = var18.getSize(var52);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    java.awt.dnd.DropTarget var62 = var57.getDropTarget();
    var57.show(false);
    boolean var65 = var57.isPaintingForPrint();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var72 = var66.getMouseListeners();
    int var73 = var66.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var74 = var66.getInputMethodRequests();
    var57.addKeyListener((java.awt.event.KeyListener)var66);
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    float var77 = var76.getAlignmentX();
    var76.setVisible(false);
    boolean var80 = var76.isDoubleBuffered();
    var76.list();
    float var82 = var76.getAlignmentY();
    boolean var83 = var66.isFocusCycleRoot((java.awt.Container)var76);
    var18.setNextFocusableComponent((java.awt.Component)var76);
    var76.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 0.5f);
    var76.show(false);
    var0.addKeyListener((java.awt.event.KeyListener)var76);
    int var94 = var0.getBaseline(2, 1);
    java.awt.Dimension var95 = var0.preferredSize();
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test372");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    var9.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    var19.setRequestFocusEnabled(false);
    var19.reshape(100, 0, 100, 0);
    java.awt.Component var29 = var9.add((java.awt.Component)var19);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    var30.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var35 = var30.getUI();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    var36.repaint(1L);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    var43.setMaximumSize(var53);
    var36.setPreferredSize(var53);
    var30.setMaximumSize(var53);
    java.awt.Dimension var57 = var19.getSize(var53);
    var0.setMaximumSize(var53);
    boolean var59 = var0.isFocusTraversalPolicyProvider();
    var0.setLocation(1, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test373");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    var16.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    var16.remove((java.awt.Component)var31);
    java.awt.Font var37 = var31.getFont();
    var0.setFont(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.reshape((-1), 1, (-1), 10);
    var39.disable();
    java.awt.LayoutManager var50 = var39.getLayout();
    var0.setLayout(var50);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    java.awt.Component var65 = var52.getNextFocusableComponent();
    float var66 = var52.getAlignmentY();
    java.awt.event.MouseListener[] var67 = var52.getMouseListeners();
    java.awt.Point var68 = var52.location();
    boolean var69 = var0.contains(var68);
    java.awt.event.FocusListener[] var70 = var0.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test374");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    boolean var8 = var0.isFocusCycleRoot();
    java.awt.dnd.DropTarget var9 = var0.getDropTarget();
    java.awt.Image var12 = var0.createImage(24, 499);
    boolean var13 = var0.isRequestFocusEnabled();
    boolean var14 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test375");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var24 = var18.getMouseListeners();
    int var25 = var18.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var18.paintImmediately(var34);
    java.awt.Rectangle var36 = var18.getBounds();
    var0.scrollRectToVisible(var36);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    java.awt.Color var39 = var38.getBackground();
    var38.repaint();
    var38.setRequestFocusEnabled(false);
    var38.setIgnoreRepaint(false);
    boolean var45 = var38.requestFocusInWindow();
    float var46 = var38.getAlignmentY();
    java.awt.LayoutManager var47 = var38.getLayout();
    var0.setLayout(var47);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    java.awt.Toolkit var54 = var49.getToolkit();
    boolean var55 = var49.isFocusable();
    javax.swing.KeyStroke[] var56 = var49.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    java.awt.Dimension var63 = var59.getPreferredSize();
    boolean var64 = var59.getVerifyInputWhenFocusTarget();
    java.awt.Component var67 = var59.findComponentAt(10, 1);
    var57.addKeyListener((java.awt.event.KeyListener)var59);
    var59.repaint(100, (-1), (-1), 1);
    boolean var74 = var49.isAncestorOf((java.awt.Component)var59);
    var49.nextFocus();
    var49.disable();
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    float var78 = var77.getAlignmentX();
    var77.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var83 = new SpaceWar.SpacePanel();
    float var84 = var83.getAlignmentX();
    var83.setVisible(false);
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    java.awt.Color var88 = var87.getBackground();
    var83.setForeground(var88);
    var77.setBackground(var88);
    var49.setBackground(var88);
    var0.setBackground(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test376");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    java.awt.Point var14 = var0.location();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.updateUI();
    var18.enableInputMethods(true);
    var15.add((java.awt.Component)var16, (java.lang.Object)true);
    java.awt.Dimension var27 = var16.getPreferredSize();
    var16.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    java.awt.Color var38 = var37.getBackground();
    var37.repaint();
    java.lang.Object var40 = var32.getClientProperty((java.lang.Object)var37);
    var16.remove((java.awt.Component)var32);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var48 = var42.getMouseMotionListeners();
    java.awt.Dimension var49 = var42.getMinimumSize();
    var16.setMaximumSize(var49);
    var0.setMinimumSize(var49);
    java.awt.Dimension var52 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test377");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    java.awt.Dimension var6 = var0.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test378");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.removeAll();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)(-1), (short)100);
    var0.setBounds(1, 24, 24, 10);
    var0.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test379");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.beans.PropertyChangeListener[] var15 = var1.getPropertyChangeListeners();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    var16.repaint();
    java.awt.im.InputMethodRequests var19 = var16.getInputMethodRequests();
    int var20 = var16.countComponents();
    java.awt.event.ComponentListener[] var21 = var16.getComponentListeners();
    var16.removeNotify();
    java.awt.Component var25 = var16.getComponentAt(1, (-1));
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var26.setForeground(var31);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    java.awt.dnd.DropTarget var38 = var33.getDropTarget();
    var33.show(false);
    java.awt.Rectangle var41 = var33.getVisibleRect();
    var26.repaint(var41);
    java.awt.Component.BaselineResizeBehavior var43 = var26.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    var44.repaint(1L);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    var51.list();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    java.awt.dnd.DropTarget var62 = var57.getDropTarget();
    var57.show(false);
    java.awt.Rectangle var65 = var57.getVisibleRect();
    java.awt.Rectangle var66 = var51.getBounds(var65);
    var44.setBounds(var66);
    var26.paintImmediately(var66);
    var16.repaint(var66);
    java.awt.Dimension var70 = var16.minimumSize();
    var1.setMinimumSize(var70);
    boolean var72 = var1.isLightweight();
    boolean var73 = var1.isFocusTraversalPolicySet();
    int var74 = var1.getComponentCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var75 = var1.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test380");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    java.awt.Image var52 = var36.createImage(0, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test381");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    java.awt.Point var14 = var0.location();
    float var15 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test382");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.setInheritsPopupMenu(false);
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Container var26 = var18.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.removeNotify();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    java.awt.Insets var37 = var30.getInsets();
    java.awt.Insets var38 = var27.getInsets(var37);
    java.awt.Insets var39 = var18.getInsets(var38);
    java.awt.Insets var40 = var0.getInsets(var38);
    var0.setSize(2, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test383");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    var0.invalidate();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    boolean var18 = var16.hasFocus();
    java.awt.Insets var19 = var16.getInsets();
    java.awt.Insets var20 = var8.getInsets(var19);
    boolean var21 = var8.isManagingFocus();
    java.awt.Image var24 = var8.createImage(1, 10);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    int var38 = var25.getX();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.setEnabled(false);
    var8.add((java.awt.Component)var25, (java.lang.Object)false);
    boolean var46 = var8.isForegroundSet();
    java.awt.Component var47 = var0.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var8);
    var8.requestFocus();
    var8.setFocusTraversalKeysEnabled(false);
    var8.setAlignmentY(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test384");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    javax.swing.JRootPane var13 = var0.getRootPane();
    int var14 = var0.getY();
    var0.setLocation(2, 2);
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test385");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    var7.hide();
    java.awt.Component var41 = var7.locate(2, 24);
    var7.setDebugGraphicsOptions(400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test386");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    var2.hit();
    double var4 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 261.2028294988706d);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test387");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    boolean var7 = var0.isFocusOwner();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    java.awt.Point var17 = var8.getMousePosition(false);
    java.awt.Component.BaselineResizeBehavior var18 = var8.getBaselineResizeBehavior();
    boolean var19 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    var20.list();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    java.awt.Rectangle var35 = var20.getBounds(var34);
    javax.swing.JToolTip var36 = var20.createToolTip();
    java.awt.Dimension var37 = var20.minimumSize();
    boolean var39 = var20.requestFocus(false);
    java.awt.Dimension var40 = var20.getMaximumSize();
    var0.putClientProperty((java.lang.Object)var8, (java.lang.Object)var20);
    javax.swing.InputVerifier var42 = var0.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test388");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var13 = var0.getAccessibleContext();
    boolean var14 = var0.isOpaque();
    java.awt.Container var15 = var0.getParent();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.updateUI();
    var16.enableInputMethods(true);
    java.awt.Point var25 = var16.getMousePosition(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    boolean var34 = var26.isPaintingForPrint();
    boolean var35 = var26.getIgnoreRepaint();
    var26.repaint(100, 10, 100, 0);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    boolean var45 = var41.isDoubleBuffered();
    var41.list();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    boolean var51 = var47.isDoubleBuffered();
    java.awt.dnd.DropTarget var52 = var47.getDropTarget();
    var47.show(false);
    java.awt.Rectangle var55 = var47.getVisibleRect();
    java.awt.Rectangle var56 = var41.getBounds(var55);
    javax.swing.JToolTip var57 = var41.createToolTip();
    var41.firePropertyChange("", false, false);
    var41.validate();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    boolean var67 = var63.isDoubleBuffered();
    java.awt.dnd.DropTarget var68 = var63.getDropTarget();
    var63.show(false);
    boolean var71 = var63.isPaintingForPrint();
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    float var73 = var72.getAlignmentX();
    var72.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var78 = var72.getMouseListeners();
    int var79 = var72.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var80 = var72.getInputMethodRequests();
    var63.addKeyListener((java.awt.event.KeyListener)var72);
    var72.repaint();
    java.awt.Point var83 = var72.location();
    java.awt.Component var84 = var41.getComponentAt(var83);
    var26.setLocation(var83);
    java.awt.Component var86 = var16.getComponentAt(var83);
    var0.setLocation(var83);
    int var88 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test389");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    var0.show();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    java.awt.Rectangle var27 = var12.getBounds(var26);
    javax.swing.JToolTip var28 = var12.createToolTip();
    var12.firePropertyChange("", false, false);
    var12.validate();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    boolean var42 = var34.isPaintingForPrint();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var49 = var43.getMouseListeners();
    int var50 = var43.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var51 = var43.getInputMethodRequests();
    var34.addKeyListener((java.awt.event.KeyListener)var43);
    var43.repaint();
    java.awt.Point var54 = var43.location();
    java.awt.Component var55 = var12.getComponentAt(var54);
    java.awt.Point var56 = var0.getLocation(var54);
    var0.setAlignmentY(0.5f);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    java.awt.Color var60 = var59.getBackground();
    var59.repaint();
    java.awt.im.InputMethodRequests var62 = var59.getInputMethodRequests();
    var59.setDoubleBuffered(true);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    boolean var67 = var65.hasFocus();
    java.awt.Insets var68 = var65.getInsets();
    java.awt.Insets var69 = var59.getInsets(var68);
    java.awt.Insets var70 = var0.getInsets(var68);
    boolean var71 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test390");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    javax.swing.InputVerifier var85 = var0.getInputVerifier();
    var0.enable();
    var0.repaint(400, 10, 0, 1);
    var0.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test391");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.enable(false);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)false);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var29 = var23.getMouseListeners();
    java.awt.Dimension var30 = var23.getPreferredSize();
    java.util.Locale var31 = var23.getLocale();
    var23.setFocusable(true);
    var23.setSize(3, 10);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    boolean var42 = var37.getVerifyInputWhenFocusTarget();
    java.awt.Dimension var43 = var37.size();
    var23.setSize(var43);
    var0.setPreferredSize(var43);
    var0.transferFocus();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    java.awt.Color var49 = var48.getBackground();
    boolean var52 = var48.inside(0, (-1));
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    java.awt.Color var58 = var57.getBackground();
    var53.setForeground(var58);
    var48.setForeground(var58);
    java.awt.image.VolatileImage var63 = var48.createVolatileImage(400, (-1));
    java.util.Set var65 = var48.getFocusTraversalKeys(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(505, var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test392");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Image var10 = var0.createImage(25, 500);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var26 = var20.getMouseListeners();
    int var27 = var20.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var28 = var20.getInputMethodRequests();
    var11.addKeyListener((java.awt.event.KeyListener)var20);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    boolean var37 = var20.isFocusCycleRoot((java.awt.Container)var30);
    var30.firePropertyChange("", 1L, 1L);
    var30.setVerifyInputWhenFocusTarget(true);
    var30.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var48 = var30.getLocation();
    var30.transferFocusUpCycle();
    boolean var51 = var30.areFocusTraversalKeysSet(0);
    int var52 = var0.getComponentZOrder((java.awt.Component)var30);
    var30.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test393");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.lang.String var12 = var2.getUIClassID();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    java.awt.Dimension var19 = var15.getPreferredSize();
    boolean var20 = var15.getVerifyInputWhenFocusTarget();
    java.awt.Component var23 = var15.findComponentAt(10, 1);
    var13.addKeyListener((java.awt.event.KeyListener)var15);
    var15.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var30.repaint();
    java.awt.im.InputMethodRequests var33 = var30.getInputMethodRequests();
    java.awt.GraphicsConfiguration var34 = var30.getGraphicsConfiguration();
    var15.remove((java.awt.Component)var30);
    var30.setName("");
    java.lang.String var38 = var30.getName();
    var2.addKeyListener((java.awt.event.KeyListener)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "PanelUI"+ "'", var12.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test394");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    int var2 = var0.getLives();
    var0.setUp(false);
    boolean var5 = var0.isDead();
    var0.setRigth(false);
    boolean var8 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test395");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(509.27513824562607d, 2, 10);
    double var4 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test396");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    var8.enable(true);
    boolean var30 = var8.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    var31.setRequestFocusEnabled(false);
    var31.reshape(100, 0, 100, 0);
    var31.requestFocus();
    var31.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var46 = var31.getLocation();
    var8.setLocation(var46);
    boolean var48 = var8.isManagingFocus();
    java.lang.String var49 = var8.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "PanelUI"+ "'", var49.equals("PanelUI"));

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test397");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    java.awt.ComponentOrientation var35 = var28.getComponentOrientation();
    boolean var36 = var28.isFocusable();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    var37.nextFocus();
    var37.reshape((-1), 1, (-1), 10);
    var37.disable();
    java.awt.LayoutManager var48 = var37.getLayout();
    java.awt.Container var49 = var37.getParent();
    boolean var50 = var37.isOptimizedDrawingEnabled();
    var28.addKeyListener((java.awt.event.KeyListener)var37);
    var37.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    java.awt.Dimension var64 = var60.getPreferredSize();
    var54.setMaximumSize(var64);
    boolean var66 = var54.getVerifyInputWhenFocusTarget();
    boolean var67 = var54.isFontSet();
    boolean var68 = var54.getIgnoreRepaint();
    java.awt.Component var71 = var54.locate(1, 25);
    boolean var72 = var54.isLightweight();
    boolean var75 = var54.inside(0, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var37.setComponentZOrder((java.awt.Component)var54, 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test398");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    java.awt.Container var19 = var9.getFocusCycleRootAncestor();
    boolean var20 = var9.hasFocus();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.setInheritsPopupMenu(false);
    boolean var27 = var21.isDoubleBuffered();
    boolean var28 = var21.isMinimumSizeSet();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    java.awt.Dimension var39 = var35.getPreferredSize();
    var29.setMaximumSize(var39);
    boolean var41 = var29.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var42 = var29.getAccessibleContext();
    boolean var43 = var29.isDoubleBuffered();
    java.awt.Rectangle var44 = var29.getVisibleRect();
    var21.setBounds(var44);
    java.lang.Object var46 = var9.getClientProperty((java.lang.Object)var21);
    java.awt.Insets var47 = var9.insets();
    var9.doLayout();
    java.awt.Dimension var49 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test399");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    boolean var28 = var19.hasFocus();
    var19.repaint((-1L));
    java.awt.event.InputMethodListener[] var31 = var19.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test400");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    java.awt.Dimension var20 = var0.getPreferredSize();
    java.awt.Dimension var21 = var0.preferredSize();
    var0.revalidate();
    var0.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test401");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    boolean var7 = var0.isFocusOwner();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    java.awt.Point var17 = var8.getMousePosition(false);
    java.awt.Component.BaselineResizeBehavior var18 = var8.getBaselineResizeBehavior();
    boolean var19 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    var20.list();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    java.awt.Rectangle var35 = var20.getBounds(var34);
    javax.swing.JToolTip var36 = var20.createToolTip();
    java.awt.Dimension var37 = var20.minimumSize();
    boolean var39 = var20.requestFocus(false);
    java.awt.Dimension var40 = var20.getMaximumSize();
    var0.putClientProperty((java.lang.Object)var8, (java.lang.Object)var20);
    java.awt.image.VolatileImage var44 = var20.createVolatileImage(100, 499);
    var20.resize(500, 399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test402");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    java.util.Locale var10 = var0.getLocale();
    var0.removeAll();
    var0.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test403");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    java.awt.Component var21 = var0.getComponentAt((-1), 25);
    java.awt.Insets var22 = var0.getInsets();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    boolean var30 = var25.getVerifyInputWhenFocusTarget();
    java.awt.Component var33 = var25.findComponentAt(10, 1);
    var23.addKeyListener((java.awt.event.KeyListener)var25);
    var25.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var40 = var25.getColorModel();
    boolean var41 = var25.isFocusTraversalPolicyProvider();
    var25.show(false);
    boolean var44 = var25.isPreferredSizeSet();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    boolean var49 = var45.isDoubleBuffered();
    var45.list();
    float var51 = var45.getAlignmentY();
    java.awt.Insets var52 = var45.getInsets();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    java.awt.Dimension var63 = var59.getPreferredSize();
    var53.setMaximumSize(var63);
    java.awt.Dimension var65 = var45.getSize(var63);
    var45.setFocusTraversalKeysEnabled(false);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    var68.setName("");
    java.awt.Toolkit var71 = var68.getToolkit();
    var68.setEnabled(false);
    var68.removeNotify();
    boolean var75 = var68.isDisplayable();
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    java.awt.Color var77 = var76.getBackground();
    var76.repaint();
    var76.setRequestFocusEnabled(false);
    var76.reshape(100, 0, 100, 0);
    var76.requestFocus();
    java.awt.Rectangle var87 = var76.getVisibleRect();
    java.awt.Rectangle var88 = var76.getBounds();
    java.awt.im.InputMethodRequests var89 = var76.getInputMethodRequests();
    boolean var90 = var76.requestFocusInWindow();
    java.awt.Point var92 = var76.getMousePosition(false);
    var76.setDebugGraphicsOptions(1);
    java.awt.Graphics var95 = var76.getGraphics();
    var68.paintAll(var95);
    var45.printAll(var95);
    var25.printAll(var95);
    var0.paint(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test404");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    javax.swing.KeyStroke[] var9 = var0.getRegisteredKeyStrokes();
    java.awt.GraphicsConfiguration var10 = var0.getGraphicsConfiguration();
    var0.show();
    java.awt.dnd.DropTarget var12 = var0.getDropTarget();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test405");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isMinimumSizeSet();
    java.awt.Point var8 = var0.getMousePosition(true);
    java.awt.Image var11 = var0.createImage(24, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test406");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    int var7 = var0.getPower();
    int var8 = var0.getX();
    int var9 = var0.getPower();
    int var10 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test407");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setAutoscrolls(false);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    var27.setRequestFocusEnabled(false);
    var27.setIgnoreRepaint(false);
    boolean var34 = var27.requestFocusInWindow();
    float var35 = var27.getAlignmentY();
    java.awt.LayoutManager var36 = var27.getLayout();
    var0.setLayout(var36);
    var0.validate();
    javax.swing.InputVerifier var39 = var0.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test408");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    java.awt.Component var9 = var0.getComponentAt(1, (-1));
    java.awt.event.HierarchyBoundsListener[] var10 = var0.getHierarchyBoundsListeners();
    var0.reshape(499, 100, 10, 499);
    java.awt.Component.BaselineResizeBehavior var16 = var0.getBaselineResizeBehavior();
    javax.swing.border.Border var17 = var0.getBorder();
    java.awt.Image var20 = var0.createImage(399, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test409");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.disable();
    var19.updateUI();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var32 = var19.getComponent(399);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test410");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var13 = var0.getAccessibleContext();
    boolean var14 = var0.isDoubleBuffered();
    boolean var15 = var0.getAutoscrolls();
    var0.repaint(10L, (-1), 25, (-1), 100);
    var0.updateUI();
    boolean var23 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    boolean var31 = var26.getVerifyInputWhenFocusTarget();
    java.awt.Component var34 = var26.findComponentAt(10, 1);
    var24.addKeyListener((java.awt.event.KeyListener)var26);
    java.awt.Cursor var36 = var24.getCursor();
    var0.setCursor(var36);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    var38.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var43 = var38.getUI();
    java.awt.Color var44 = var38.getBackground();
    var38.removeAll();
    int var46 = var38.getHeight();
    java.awt.Dimension var47 = var38.getMaximumSize();
    var0.setPreferredSize(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test411");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    var0.disable();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.reshape((-1), 1, (-1), 10);
    var14.disable();
    boolean var25 = var14.isFocusable();
    int var26 = var14.getHeight();
    javax.swing.InputVerifier var27 = var14.getInputVerifier();
    java.awt.Graphics var28 = var14.getGraphics();
    java.awt.Color var29 = var14.getForeground();
    var0.setBackground(var29);
    java.awt.Dimension var31 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test412");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    var26.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test413");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.removeAll();
    java.awt.image.ColorModel var7 = var0.getColorModel();
    java.lang.Object var8 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test414");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    var0.setAlignmentY((-1.0f));
    java.awt.Component var24 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test415");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", ' ', '#');
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test416");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    var0.setAutoscrolls(true);
    boolean var21 = var0.requestFocus(true);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.move(10, 10);
    var22.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Rectangle var35 = var22.bounds();
    java.awt.image.ColorModel var36 = var22.getColorModel();
    boolean var37 = var0.isFocusCycleRoot((java.awt.Container)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test417");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    java.awt.Component[] var13 = var1.getComponents();
    var1.repaint(25, 25, 100, 1);
    javax.swing.KeyStroke[] var19 = var1.getRegisteredKeyStrokes();
    var1.validate();
    boolean var21 = var1.isForegroundSet();
    var1.setDebugGraphicsOptions(399);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test418");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.loseLife();
    int var9 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 99);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test419");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    var0.enable(true);
    var0.nextFocus();
    var0.setBounds((-1), 3, 499, 100);
    var0.setLocation(399, 25);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.setInheritsPopupMenu(false);
    var24.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    var32.list();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    java.awt.dnd.DropTarget var43 = var38.getDropTarget();
    var38.show(false);
    java.awt.Rectangle var46 = var38.getVisibleRect();
    java.awt.Rectangle var47 = var32.getBounds(var46);
    javax.swing.JToolTip var48 = var32.createToolTip();
    var24.removeKeyListener((java.awt.event.KeyListener)var32);
    var24.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var52 = var24.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    java.awt.Dimension var57 = var53.getPreferredSize();
    java.awt.Toolkit var58 = var53.getToolkit();
    boolean var59 = var53.isFocusable();
    javax.swing.KeyStroke[] var60 = var53.getRegisteredKeyStrokes();
    java.awt.Component var63 = var53.getComponentAt(100, 100);
    java.lang.Object var64 = var53.getTreeLock();
    boolean var67 = var53.inside(400, 0);
    java.awt.event.MouseWheelListener[] var68 = var53.getMouseWheelListeners();
    var53.enableInputMethods(true);
    boolean var71 = var24.isAncestorOf((java.awt.Component)var53);
    boolean var72 = var24.isEnabled();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    boolean var78 = var73.getVerifyInputWhenFocusTarget();
    java.awt.Component var81 = var73.findComponentAt(10, 1);
    boolean var82 = var73.requestDefaultFocus();
    var73.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var85 = var73.getLocation();
    boolean var86 = var24.contains(var85);
    java.beans.VetoableChangeListener[] var87 = var24.getVetoableChangeListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var89 = var0.add((java.awt.Component)var24, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test420");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    var0.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test421");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    int var22 = var17.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test422");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    var0.resetKeyboardActions();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    java.awt.Rectangle var27 = var19.getVisibleRect();
    var0.computeVisibleRect(var27);
    var0.reshape(24, 3, 1, 0);
    java.awt.event.HierarchyBoundsListener[] var34 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test423");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    var3.repaint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    javax.swing.plaf.PanelUI var40 = var20.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.reshape((-1), 1, (-1), 10);
    var41.disable();
    java.awt.LayoutManager var52 = var41.getLayout();
    java.awt.Container var53 = var41.getParent();
    java.lang.String var54 = var41.getUIClassID();
    SpaceWar.Enemy var57 = new SpaceWar.Enemy(0, 10);
    var20.add((java.awt.Component)var41, (java.lang.Object)10);
    java.awt.event.MouseListener[] var59 = var20.getMouseListeners();
    java.awt.Component var61 = var3.add((java.awt.Component)var20, (-1));
    java.awt.Component var64 = var20.locate((-1), 100);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    boolean var69 = var65.isDoubleBuffered();
    var65.enable(false);
    java.awt.Container var72 = var65.getTopLevelAncestor();
    java.awt.Dimension var73 = var65.minimumSize();
    java.awt.Dimension var74 = var65.preferredSize();
    var20.setPreferredSize(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test424");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    java.beans.PropertyChangeListener[] var20 = var0.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.Insets var21 = var0.getInsets();
    boolean var22 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test425");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.ComponentOrientation var3 = var0.getComponentOrientation();
    int var4 = var0.getComponentCount();
    java.awt.image.ColorModel var5 = var0.getColorModel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    var6.repaint();
    var6.setRequestFocusEnabled(false);
    var6.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var16 = var6.getAncestorListeners();
    var6.grabFocus();
    java.lang.Object var18 = var0.getClientProperty((java.lang.Object)var6);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var25 = var19.getUI();
    java.awt.im.InputMethodRequests var26 = var19.getInputMethodRequests();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.updateUI();
    var27.enableInputMethods(true);
    var27.setSize((-1), 1);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    var38.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var19.add((java.awt.Component)var27, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.setInheritsPopupMenu(false);
    boolean var50 = var44.isDoubleBuffered();
    boolean var51 = var44.isMinimumSizeSet();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    java.awt.Dimension var62 = var58.getPreferredSize();
    var52.setMaximumSize(var62);
    boolean var64 = var52.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var65 = var52.getAccessibleContext();
    boolean var66 = var52.isDoubleBuffered();
    java.awt.Rectangle var67 = var52.getVisibleRect();
    var44.setBounds(var67);
    java.awt.Rectangle var69 = var19.getBounds(var67);
    java.lang.String var70 = var19.getUIClassID();
    var6.setNextFocusableComponent((java.awt.Component)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "PanelUI"+ "'", var70.equals("PanelUI"));

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test426");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    var8.setBackground(var19);
    java.awt.Point var22 = var8.location();
    var0.setLocation(var22);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var34.repaint();
    var34.setRequestFocusEnabled(false);
    var34.reshape(100, 0, 100, 0);
    java.awt.Component var44 = var24.add((java.awt.Component)var34);
    var24.enable();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    boolean var48 = var46.hasFocus();
    boolean var49 = var46.isPreferredSizeSet();
    var0.putClientProperty((java.lang.Object)var24, (java.lang.Object)var46);
    boolean var51 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test427");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    boolean var17 = var13.isDoubleBuffered();
    java.awt.dnd.DropTarget var18 = var13.getDropTarget();
    var13.show(false);
    java.awt.Rectangle var21 = var13.getVisibleRect();
    java.awt.Toolkit var22 = var13.getToolkit();
    java.awt.event.MouseMotionListener[] var23 = var13.getMouseMotionListeners();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    java.awt.Color var29 = var28.getBackground();
    var24.setForeground(var29);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    var24.repaint(var39);
    java.awt.Component.BaselineResizeBehavior var41 = var24.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    var42.repaint(1L);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    var49.list();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    boolean var59 = var55.isDoubleBuffered();
    java.awt.dnd.DropTarget var60 = var55.getDropTarget();
    var55.show(false);
    java.awt.Rectangle var63 = var55.getVisibleRect();
    java.awt.Rectangle var64 = var49.getBounds(var63);
    var42.setBounds(var64);
    var24.paintImmediately(var64);
    var13.setBounds(var64);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    java.awt.Color var73 = var72.getBackground();
    var68.setForeground(var73);
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    boolean var79 = var75.isDoubleBuffered();
    java.awt.dnd.DropTarget var80 = var75.getDropTarget();
    var75.show(false);
    java.awt.Rectangle var83 = var75.getVisibleRect();
    var68.repaint(var83);
    java.awt.Component.BaselineResizeBehavior var85 = var68.getBaselineResizeBehavior();
    var0.add((java.awt.Component)var13, (java.lang.Object)var85);
    java.beans.VetoableChangeListener[] var87 = var13.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test428");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    var0.setFocusTraversalKeysEnabled(false);
    java.awt.event.MouseMotionListener[] var79 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test429");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.beans.PropertyChangeListener[] var15 = var1.getPropertyChangeListeners();
    java.awt.FocusTraversalPolicy var16 = var1.getFocusTraversalPolicy();
    var1.show(false);
    java.awt.im.InputMethodRequests var19 = var1.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test430");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    java.awt.image.BufferedImage var3 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var4 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test431");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    java.awt.Rectangle var9 = var0.getBounds();
    javax.swing.JToolTip var10 = var0.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test432");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    var0.transferFocusUpCycle();
    java.awt.Container var6 = var0.getParent();
    boolean var7 = var0.isMaximumSizeSet();
    java.awt.event.InputMethodListener[] var8 = var0.getInputMethodListeners();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    boolean var10 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test433");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    java.awt.image.BufferedImage var5 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var6 = var0.getPower();
    int var7 = var0.getRequiredPower();
    var0.setRigth(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test434");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var18 = var12.getUI();
    java.awt.im.InputMethodRequests var19 = var12.getInputMethodRequests();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var20.setSize((-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    var31.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var12.add((java.awt.Component)var20, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var37 = var12.getKeyListeners();
    java.awt.FocusTraversalPolicy var38 = var12.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    var39.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var44 = var39.getToolkit();
    var0.add((java.awt.Component)var12, (java.lang.Object)var39);
    java.beans.VetoableChangeListener[] var46 = var39.getVetoableChangeListeners();
    var39.setSize(0, 399);
    boolean var50 = var39.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test435");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    var1.show(false);
    var1.firePropertyChange("PanelUI", false, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var26 = var1.getFocusTraversalKeys(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test436");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Rectangle var13 = var0.bounds();
    java.awt.event.ComponentListener[] var14 = var0.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test437");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    boolean var77 = var0.isValid();
    int var78 = var0.getWidth();
    java.awt.event.HierarchyListener[] var79 = var0.getHierarchyListeners();
    java.awt.Component var82 = var0.locate(1, 1);
    java.awt.image.BufferedImage var84 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test438");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    var42.firePropertyChange("PanelUI", (short)1, (short)1);
    int var89 = var42.getHeight();
    boolean var92 = var42.inside(99, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test439");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    float var18 = var0.getAlignmentX();
    java.awt.image.VolatileImage var21 = var0.createVolatileImage(25, 1);
    java.beans.PropertyChangeListener[] var23 = var0.getPropertyChangeListeners("PanelUI");
    boolean var24 = var0.isPaintingForPrint();
    boolean var25 = var0.isPreferredSizeSet();
    int var26 = var0.getComponentCount();
    javax.swing.TransferHandler var27 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test440");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    var15.nextFocus();
    var15.updateUI();
    int var29 = var15.getWidth();
    boolean var30 = var15.isFontSet();
    java.awt.Point var31 = var15.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test441");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    boolean var4 = var0.isFocusTraversalPolicyProvider();
    java.beans.PropertyChangeListener[] var6 = var0.getPropertyChangeListeners("hi!");
    boolean var7 = var0.getIgnoreRepaint();
    boolean var8 = var0.isRequestFocusEnabled();
    boolean var9 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test442");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.beans.PropertyChangeListener[] var8 = var0.getPropertyChangeListeners();
    java.awt.LayoutManager var9 = var0.getLayout();
    var0.show();
    java.awt.event.ContainerListener[] var11 = var0.getContainerListeners();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test443");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    int var3 = var2.getR();
    int var4 = var2.getR();
    double var5 = var2.getY();
    var2.hit();
    double var7 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test444");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var8.setAutoscrolls(true);
    java.awt.Image var29 = var8.createImage(400, 400);
    var8.enableInputMethods(true);
    javax.swing.plaf.PanelUI var32 = var8.getUI();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var39 = var33.getMouseListeners();
    int var40 = var33.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var41 = var33.getInputMethodRequests();
    var33.removeNotify();
    var33.enable();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    boolean var48 = var44.inside(0, (-1));
    var44.transferFocusUpCycle();
    java.lang.String var50 = var44.getName();
    boolean var51 = var33.isFocusCycleRoot((java.awt.Container)var44);
    var8.addKeyListener((java.awt.event.KeyListener)var33);
    java.awt.Component var53 = var33.getNextFocusableComponent();
    java.awt.Component.BaselineResizeBehavior var54 = var33.getBaselineResizeBehavior();
    boolean var55 = var33.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test445");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    var0.increasePower(0);
    int var5 = var0.getLives();
    var0.setLeft(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test446");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    var0.enable();
    javax.accessibility.AccessibleContext var22 = var0.getAccessibleContext();
    javax.swing.JRootPane var23 = var0.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test447");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(3, 10);
    int var3 = var2.getType();
    double var4 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 493.38933439027335d);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test448");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    var8.setName("");
    java.awt.Graphics var11 = var8.getGraphics();
    java.awt.event.MouseMotionListener[] var12 = var8.getMouseMotionListeners();
    boolean var13 = var8.getIgnoreRepaint();
    var8.transferFocusBackward();
    java.awt.Cursor var15 = var8.getCursor();
    var0.setCursor(var15);
    var0.repaint((-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test449");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    java.awt.Image var8 = var0.createImage(10, 100);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var0.setForeground(var10);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.event.InputMethodListener[] var14 = var0.getInputMethodListeners();
    boolean var15 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test450");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    boolean var9 = var0.getIgnoreRepaint();
    java.awt.Component[] var10 = var0.getComponents();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test451");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    var12.repaint();
    java.awt.im.InputMethodRequests var15 = var12.getInputMethodRequests();
    int var16 = var12.countComponents();
    java.awt.event.ComponentListener[] var17 = var12.getComponentListeners();
    var12.removeNotify();
    javax.swing.InputMap var19 = var12.getInputMap();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var26.setForeground(var31);
    var20.setBackground(var31);
    java.awt.Point var34 = var20.location();
    var12.setLocation(var34);
    var0.setLocation(var34);
    var0.setDebugGraphicsOptions(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test452");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    boolean var9 = var7.hasFocus();
    java.awt.Insets var10 = var7.getInsets();
    java.awt.Rectangle var11 = var7.bounds();
    var0.repaint(var11);
    boolean var13 = var0.hasFocus();
    java.awt.Dimension var14 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test453");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(10, 10.0d, 10.0d);
    boolean var4 = var3.update();
    double var5 = var3.getY();
    double var6 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 12.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 12.0d);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test454");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var0.firePropertyChange("", false, true);
    boolean var16 = var0.requestFocusInWindow();
    int var17 = var0.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test455");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    var3.repaint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    javax.swing.plaf.PanelUI var40 = var20.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.reshape((-1), 1, (-1), 10);
    var41.disable();
    java.awt.LayoutManager var52 = var41.getLayout();
    java.awt.Container var53 = var41.getParent();
    java.lang.String var54 = var41.getUIClassID();
    SpaceWar.Enemy var57 = new SpaceWar.Enemy(0, 10);
    var20.add((java.awt.Component)var41, (java.lang.Object)10);
    java.awt.event.MouseListener[] var59 = var20.getMouseListeners();
    java.awt.Component var61 = var3.add((java.awt.Component)var20, (-1));
    java.awt.event.HierarchyBoundsListener[] var62 = var3.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test456");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    java.awt.Dimension var33 = var29.getPreferredSize();
    boolean var34 = var29.getVerifyInputWhenFocusTarget();
    java.awt.Component var37 = var29.findComponentAt(10, 1);
    var27.addKeyListener((java.awt.event.KeyListener)var29);
    var29.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    var44.repaint();
    java.awt.im.InputMethodRequests var47 = var44.getInputMethodRequests();
    java.awt.GraphicsConfiguration var48 = var44.getGraphicsConfiguration();
    var29.remove((java.awt.Component)var44);
    var29.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 1.0f);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    java.awt.Dimension var58 = var54.getPreferredSize();
    boolean var59 = var54.getVerifyInputWhenFocusTarget();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    var60.setName("");
    int var63 = var60.getX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    var64.nextFocus();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    java.awt.Color var74 = var73.getBackground();
    var69.setForeground(var74);
    var64.setBackground(var74);
    var60.setBackground(var74);
    var29.add((java.awt.Component)var54, (java.lang.Object)var60);
    var60.transferFocus();
    java.util.Locale var80 = var60.getLocale();
    var17.setLocale(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test457");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.getInheritsPopupMenu();
    javax.swing.event.AncestorListener[] var18 = var1.getAncestorListeners();
    var1.doLayout();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', 'a');
    java.awt.Component var24 = var1.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test458");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getX();
    double var5 = var3.getY();
    double var6 = var3.getY();
    double var7 = var3.getY();
    double var8 = var3.getR();
    double var9 = var3.getX();
    double var10 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test459");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Dimension var12 = var2.getMinimumSize();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var13.repaint();
    var13.setRequestFocusEnabled(false);
    var13.reshape(100, 0, 100, 0);
    var13.requestFocus();
    java.awt.Rectangle var24 = var13.getVisibleRect();
    var2.setBounds(var24);
    java.awt.event.HierarchyBoundsListener[] var26 = var2.getHierarchyBoundsListeners();
    boolean var27 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test460");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    var0.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test461");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.transferFocus();
    boolean var28 = var0.isFocusable();
    var0.disable();
    java.awt.event.ComponentListener[] var30 = var0.getComponentListeners();
    int var31 = var0.getComponentCount();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.reshape((-1), 1, (-1), 10);
    var32.disable();
    java.awt.LayoutManager var43 = var32.getLayout();
    boolean var46 = var32.contains((-1), 0);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    var47.nextFocus();
    var47.updateUI();
    var47.enableInputMethods(true);
    var47.setSize((-1), 1);
    java.awt.Component var58 = var32.add((java.awt.Component)var47);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.nextFocus();
    var59.updateUI();
    var59.enableInputMethods(true);
    java.lang.String var67 = var59.toString();
    java.awt.FocusTraversalPolicy var68 = var59.getFocusTraversalPolicy();
    var47.removeKeyListener((java.awt.event.KeyListener)var59);
    boolean var70 = var59.isShowing();
    java.awt.GraphicsConfiguration var71 = var59.getGraphicsConfiguration();
    java.awt.Cursor var72 = var59.getCursor();
    var0.setCursor(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var67,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var67.equals("SpaceWar.SpacePanel[,0,0,0var67,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test462");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    var16.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    var16.remove((java.awt.Component)var31);
    java.awt.Font var37 = var31.getFont();
    var0.setFont(var37);
    boolean var39 = var0.isShowing();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    java.awt.Color var41 = var40.getBackground();
    var40.repaint();
    java.awt.im.InputMethodRequests var43 = var40.getInputMethodRequests();
    var40.setDoubleBuffered(true);
    var40.setInheritsPopupMenu(false);
    boolean var48 = var40.isFocusTraversalPolicySet();
    var40.transferFocusUpCycle();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    boolean var54 = var50.isDoubleBuffered();
    java.awt.dnd.DropTarget var55 = var50.getDropTarget();
    var50.show(false);
    java.awt.Rectangle var58 = var50.getVisibleRect();
    java.awt.image.BufferedImage var60 = var50.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var61 = var50.getComponentOrientation();
    java.awt.Component var62 = var40.add((java.awt.Component)var50);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    boolean var67 = var63.inside(0, (-1));
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    java.awt.Color var73 = var72.getBackground();
    var68.setForeground(var73);
    var63.setForeground(var73);
    java.awt.image.VolatileImage var78 = var63.createVolatileImage(400, (-1));
    var0.add((java.awt.Component)var40, (java.lang.Object)400);
    var40.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 24, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test463");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    java.awt.Component.BaselineResizeBehavior var10 = var0.getBaselineResizeBehavior();
    java.awt.Dimension var11 = var0.getPreferredSize();
    var0.repaint(100, 400, 10, (-1));
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    java.awt.Dimension var21 = var17.getPreferredSize();
    java.awt.Toolkit var22 = var17.getToolkit();
    boolean var23 = var17.isFocusable();
    javax.swing.KeyStroke[] var24 = var17.getRegisteredKeyStrokes();
    var17.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    javax.swing.plaf.PanelUI var30 = var27.getUI();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    boolean var39 = var31.isPaintingForPrint();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var46 = var40.getMouseListeners();
    int var47 = var40.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var48 = var40.getInputMethodRequests();
    var31.addKeyListener((java.awt.event.KeyListener)var40);
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    boolean var54 = var50.isDoubleBuffered();
    var50.list();
    float var56 = var50.getAlignmentY();
    boolean var57 = var40.isFocusCycleRoot((java.awt.Container)var50);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.nextFocus();
    var59.updateUI();
    java.awt.Component var65 = var40.add("", (java.awt.Component)var59);
    java.awt.ComponentOrientation var66 = var59.getComponentOrientation();
    boolean var67 = var59.isFocusable();
    var27.remove((java.awt.Component)var59);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    var69.setInheritsPopupMenu(false);
    boolean var75 = var69.isDoubleBuffered();
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    float var77 = var76.getAlignmentX();
    var76.setVisible(false);
    var76.nextFocus();
    var76.reshape((-1), 1, (-1), 10);
    var76.disable();
    java.awt.LayoutManager var87 = var76.getLayout();
    var69.setLayout(var87);
    var17.add((java.awt.Component)var27, (java.lang.Object)var87);
    var0.setLayout(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test464");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    boolean var18 = var0.isLightweight();
    var0.move(100, 500);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.nextFocus();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    java.awt.Color var29 = var28.getBackground();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.updateUI();
    var30.enableInputMethods(true);
    var27.add((java.awt.Component)var28, (java.lang.Object)true);
    java.awt.Dimension var39 = var28.getPreferredSize();
    var22.setMaximumSize(var39);
    java.awt.Dimension var41 = var22.preferredSize();
    java.lang.String var42 = var22.getToolTipText();
    var0.removeKeyListener((java.awt.event.KeyListener)var22);
    javax.swing.TransferHandler var44 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test465");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    var19.setForeground(var24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var19.repaint(var34);
    java.awt.Component.BaselineResizeBehavior var36 = var19.getBaselineResizeBehavior();
    var11.addKeyListener((java.awt.event.KeyListener)var19);
    boolean var38 = var19.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test466");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    boolean var9 = var0.isFocusTraversalPolicyProvider();
    java.awt.im.InputContext var10 = var0.getInputContext();
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var13 = var0.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test467");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isFocusTraversalPolicyProvider();
    java.awt.Insets var21 = var0.insets();
    java.awt.Dimension var22 = var0.getMinimumSize();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    java.awt.event.MouseWheelListener[] var31 = var23.getMouseWheelListeners();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var32.setForeground(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    var39.show(false);
    java.awt.Rectangle var47 = var39.getVisibleRect();
    var32.repaint(var47);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var55 = var49.getMouseListeners();
    java.awt.Dimension var56 = var49.getPreferredSize();
    java.util.Locale var57 = var49.getLocale();
    var32.setLocale(var57);
    java.util.Locale var59 = var32.getLocale();
    var23.setLocale(var59);
    var0.setLocale(var59);
    var0.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test468");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var0.repaint(25, 25, 24, 10);
    var0.transferFocusBackward();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    java.awt.Dimension var64 = var60.getPreferredSize();
    boolean var65 = var60.getVerifyInputWhenFocusTarget();
    java.awt.Component var68 = var60.findComponentAt(10, 1);
    boolean var69 = var60.requestDefaultFocus();
    var60.firePropertyChange("hi!", false, true);
    javax.swing.ActionMap var74 = var60.getActionMap();
    var60.setDebugGraphicsOptions(10);
    java.awt.LayoutManager var77 = var60.getLayout();
    var0.setLayout(var77);
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test469");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.firePropertyChange("", 0.5f, 100.0f);
    var0.enable(false);
    var0.setVerifyInputWhenFocusTarget(true);
    java.awt.event.MouseListener[] var15 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test470");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    var0.reshape(10, 100, 3, 3);
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    java.awt.Rectangle var32 = var0.getVisibleRect();
    int var33 = var0.getComponentCount();
    boolean var34 = var0.hasFocus();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var35.add((java.awt.Component)var36, (java.lang.Object)true);
    boolean var48 = var36.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    java.awt.dnd.DropTarget var54 = var49.getDropTarget();
    var49.show(false);
    java.awt.Rectangle var57 = var49.getVisibleRect();
    var36.setBounds(var57);
    java.awt.Rectangle var59 = var0.getBounds(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test471");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var9.isShowing();
    boolean var20 = var9.isOpaque();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    var21.list();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    java.awt.Rectangle var36 = var21.getBounds(var35);
    javax.swing.JToolTip var37 = var21.createToolTip();
    java.awt.Dimension var38 = var21.minimumSize();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.setInheritsPopupMenu(false);
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Container var47 = var39.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.removeNotify();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    var51.list();
    float var57 = var51.getAlignmentY();
    java.awt.Insets var58 = var51.getInsets();
    java.awt.Insets var59 = var48.getInsets(var58);
    java.awt.Insets var60 = var39.getInsets(var59);
    java.awt.Insets var61 = var21.getInsets(var59);
    java.awt.ComponentOrientation var62 = var21.getComponentOrientation();
    var9.applyComponentOrientation(var62);
    var9.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test472");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var0.setMaximumSize(var17);
    javax.swing.InputVerifier var19 = var0.getInputVerifier();
    java.beans.VetoableChangeListener[] var20 = var0.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test473");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var13 = var0.getAccessibleContext();
    boolean var14 = var0.isOpaque();
    java.lang.String var15 = var0.toString();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var33 = var18.getColorModel();
    boolean var34 = var18.isFocusTraversalPolicyProvider();
    var18.show(false);
    boolean var37 = var18.isPreferredSizeSet();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    var38.list();
    float var44 = var38.getAlignmentY();
    java.awt.Insets var45 = var38.getInsets();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    java.awt.Dimension var56 = var52.getPreferredSize();
    var46.setMaximumSize(var56);
    java.awt.Dimension var58 = var38.getSize(var56);
    var38.setFocusTraversalKeysEnabled(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.setName("");
    java.awt.Toolkit var64 = var61.getToolkit();
    var61.setEnabled(false);
    var61.removeNotify();
    boolean var68 = var61.isDisplayable();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    java.awt.Color var70 = var69.getBackground();
    var69.repaint();
    var69.setRequestFocusEnabled(false);
    var69.reshape(100, 0, 100, 0);
    var69.requestFocus();
    java.awt.Rectangle var80 = var69.getVisibleRect();
    java.awt.Rectangle var81 = var69.getBounds();
    java.awt.im.InputMethodRequests var82 = var69.getInputMethodRequests();
    boolean var83 = var69.requestFocusInWindow();
    java.awt.Point var85 = var69.getMousePosition(false);
    var69.setDebugGraphicsOptions(1);
    java.awt.Graphics var88 = var69.getGraphics();
    var61.paintAll(var88);
    var38.printAll(var88);
    var18.printAll(var88);
    var0.update(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var15.equals("SpaceWar.SpacePanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test474");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    boolean var23 = var0.requestFocus(false);
    java.awt.Component var24 = var0.getNextFocusableComponent();
    float var25 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test475");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.lang.String var8 = var0.toString();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    java.awt.dnd.DropTarget var14 = var9.getDropTarget();
    var9.show(false);
    java.awt.Rectangle var17 = var9.getVisibleRect();
    java.awt.image.BufferedImage var19 = var9.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    boolean var21 = var9.isPaintingTile();
    boolean var22 = var9.isOptimizedDrawingEnabled();
    int var23 = var0.getComponentZOrder((java.awt.Component)var9);
    javax.swing.JRootPane var24 = var0.getRootPane();
    boolean var25 = var0.isMaximumSizeSet();
    boolean var26 = var0.isVisible();
    java.awt.event.HierarchyListener[] var27 = var0.getHierarchyListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var29 = var0.getComponent(2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var8.equals("SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test476");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    java.awt.ComponentOrientation var35 = var28.getComponentOrientation();
    java.awt.Dimension var36 = var28.minimumSize();
    boolean var37 = var28.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test477");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    var0.setLocation(10, 100);
    javax.accessibility.AccessibleContext var28 = var0.getAccessibleContext();
    int var29 = var0.getX();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var36 = var30.getUI();
    java.awt.im.InputMethodRequests var37 = var30.getInputMethodRequests();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.setSize((-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var30.add((java.awt.Component)var38, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    java.awt.Dimension var59 = var55.getPreferredSize();
    java.awt.Toolkit var60 = var55.getToolkit();
    java.awt.Toolkit var61 = var55.getToolkit();
    java.awt.Component var62 = var38.add((java.awt.Component)var55);
    int var63 = var38.getY();
    int var66 = var38.getBaseline(25, 10);
    java.awt.im.InputMethodRequests var67 = var38.getInputMethodRequests();
    java.awt.Point var69 = var38.getMousePosition(true);
    java.awt.Component var70 = var0.add((java.awt.Component)var38);
    java.awt.Component var73 = var38.locate(100, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test478");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    java.awt.event.MouseWheelListener[] var7 = var0.getMouseWheelListeners();
    boolean var8 = var0.isShowing();
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test479");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    int var4 = var2.getR();
    int var5 = var2.getRank();
    var2.explode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test480");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    java.awt.Dimension var36 = var0.getSize();
    boolean var37 = var0.isFocusTraversable();
    var0.show(false);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    java.awt.Color var41 = var40.getBackground();
    var40.repaint();
    java.awt.im.InputMethodRequests var43 = var40.getInputMethodRequests();
    int var44 = var40.countComponents();
    java.awt.Dimension var45 = var40.getSize();
    java.awt.event.MouseWheelListener[] var46 = var40.getMouseWheelListeners();
    int var47 = var0.getComponentZOrder((java.awt.Component)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test481");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.event.MouseWheelListener[] var16 = var0.getMouseWheelListeners();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var23 = var17.getUI();
    var0.setUI(var23);
    java.awt.dnd.DropTarget var25 = var0.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test482");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    java.awt.image.BufferedImage var5 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setLife(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test483");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.beans.VetoableChangeListener[] var3 = var0.getVetoableChangeListeners();
    var0.paintImmediately(10, 0, (-1), 25);
    boolean var9 = var0.getInheritsPopupMenu();
    var0.resize(500, 10);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    boolean var17 = var13.isDoubleBuffered();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.reshape((-1), 1, (-1), 10);
    var18.disable();
    boolean var29 = var18.isFocusable();
    int var30 = var18.getHeight();
    var13.setNextFocusableComponent((java.awt.Component)var18);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var37.setForeground(var42);
    var32.setBackground(var42);
    java.awt.Component var45 = var32.getNextFocusableComponent();
    float var46 = var32.getAlignmentY();
    java.awt.event.MouseListener[] var47 = var32.getMouseListeners();
    java.awt.Point var48 = var32.location();
    java.awt.Point var49 = var13.getLocation(var48);
    var0.setLocation(var49);
    var0.setSize(2, 3);
    SpaceWar.Player var54 = new SpaceWar.Player();
    boolean var55 = var54.isRecovering();
    var54.setRigth(false);
    int var58 = var54.getPower();
    boolean var59 = var54.isDead();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    java.awt.Color var61 = var60.getBackground();
    var60.repaint();
    java.awt.im.InputMethodRequests var63 = var60.getInputMethodRequests();
    var60.setDoubleBuffered(true);
    var60.setInheritsPopupMenu(false);
    boolean var68 = var60.isFocusTraversalPolicySet();
    var0.putClientProperty((java.lang.Object)var54, (java.lang.Object)var68);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    java.awt.Dimension var74 = var70.getPreferredSize();
    boolean var75 = var70.getVerifyInputWhenFocusTarget();
    java.awt.Component var78 = var70.findComponentAt(10, 1);
    boolean var79 = var70.requestDefaultFocus();
    java.awt.Insets var80 = var70.getInsets();
    var70.setDoubleBuffered(false);
    java.awt.Toolkit var83 = var70.getToolkit();
    java.awt.Dimension var84 = var70.getMinimumSize();
    java.awt.Dimension var85 = var0.getSize(var84);
    java.awt.Dimension var86 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test484");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var9.isShowing();
    boolean var20 = var9.requestFocusInWindow();
    var9.firePropertyChange("hi!", true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test485");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    boolean var7 = var0.requestFocusInWindow();
    var0.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.reshape((-1), 1, (-1), 10);
    var10.disable();
    var10.show();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    var22.list();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    java.awt.dnd.DropTarget var33 = var28.getDropTarget();
    var28.show(false);
    java.awt.Rectangle var36 = var28.getVisibleRect();
    java.awt.Rectangle var37 = var22.getBounds(var36);
    javax.swing.JToolTip var38 = var22.createToolTip();
    var22.firePropertyChange("", false, false);
    var22.validate();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    boolean var48 = var44.isDoubleBuffered();
    java.awt.dnd.DropTarget var49 = var44.getDropTarget();
    var44.show(false);
    boolean var52 = var44.isPaintingForPrint();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var59 = var53.getMouseListeners();
    int var60 = var53.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var61 = var53.getInputMethodRequests();
    var44.addKeyListener((java.awt.event.KeyListener)var53);
    var53.repaint();
    java.awt.Point var64 = var53.location();
    java.awt.Component var65 = var22.getComponentAt(var64);
    java.awt.Point var66 = var10.getLocation(var64);
    var0.setLocation(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test486");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(83.657626403857d, 1, 24);
    double var4 = var3.getY();
    double var5 = var3.getR();
    boolean var6 = var3.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 24.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test487");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.firePropertyChange("hi!", false, true);
    boolean var14 = var0.isManagingFocus();
    boolean var15 = var0.isOpaque();
    java.awt.Image var18 = var0.createImage(100, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test488");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    boolean var12 = var2.getFocusTraversalKeysEnabled();
    var2.requestFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var15 = var2.getComponent(499);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test489");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setScore(3);
    var0.increasePower(0);
    int var12 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test490");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    javax.swing.TransferHandler var18 = var0.getTransferHandler();
    int var21 = var0.getBaseline(24, 25);
    var0.move(2, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(99);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test491");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    boolean var6 = var0.isDead();
    var0.setFiring(true);
    var0.setRigth(false);
    var0.setLeft(true);
    int var13 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test492");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.removeNotify();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.Component.BaselineResizeBehavior var4 = var0.getBaselineResizeBehavior();
    var0.setOpaque(true);
    java.awt.Container var7 = var0.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test493");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    java.lang.String var10 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "PanelUI"+ "'", var10.equals("PanelUI"));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test494");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var16 = var10.getUI();
    java.awt.im.InputMethodRequests var17 = var10.getInputMethodRequests();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.updateUI();
    var18.enableInputMethods(true);
    var18.setSize((-1), 1);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    var29.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var10.add((java.awt.Component)var18, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var35 = var10.getKeyListeners();
    var10.repaint(3, 1, 25, 0);
    java.awt.Color var41 = var10.getForeground();
    var0.setForeground(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test495");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    boolean var27 = var0.isPaintingForPrint();
    int var28 = var0.getComponentCount();
    var0.setSize(400, 24);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.reshape((-1), 1, (-1), 10);
    var32.disable();
    java.awt.LayoutManager var43 = var32.getLayout();
    java.lang.Object var44 = var0.getClientProperty((java.lang.Object)var32);
    var0.setBounds((-1), 499, (-1), 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test496");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.Dimension var7 = var0.getPreferredSize();
    boolean var10 = var0.contains(500, 100);
    var0.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test497");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    java.lang.String var4 = var0.getToolTipText();
    java.awt.Point var5 = var0.getLocation();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    var6.repaint();
    var6.setRequestFocusEnabled(false);
    var6.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var16 = var6.getAncestorListeners();
    var6.setOpaque(true);
    var6.show();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var26 = var20.getMouseListeners();
    java.awt.Dimension var27 = var20.getPreferredSize();
    java.util.Locale var28 = var20.getLocale();
    java.awt.Font var29 = var20.getFont();
    java.awt.Container var30 = var20.getTopLevelAncestor();
    var0.add((java.awt.Component)var6, (java.lang.Object)var20);
    boolean var32 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test498");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    var0.setAutoscrolls(false);
    java.awt.Component.BaselineResizeBehavior var8 = var0.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    java.awt.Rectangle var23 = var15.getVisibleRect();
    java.awt.Rectangle var24 = var9.getBounds(var23);
    javax.swing.JToolTip var25 = var9.createToolTip();
    var9.firePropertyChange("", false, false);
    var9.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1L), (-1L));
    var9.validate();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    java.awt.Color var36 = var35.getBackground();
    var35.repaint();
    java.awt.im.InputMethodRequests var38 = var35.getInputMethodRequests();
    int var39 = var35.countComponents();
    java.awt.event.ComponentListener[] var40 = var35.getComponentListeners();
    var35.removeNotify();
    java.awt.Component var44 = var35.getComponentAt(1, (-1));
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    java.awt.Dimension var55 = var51.getPreferredSize();
    var45.setMaximumSize(var55);
    boolean var57 = var45.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var58 = var45.getAccessibleContext();
    boolean var59 = var45.isDoubleBuffered();
    java.awt.Rectangle var60 = var45.getVisibleRect();
    var35.setBounds(var60);
    var9.scrollRectToVisible(var60);
    var0.computeVisibleRect(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test499");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.firePropertyChange("", 0.5f, 100.0f);
    var0.enable(false);
    int var13 = var0.getDebugGraphicsOptions();
    var0.setRequestFocusEnabled(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var18.setForeground(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    java.awt.dnd.DropTarget var30 = var25.getDropTarget();
    var25.show(false);
    java.awt.Rectangle var33 = var25.getVisibleRect();
    var18.repaint(var33);
    java.awt.FocusTraversalPolicy var35 = var18.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    boolean var42 = var36.isFocusOwner();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    java.awt.Dimension var48 = var44.getPreferredSize();
    java.awt.Toolkit var49 = var44.getToolkit();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    var50.setName("");
    int var53 = var50.getX();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    var54.nextFocus();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    var59.setForeground(var64);
    var54.setBackground(var64);
    var50.setBackground(var64);
    var44.setForeground(var64);
    var36.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var64);
    var18.setBackground(var64);
    var0.setBackground(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest4.test500");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    var0.repaint(0L);
    var0.show();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    var10.setMaximumSize(var20);
    boolean var22 = var10.getVerifyInputWhenFocusTarget();
    boolean var23 = var10.isFontSet();
    boolean var24 = var10.getIgnoreRepaint();
    java.awt.Component var27 = var10.locate(1, 25);
    boolean var28 = var10.isLightweight();
    var10.move(100, 500);
    var10.resetKeyboardActions();
    boolean var33 = var10.isForegroundSet();
    java.awt.Insets var34 = var10.getInsets();
    java.awt.Insets var35 = var0.getInsets(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

}
