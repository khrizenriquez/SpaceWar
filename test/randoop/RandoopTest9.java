package randoop;

import junit.framework.*;

public class RandoopTest9 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test1");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var24 = var18.getMouseListeners();
    int var25 = var18.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var18.paintImmediately(var34);
    java.awt.Rectangle var36 = var18.getBounds();
    var0.scrollRectToVisible(var36);
    boolean var38 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test2");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.Insets var20 = var11.getInsets();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var27 = var21.getMouseListeners();
    java.awt.Dimension var28 = var21.getPreferredSize();
    java.util.Locale var29 = var21.getLocale();
    var21.setFocusable(true);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    var32.setRequestFocusEnabled(false);
    var32.setIgnoreRepaint(false);
    java.lang.String var39 = var32.toString();
    java.awt.Color var40 = var32.getBackground();
    var11.putClientProperty((java.lang.Object)var21, (java.lang.Object)var32);
    boolean var42 = var21.hasFocus();
    var21.layout();
    java.awt.event.ContainerListener[] var44 = var21.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var39.equals("SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test3");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    java.awt.Dimension var15 = var11.getPreferredSize();
    boolean var16 = var11.getVerifyInputWhenFocusTarget();
    java.awt.Component var19 = var11.findComponentAt(10, 1);
    var9.addKeyListener((java.awt.event.KeyListener)var11);
    java.awt.Dimension var21 = var11.getMinimumSize();
    var0.setMinimumSize(var21);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.repaint(1L);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    var31.setMaximumSize(var41);
    var24.setPreferredSize(var41);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    var45.setForeground(var50);
    javax.swing.InputMap var52 = var45.getInputMap();
    var24.setInputMap(1, var52);
    var0.setInputMap(1, var52);
    boolean var55 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test4");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.beans.PropertyChangeListener[] var8 = var0.getPropertyChangeListeners();
    var0.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setAlignmentY(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test5");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    boolean var27 = var0.isPaintingForPrint();
    int var28 = var0.getY();
    javax.swing.InputVerifier var29 = var0.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test6");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Dimension var15 = var0.getMinimumSize();
    var0.enable();
    int var17 = var0.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test7");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    var0.invalidate();
    var0.setRequestFocusEnabled(true);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var11.setForeground(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    var11.repaint(var26);
    java.awt.FocusTraversalPolicy var28 = var11.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var29 = var11.getInputMethodRequests();
    var11.layout();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var37.setForeground(var42);
    var31.setBackground(var42);
    var11.setForeground(var42);
    int var46 = var11.getWidth();
    int var47 = var0.getComponentZOrder((java.awt.Component)var11);
    boolean var48 = var0.isValidateRoot();
    javax.swing.border.Border var49 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test8");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.setFocusTraversalPolicyProvider(true);
    int var29 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test9");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1L), (-1L));
    java.awt.Container var25 = var0.getParent();
    java.awt.Component.BaselineResizeBehavior var26 = var0.getBaselineResizeBehavior();
    boolean var27 = var0.isDoubleBuffered();
    java.awt.peer.ComponentPeer var28 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test10");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    var0.transferFocusUpCycle();
    var0.reshape(2, 25, 0, 24);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    var13.setName("");
    java.awt.Graphics var16 = var13.getGraphics();
    java.awt.event.MouseMotionListener[] var17 = var13.getMouseMotionListeners();
    boolean var18 = var13.getIgnoreRepaint();
    var13.transferFocusBackward();
    var13.enable();
    java.awt.Container var21 = var13.getTopLevelAncestor();
    java.awt.Point var23 = var13.getMousePosition(true);
    boolean var24 = var13.isFocusTraversable();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    boolean var30 = var25.getVerifyInputWhenFocusTarget();
    java.awt.Component var33 = var25.findComponentAt(10, 1);
    boolean var34 = var25.requestDefaultFocus();
    java.awt.image.VolatileImage var37 = var25.createVolatileImage(0, 3);
    var25.resize(25, 25);
    boolean var41 = var25.isDisplayable();
    var0.add((java.awt.Component)var13, (java.lang.Object)var25);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    boolean var47 = var43.isDoubleBuffered();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    var43.show(false);
    boolean var51 = var43.isPaintingForPrint();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var58 = var52.getMouseListeners();
    int var59 = var52.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var60 = var52.getInputMethodRequests();
    var43.addKeyListener((java.awt.event.KeyListener)var52);
    boolean var62 = var43.isDisplayable();
    java.awt.Insets var63 = var43.getInsets();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    java.awt.Color var75 = var74.getBackground();
    var70.setForeground(var75);
    var64.setBackground(var75);
    java.awt.Point var78 = var64.location();
    java.awt.Point var79 = var43.getLocation(var78);
    java.awt.Component var80 = var0.findComponentAt(var78);
    SpaceWar.SpacePanel var81 = new SpaceWar.SpacePanel();
    java.awt.Color var82 = var81.getBackground();
    var81.repaint();
    java.awt.im.InputMethodRequests var84 = var81.getInputMethodRequests();
    var81.list();
    var81.setIgnoreRepaint(false);
    java.awt.Dimension var88 = var81.getSize();
    var0.addKeyListener((java.awt.event.KeyListener)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test11");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var6 = var2.getType();
    double var7 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 440.8263748791678d);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test12");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    var0.removeNotify();
    var0.requestFocus();
    var0.setFocusCycleRoot(false);
    var0.layout();
    var0.setSize(3, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test13");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    java.awt.Font var23 = var17.getFont();
    var17.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test14");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    var0.firePropertyChange("", (short)(-1), (short)(-1));
    java.awt.Component var13 = var0.getComponentAt(0, 100);
    int var14 = var0.getComponentCount();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.setInheritsPopupMenu(false);
    var15.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    var23.list();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    java.awt.dnd.DropTarget var34 = var29.getDropTarget();
    var29.show(false);
    java.awt.Rectangle var37 = var29.getVisibleRect();
    java.awt.Rectangle var38 = var23.getBounds(var37);
    javax.swing.JToolTip var39 = var23.createToolTip();
    var15.removeKeyListener((java.awt.event.KeyListener)var23);
    var15.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var43 = var15.getRegisteredKeyStrokes();
    var15.setOpaque(false);
    var15.move(3, 24);
    var0.removeKeyListener((java.awt.event.KeyListener)var15);
    var15.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test15");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.Graphics var5 = var0.getGraphics();
    boolean var6 = var0.isMinimumSizeSet();
    var0.hide();
    var0.setSize((-1), 499);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var17 = var11.getMouseListeners();
    int var18 = var11.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var19 = var11.getInputMethodRequests();
    java.lang.String var20 = var11.getToolTipText();
    boolean var21 = var11.isOpaque();
    var0.removeKeyListener((java.awt.event.KeyListener)var11);
    boolean var23 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test16");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    java.awt.event.HierarchyBoundsListener[] var7 = var0.getHierarchyBoundsListeners();
    javax.swing.TransferHandler var8 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test17");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isEnabled();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.Rectangle var45 = var30.getBounds(var44);
    javax.swing.JToolTip var46 = var30.createToolTip();
    var22.removeKeyListener((java.awt.event.KeyListener)var30);
    javax.swing.TransferHandler var48 = var22.getTransferHandler();
    var22.transferFocus();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    java.awt.Dimension var56 = var52.getPreferredSize();
    boolean var57 = var52.getVerifyInputWhenFocusTarget();
    java.awt.Component var60 = var52.findComponentAt(10, 1);
    var50.addKeyListener((java.awt.event.KeyListener)var52);
    java.awt.Dimension var62 = var52.getMinimumSize();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    var63.repaint();
    var63.setRequestFocusEnabled(false);
    var63.reshape(100, 0, 100, 0);
    var63.requestFocus();
    java.awt.Rectangle var74 = var63.getVisibleRect();
    var52.setBounds(var74);
    var22.scrollRectToVisible(var74);
    var10.setBounds(var74);
    var10.show();
    boolean var79 = var10.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test18");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    var8.setName("");
    java.awt.Graphics var11 = var8.getGraphics();
    java.awt.event.MouseMotionListener[] var12 = var8.getMouseMotionListeners();
    boolean var13 = var8.getIgnoreRepaint();
    var8.transferFocusBackward();
    java.awt.Cursor var15 = var8.getCursor();
    var0.setCursor(var15);
    java.beans.PropertyChangeListener[] var18 = var0.getPropertyChangeListeners("SpaceWar.SpacePanel[,100,0,100x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.lang.String var19 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test19");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.enable(false);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)false);
    boolean var23 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.enableInputMethods(true);
    boolean var26 = var0.isBackgroundSet();
    var0.firePropertyChange("hi!", 3, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test20");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    java.lang.String var13 = var0.getToolTipText();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    java.awt.Dimension var26 = var16.getMinimumSize();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    var27.setRequestFocusEnabled(false);
    var27.reshape(100, 0, 100, 0);
    var27.requestFocus();
    java.awt.Rectangle var38 = var27.getVisibleRect();
    var16.setBounds(var38);
    var0.setBounds(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test21");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    java.awt.Component var14 = var0.add((java.awt.Component)var9);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    java.awt.Point var24 = var15.getMousePosition(false);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    boolean var32 = var27.getVerifyInputWhenFocusTarget();
    java.awt.Component var35 = var27.findComponentAt(10, 1);
    var25.addKeyListener((java.awt.event.KeyListener)var27);
    var27.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    java.awt.Color var43 = var42.getBackground();
    var42.repaint();
    java.awt.im.InputMethodRequests var45 = var42.getInputMethodRequests();
    java.awt.GraphicsConfiguration var46 = var42.getGraphicsConfiguration();
    var27.remove((java.awt.Component)var42);
    java.awt.Font var48 = var42.getFont();
    var15.setFont(var48);
    var9.setFont(var48);
    var9.revalidate();
    var9.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test22");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getScore();
    int var5 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test23");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    java.awt.Rectangle var26 = var0.getVisibleRect();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.setInheritsPopupMenu(false);
    var27.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    java.awt.Color var36 = var35.getBackground();
    var35.repaint();
    java.awt.im.InputMethodRequests var38 = var35.getInputMethodRequests();
    java.awt.GraphicsConfiguration var39 = var35.getGraphicsConfiguration();
    java.awt.Component var40 = var27.add((java.awt.Component)var35);
    java.awt.Rectangle var41 = var27.getBounds();
    java.awt.Rectangle var42 = var0.getBounds(var41);
    boolean var44 = var0.areFocusTraversalKeysSet(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test24");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(514.6637810615505d, 475.3294093279198d, 505, 100);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test25");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    var0.setName("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test26");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    java.awt.Point var10 = var0.getMousePosition();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.updateUI();
    var14.enableInputMethods(true);
    var11.add((java.awt.Component)var12, (java.lang.Object)true);
    boolean var23 = var11.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var24 = var11.getHierarchyListeners();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var25.setForeground(var30);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    var25.repaint(var40);
    java.awt.FocusTraversalPolicy var42 = var25.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var43 = var25.getInputMethodRequests();
    var25.layout();
    boolean var45 = var25.isFocusTraversalPolicyProvider();
    java.lang.Object var46 = var11.getClientProperty((java.lang.Object)var45);
    java.awt.Dimension var47 = var11.getSize();
    var0.resize(var47);
    var0.setRequestFocusEnabled(true);
    javax.accessibility.AccessibleContext var51 = var0.getAccessibleContext();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 'a', '#');
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    boolean var60 = var56.isDoubleBuffered();
    var56.list();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    java.awt.dnd.DropTarget var67 = var62.getDropTarget();
    var62.show(false);
    java.awt.Rectangle var70 = var62.getVisibleRect();
    java.awt.Rectangle var71 = var56.getBounds(var70);
    javax.swing.JToolTip var72 = var56.createToolTip();
    var56.firePropertyChange("", false, false);
    var56.validate();
    var56.setFocusCycleRoot(true);
    int var80 = var56.countComponents();
    java.awt.event.KeyListener[] var81 = var56.getKeyListeners();
    java.awt.im.InputContext var82 = var56.getInputContext();
    java.awt.Point var83 = var56.location();
    var0.setLocation(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test27");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.requestDefaultFocus();
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test28");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    javax.swing.KeyStroke[] var26 = var0.getRegisteredKeyStrokes();
    var0.repaint(24, 100, 0, 100);
    boolean var32 = var0.requestFocusInWindow();
    boolean var33 = var0.isFocusTraversable();
    boolean var35 = var0.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test29");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    boolean var18 = var0.isLightweight();
    var0.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test30");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var26 = var20.getMouseListeners();
    int var27 = var20.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var28 = var20.getInputMethodRequests();
    var11.addKeyListener((java.awt.event.KeyListener)var20);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    boolean var37 = var20.isFocusCycleRoot((java.awt.Container)var30);
    var30.firePropertyChange("", 1L, 1L);
    var30.setVerifyInputWhenFocusTarget(true);
    var30.resize(25, 400);
    java.awt.event.ComponentListener[] var47 = var30.getComponentListeners();
    boolean var48 = var30.isBackgroundSet();
    boolean var49 = var30.isFontSet();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    var50.setName("");
    var50.enable(true);
    var50.enable();
    java.awt.Point var56 = var50.location();
    var50.repaint(0, 3, (-1), 1);
    var50.setBounds(25, 100, 1, 0);
    var0.putClientProperty((java.lang.Object)var49, (java.lang.Object)1);
    java.awt.Insets var68 = var0.getInsets();
    var0.setLocation(25, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test31");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    var8.setForeground(var13);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    java.awt.Rectangle var23 = var15.getVisibleRect();
    var8.repaint(var23);
    java.awt.FocusTraversalPolicy var25 = var8.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var26 = var8.getInputMethodRequests();
    var8.layout();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    java.awt.Color var39 = var38.getBackground();
    var34.setForeground(var39);
    var28.setBackground(var39);
    var8.setForeground(var39);
    int var43 = var8.getWidth();
    javax.swing.plaf.PanelUI var44 = var8.getUI();
    var0.setUI(var44);
    java.awt.event.InputMethodListener[] var46 = var0.getInputMethodListeners();
    boolean var47 = var0.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test32");


    SpaceWar.Text var4 = new SpaceWar.Text(408.3256835490439d, 396.44637138944637d, 0L, "SpaceWar.SpacePanel[,499,2,499x500,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test33");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.increasePower(3);
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test34");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    boolean var9 = var0.isFocusTraversalPolicyProvider();
    java.awt.im.InputContext var10 = var0.getInputContext();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)100, (short)1);
    var0.layout();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.setSize(500, 500);
    int var24 = var0.getComponentZOrder((java.awt.Component)var16);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    var25.list();
    float var31 = var25.getAlignmentY();
    java.awt.Insets var32 = var25.getInsets();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    java.awt.Dimension var45 = var25.getSize(var43);
    var25.setFocusTraversalKeysEnabled(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    java.awt.Toolkit var51 = var48.getToolkit();
    var48.setEnabled(false);
    var48.removeNotify();
    boolean var55 = var48.isDisplayable();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var56.repaint();
    var56.setRequestFocusEnabled(false);
    var56.reshape(100, 0, 100, 0);
    var56.requestFocus();
    java.awt.Rectangle var67 = var56.getVisibleRect();
    java.awt.Rectangle var68 = var56.getBounds();
    java.awt.im.InputMethodRequests var69 = var56.getInputMethodRequests();
    boolean var70 = var56.requestFocusInWindow();
    java.awt.Point var72 = var56.getMousePosition(false);
    var56.setDebugGraphicsOptions(1);
    java.awt.Graphics var75 = var56.getGraphics();
    var48.paintAll(var75);
    var25.printAll(var75);
    var16.paintAll(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test35");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.setInheritsPopupMenu(false);
    var24.move(10, 10);
    var24.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.event.KeyListener[] var37 = var24.getKeyListeners();
    var9.removeKeyListener((java.awt.event.KeyListener)var24);
    java.awt.Dimension var39 = var24.minimumSize();
    java.awt.LayoutManager var40 = var24.getLayout();
    var24.setDebugGraphicsOptions(505);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test36");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    java.awt.Container var18 = var3.getFocusCycleRootAncestor();
    var3.setInheritsPopupMenu(false);
    java.awt.Dimension var21 = var3.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test37");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(true);
    int var14 = var0.getBaseline(0, 399);
    boolean var15 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    boolean var24 = var16.isPaintingForPrint();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var31 = var25.getMouseListeners();
    int var32 = var25.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var33 = var25.getInputMethodRequests();
    var16.addKeyListener((java.awt.event.KeyListener)var25);
    boolean var35 = var16.isDisplayable();
    java.awt.Insets var36 = var16.getInsets();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    var43.setForeground(var48);
    var37.setBackground(var48);
    java.awt.Point var51 = var37.location();
    java.awt.Point var52 = var16.getLocation(var51);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    java.awt.Dimension var63 = var59.getPreferredSize();
    var53.setMaximumSize(var63);
    boolean var65 = var53.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var66 = var53.getToolkit();
    java.awt.Dimension var67 = var53.minimumSize();
    var16.setNextFocusableComponent((java.awt.Component)var53);
    SpaceWar.Bullet var72 = new SpaceWar.Bullet(1.0d, 10, 400);
    double var73 = var72.getR();
    var0.add((java.awt.Component)var16, (java.lang.Object)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 5.0d);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test38");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    boolean var7 = var0.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    var8.setForeground(var13);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    java.awt.Rectangle var23 = var15.getVisibleRect();
    var8.repaint(var23);
    java.awt.FocusTraversalPolicy var25 = var8.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    boolean var32 = var26.isFocusOwner();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    java.awt.Dimension var38 = var34.getPreferredSize();
    java.awt.Toolkit var39 = var34.getToolkit();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    var40.setName("");
    int var43 = var40.getX();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    java.awt.Color var54 = var53.getBackground();
    var49.setForeground(var54);
    var44.setBackground(var54);
    var40.setBackground(var54);
    var34.setForeground(var54);
    var26.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var54);
    var8.setBackground(var54);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    boolean var65 = var61.isDoubleBuffered();
    java.awt.dnd.DropTarget var66 = var61.getDropTarget();
    var61.show(false);
    boolean var69 = var61.isPaintingForPrint();
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    float var73 = var72.getAlignmentX();
    var72.setVisible(false);
    java.awt.Dimension var76 = var72.getPreferredSize();
    boolean var77 = var72.getVerifyInputWhenFocusTarget();
    java.awt.Component var80 = var72.findComponentAt(10, 1);
    var70.addKeyListener((java.awt.event.KeyListener)var72);
    java.awt.Dimension var82 = var72.getMinimumSize();
    var61.setMinimumSize(var82);
    java.awt.Dimension var84 = var8.getSize(var82);
    var8.doLayout();
    java.awt.Component var86 = var0.add((java.awt.Component)var8);
    boolean var87 = var8.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test39");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Font var5 = var0.getFont();
    java.awt.Cursor var6 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test40");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    java.awt.Toolkit var43 = var38.getToolkit();
    boolean var44 = var38.isFocusable();
    javax.swing.KeyStroke[] var45 = var38.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    java.awt.Dimension var52 = var48.getPreferredSize();
    boolean var53 = var48.getVerifyInputWhenFocusTarget();
    java.awt.Component var56 = var48.findComponentAt(10, 1);
    var46.addKeyListener((java.awt.event.KeyListener)var48);
    var48.repaint(100, (-1), (-1), 1);
    boolean var63 = var38.isAncestorOf((java.awt.Component)var48);
    var38.setFocusable(false);
    boolean var66 = var7.isAncestorOf((java.awt.Component)var38);
    java.awt.event.HierarchyListener[] var67 = var38.getHierarchyListeners();
    java.awt.Dimension var68 = var38.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test41");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    var0.show();
    boolean var13 = var0.isOpaque();
    boolean var14 = var0.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test42");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.Dimension var7 = var0.getPreferredSize();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    boolean var11 = var8.isPreferredSizeSet();
    var8.firePropertyChange("", (short)1, (short)0);
    boolean var16 = var8.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var17 = var8.getPeer();
    java.awt.ComponentOrientation var18 = var8.getComponentOrientation();
    var8.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var21 = var8.requestFocusInWindow();
    boolean var22 = var0.isFocusCycleRoot((java.awt.Container)var8);
    var8.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test43");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    int var4 = var0.getLives();
    var0.setScore(0);
    int var7 = var0.getPowerLevel();
    int var8 = var0.getR();
    var0.setUp(false);
    var0.setUp(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 25);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test44");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.getInheritsPopupMenu();
    javax.swing.event.AncestorListener[] var18 = var1.getAncestorListeners();
    var1.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test45");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.firePropertyChange("hi!", false, true);
    javax.swing.ActionMap var14 = var0.getActionMap();
    var0.setDebugGraphicsOptions(10);
    boolean var17 = var0.isShowing();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    boolean var20 = var18.hasFocus();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.reshape((-1), 1, (-1), 10);
    var21.disable();
    java.awt.LayoutManager var32 = var21.getLayout();
    var21.setVisible(false);
    var18.remove((java.awt.Component)var21);
    var21.repaint();
    boolean var37 = var21.hasFocus();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    boolean var44 = var38.isFocusTraversalPolicyProvider();
    var0.putClientProperty((java.lang.Object)var21, (java.lang.Object)var44);
    java.awt.event.HierarchyBoundsListener[] var46 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test46");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    boolean var23 = var0.isValid();
    var0.setFocusCycleRoot(true);
    int var26 = var0.getComponentCount();
    java.awt.Point var28 = var0.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test47");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    java.awt.Rectangle var26 = var0.getVisibleRect();
    int var27 = var0.getDebugGraphicsOptions();
    java.awt.event.HierarchyListener[] var28 = var0.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test48");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    java.awt.Rectangle var9 = var0.getBounds();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var16 = var10.getUI();
    var10.disable();
    java.awt.im.InputContext var18 = var10.getInputContext();
    var10.enableInputMethods(false);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    var21.enable(true);
    var21.enable();
    java.awt.Point var27 = var21.location();
    var21.repaint(0, 3, (-1), 1);
    var21.setBounds(25, 100, 1, 0);
    java.awt.Insets var38 = var21.getInsets();
    java.awt.peer.ComponentPeer var39 = var21.getPeer();
    javax.swing.KeyStroke[] var40 = var21.getRegisteredKeyStrokes();
    boolean var41 = var21.getAutoscrolls();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    java.awt.Color var43 = var42.getBackground();
    var42.repaint();
    var42.setRequestFocusEnabled(false);
    var42.reshape(100, 0, 100, 0);
    var42.requestFocus();
    java.awt.Rectangle var53 = var42.getVisibleRect();
    java.awt.Rectangle var54 = var42.getBounds();
    java.awt.im.InputMethodRequests var55 = var42.getInputMethodRequests();
    boolean var56 = var42.requestFocusInWindow();
    java.awt.Point var58 = var42.getMousePosition(false);
    var42.setDebugGraphicsOptions(1);
    java.awt.Graphics var61 = var42.getGraphics();
    var21.paintComponents(var61);
    var10.paintComponents(var61);
    var0.paintAll(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test49");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    java.awt.Point var10 = var0.getMousePosition();
    var0.revalidate();
    java.awt.Insets var12 = var0.getInsets();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var19 = var13.getUI();
    java.awt.im.InputMethodRequests var20 = var13.getInputMethodRequests();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.updateUI();
    var21.enableInputMethods(true);
    var21.setSize((-1), 1);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var13.add((java.awt.Component)var21, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var38 = var13.getKeyListeners();
    var13.repaint(3, 1, 25, 0);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    java.awt.Dimension var48 = var44.getPreferredSize();
    boolean var49 = var44.getVerifyInputWhenFocusTarget();
    java.awt.Dimension var50 = var44.size();
    var13.resize(var50);
    var0.setPreferredSize(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test50");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    int var4 = var0.getLives();
    var0.setLeft(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test51");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.updateUI();
    var27.enableInputMethods(true);
    java.lang.String var35 = var27.toString();
    java.awt.FocusTraversalPolicy var36 = var27.getFocusTraversalPolicy();
    var15.removeKeyListener((java.awt.event.KeyListener)var27);
    java.awt.peer.ComponentPeer var38 = var27.getPeer();
    boolean var39 = var27.getAutoscrolls();
    var27.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var35.equals("SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test52");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    java.util.Set var11 = var0.getFocusTraversalKeys(3);
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', ' ');
    javax.swing.event.AncestorListener[] var16 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test53");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    var8.repaint();
    java.awt.im.InputMethodRequests var11 = var8.getInputMethodRequests();
    java.awt.GraphicsConfiguration var12 = var8.getGraphicsConfiguration();
    java.awt.Component var13 = var0.add((java.awt.Component)var8);
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test54");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    int var7 = var0.getWidth();
    boolean var8 = var0.isMinimumSizeSet();
    java.awt.image.BufferedImage var10 = var0.loadImg("SpaceWar.SpacePanel[,100,0,100x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test55");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(10, 10.0d, 10.0d);
    double var4 = var3.getY();
    boolean var5 = var3.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test56");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.Dimension var5 = var0.getSize();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var11 = var6.getUI();
    java.awt.Color var12 = var6.getBackground();
    var0.setBackground(var12);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.reshape((-1), 1, (-1), 10);
    var14.disable();
    java.awt.LayoutManager var25 = var14.getLayout();
    java.awt.Container var26 = var14.getParent();
    boolean var27 = var14.isOptimizedDrawingEnabled();
    var14.grabFocus();
    int var29 = var14.getHeight();
    var0.addKeyListener((java.awt.event.KeyListener)var14);
    java.lang.String var31 = var14.toString();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    var32.setMaximumSize(var42);
    boolean var44 = var32.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var45 = var32.getAccessibleContext();
    boolean var46 = var32.isDoubleBuffered();
    boolean var47 = var32.getAutoscrolls();
    var32.repaint(10L, (-1), 25, (-1), 100);
    var32.updateUI();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var56 = var14.add((java.awt.Component)var32, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var31.equals("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test57");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    javax.swing.plaf.PanelUI var3 = var0.getUI();
    var0.transferFocusDownCycle();
    java.lang.String var5 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test58");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.paintImmediately((-1), 10, 100, 25);
    var0.hide();
    java.awt.Point var18 = var0.getMousePosition(true);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    java.awt.im.InputMethodRequests var22 = var19.getInputMethodRequests();
    var19.setDoubleBuffered(true);
    var19.setInheritsPopupMenu(false);
    boolean var27 = var19.isFocusTraversalPolicySet();
    var19.transferFocusUpCycle();
    java.awt.image.BufferedImage var30 = var19.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    var31.setInheritsPopupMenu(false);
    boolean var37 = var31.isDoubleBuffered();
    boolean var38 = var31.isMinimumSizeSet();
    java.awt.Font var39 = var31.getFont();
    java.awt.FontMetrics var40 = var19.getFontMetrics(var39);
    var0.setFont(var39);
    java.lang.String var42 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test59");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    boolean var23 = var0.isValid();
    var0.setFocusCycleRoot(true);
    java.awt.event.KeyListener[] var26 = var0.getKeyListeners();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    java.awt.Color var29 = var28.getBackground();
    var28.repaint();
    java.awt.im.InputMethodRequests var31 = var28.getInputMethodRequests();
    var28.setDoubleBuffered(true);
    var28.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var36 = var28.getUI();
    java.util.Set var38 = var28.getFocusTraversalKeys(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(100, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test60");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.event.MouseWheelListener[] var8 = var0.getMouseWheelListeners();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var9.setForeground(var14);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    java.awt.Rectangle var24 = var16.getVisibleRect();
    var9.repaint(var24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var32 = var26.getMouseListeners();
    java.awt.Dimension var33 = var26.getPreferredSize();
    java.util.Locale var34 = var26.getLocale();
    var9.setLocale(var34);
    java.util.Locale var36 = var9.getLocale();
    var0.setLocale(var36);
    float var38 = var0.getAlignmentX();
    var0.transferFocusBackward();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.setInheritsPopupMenu(false);
    var40.move(10, 10);
    var40.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var40.removeAll();
    var40.setInheritsPopupMenu(true);
    boolean var58 = var40.inside(0, 500);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    var59.setName("");
    java.awt.Toolkit var62 = var59.getToolkit();
    var59.setEnabled(false);
    var59.removeNotify();
    boolean var66 = var59.isDisplayable();
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    java.awt.Color var68 = var67.getBackground();
    var67.repaint();
    var67.setRequestFocusEnabled(false);
    var67.reshape(100, 0, 100, 0);
    var67.requestFocus();
    java.awt.Rectangle var78 = var67.getVisibleRect();
    java.awt.Rectangle var79 = var67.getBounds();
    java.awt.im.InputMethodRequests var80 = var67.getInputMethodRequests();
    boolean var81 = var67.requestFocusInWindow();
    java.awt.Point var83 = var67.getMousePosition(false);
    var67.setDebugGraphicsOptions(1);
    java.awt.Graphics var86 = var67.getGraphics();
    var59.paintAll(var86);
    var40.printAll(var86);
    var0.paint(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test61");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.setFiring(false);
    var0.increasePower(25);
    int var11 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test62");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.repaint(1L);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    var32.setMaximumSize(var42);
    var25.setPreferredSize(var42);
    var0.setSize(var42);
    javax.swing.plaf.PanelUI var46 = var0.getUI();
    var0.layout();
    boolean var48 = var0.isEnabled();
    var0.firePropertyChange("SpaceWar.SpacePanel[,499,2,499x500,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)10, (short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test63");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setBackground(var10);
    javax.swing.plaf.PanelUI var13 = var0.getUI();
    boolean var14 = var0.isFocusTraversalPolicySet();
    java.awt.Dimension var15 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test64");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getLives();
    int var4 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test65");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    boolean var42 = var37.getVerifyInputWhenFocusTarget();
    java.awt.Component var45 = var37.findComponentAt(10, 1);
    boolean var46 = var37.requestDefaultFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var49 = var37.getLocation();
    java.awt.Point var50 = var0.getLocation(var49);
    var0.enable(false);
    boolean var53 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test66");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    var16.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    var16.remove((java.awt.Component)var31);
    java.awt.Font var37 = var31.getFont();
    var0.setFont(var37);
    boolean var39 = var0.isManagingFocus();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    var40.requestFocus();
    java.lang.Object var46 = var0.getClientProperty((java.lang.Object)var40);
    java.awt.Dimension var47 = var40.getMaximumSize();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    var49.list();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    boolean var59 = var55.isDoubleBuffered();
    java.awt.dnd.DropTarget var60 = var55.getDropTarget();
    var55.show(false);
    java.awt.Rectangle var63 = var55.getVisibleRect();
    java.awt.Rectangle var64 = var49.getBounds(var63);
    javax.swing.JToolTip var65 = var49.createToolTip();
    java.awt.Graphics var66 = var49.getGraphics();
    var49.setAutoscrolls(false);
    boolean var69 = var49.requestFocusInWindow();
    javax.swing.InputMap var70 = var49.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var40.setInputMap(24, var70);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test67");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    boolean var15 = var0.getFocusTraversalKeysEnabled();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)0, (byte)1);
    boolean var20 = var0.getVerifyInputWhenFocusTarget();
    javax.swing.border.Border var21 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test68");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var16 = var0.isRequestFocusEnabled();
    var0.setVerifyInputWhenFocusTarget(false);
    boolean var19 = var0.isLightweight();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    var20.setName("");
    java.awt.Graphics var23 = var20.getGraphics();
    java.awt.event.MouseMotionListener[] var24 = var20.getMouseMotionListeners();
    boolean var25 = var20.getIgnoreRepaint();
    var20.transferFocusBackward();
    var20.enable();
    java.awt.Container var28 = var20.getTopLevelAncestor();
    var20.invalidate();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.updateUI();
    var30.enableInputMethods(true);
    java.lang.String var38 = var30.toString();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    var39.show(false);
    java.awt.Rectangle var47 = var39.getVisibleRect();
    java.awt.image.BufferedImage var49 = var39.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var50 = var39.getComponentOrientation();
    boolean var51 = var39.isPaintingTile();
    boolean var52 = var39.isOptimizedDrawingEnabled();
    int var53 = var30.getComponentZOrder((java.awt.Component)var39);
    javax.swing.InputMap var54 = var39.getInputMap();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    boolean var57 = var55.hasFocus();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    var58.nextFocus();
    var58.reshape((-1), 1, (-1), 10);
    var58.disable();
    java.awt.LayoutManager var69 = var58.getLayout();
    var58.setVisible(false);
    var55.remove((java.awt.Component)var58);
    java.beans.VetoableChangeListener[] var73 = var55.getVetoableChangeListeners();
    var20.putClientProperty((java.lang.Object)var54, (java.lang.Object)var55);
    var0.addKeyListener((java.awt.event.KeyListener)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var38,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var38.equals("SpaceWar.SpacePanel[,0,0,0var38,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test69");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.beans.PropertyChangeListener[] var15 = var1.getPropertyChangeListeners();
    java.awt.FocusTraversalPolicy var16 = var1.getFocusTraversalPolicy();
    var1.show(false);
    boolean var19 = var1.isEnabled();
    java.awt.Cursor var20 = var1.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test70");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setAutoscrolls(false);
    var19.setAlignmentX(100.0f);
    java.awt.Cursor var35 = var19.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test71");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.move((-1), 100);
    var19.validate();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var32.setForeground(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    var39.show(false);
    java.awt.Rectangle var47 = var39.getVisibleRect();
    var32.repaint(var47);
    java.awt.FocusTraversalPolicy var49 = var32.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var56 = var50.getUI();
    java.awt.im.InputMethodRequests var57 = var50.getInputMethodRequests();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    var58.nextFocus();
    var58.updateUI();
    var58.enableInputMethods(true);
    var58.setSize((-1), 1);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var50.add((java.awt.Component)var58, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var75 = var58.getComponentOrientation();
    java.beans.VetoableChangeListener[] var76 = var58.getVetoableChangeListeners();
    int var77 = var58.getHeight();
    javax.swing.ActionMap var78 = var58.getActionMap();
    var32.setActionMap(var78);
    var19.setActionMap(var78);
    javax.swing.InputMap var81 = var19.getInputMap();
    javax.swing.plaf.PanelUI var82 = var19.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test72");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    java.awt.dnd.DropTarget var18 = var0.getDropTarget();
    javax.swing.TransferHandler var19 = var0.getTransferHandler();
    java.awt.Point var20 = var0.getMousePosition();
    int var21 = var0.getWidth();
    boolean var22 = var0.isOpaque();
    java.awt.Component[] var23 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test73");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.setInheritsPopupMenu(false);
    var24.move(10, 10);
    var24.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.event.KeyListener[] var37 = var24.getKeyListeners();
    var9.removeKeyListener((java.awt.event.KeyListener)var24);
    java.awt.Point var39 = var9.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test74");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPowerLevel();
    var0.setLeft(false);
    int var5 = var0.getRequiredPower();
    var0.setFiring(false);
    var0.setUp(false);
    var0.setScore(505);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test75");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1L), (-1L));
    var0.setVisible(false);
    var0.setIgnoreRepaint(false);
    var0.firePropertyChange("", 1.0f, 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test76");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    var0.setLocation(10, 100);
    int var28 = var0.getX();
    boolean var29 = var0.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test77");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.enable(false);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)false);
    java.beans.PropertyChangeListener[] var23 = var0.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test78");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    java.awt.Container var19 = var9.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.reshape((-1), 1, (-1), 10);
    var20.disable();
    java.awt.LayoutManager var31 = var20.getLayout();
    java.awt.Container var32 = var20.getParent();
    java.beans.PropertyChangeListener[] var34 = var20.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var9.setNextFocusableComponent((java.awt.Component)var20);
    java.awt.Font var36 = var9.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test79");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    boolean var7 = var0.requestFocusInWindow();
    var0.setAlignmentY(100.0f);
    java.awt.Container var10 = var0.getFocusCycleRootAncestor();
    javax.swing.TransferHandler var11 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test80");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    int var12 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test81");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    var15.nextFocus();
    var15.updateUI();
    int var29 = var15.getWidth();
    var15.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test82");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    float var12 = var0.getAlignmentY();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.reshape((-1), 1, (-1), 10);
    java.util.Set var24 = var13.getFocusTraversalKeys(3);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var25.setForeground(var30);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    var25.repaint(var40);
    java.awt.FocusTraversalPolicy var42 = var25.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    boolean var49 = var43.isFocusOwner();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    java.awt.Dimension var55 = var51.getPreferredSize();
    java.awt.Toolkit var56 = var51.getToolkit();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    var57.setName("");
    int var60 = var57.getX();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    var61.nextFocus();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    java.awt.Color var71 = var70.getBackground();
    var66.setForeground(var71);
    var61.setBackground(var71);
    var57.setBackground(var71);
    var51.setForeground(var71);
    var43.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var71);
    var25.setBackground(var71);
    SpaceWar.SpacePanel var78 = new SpaceWar.SpacePanel();
    float var79 = var78.getAlignmentX();
    var78.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var84 = new SpaceWar.SpacePanel();
    float var85 = var84.getAlignmentX();
    var84.setVisible(false);
    SpaceWar.SpacePanel var88 = new SpaceWar.SpacePanel();
    java.awt.Color var89 = var88.getBackground();
    var84.setForeground(var89);
    var78.setBackground(var89);
    java.awt.Point var92 = var78.location();
    java.awt.Point var93 = var25.getLocation(var92);
    java.awt.Component var94 = var13.findComponentAt(var92);
    boolean var95 = var0.contains(var92);
    java.awt.Component var96 = var0.getNextFocusableComponent();
    java.awt.Dimension var97 = var0.getMinimumSize();
    boolean var98 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test83");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.beans.VetoableChangeListener[] var3 = var0.getVetoableChangeListeners();
    var0.paintImmediately(10, 0, (-1), 25);
    boolean var9 = var0.getInheritsPopupMenu();
    var0.resize(500, 10);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.setInheritsPopupMenu(false);
    var13.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    var21.list();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    java.awt.Rectangle var36 = var21.getBounds(var35);
    javax.swing.JToolTip var37 = var21.createToolTip();
    var13.removeKeyListener((java.awt.event.KeyListener)var21);
    javax.swing.TransferHandler var39 = var13.getTransferHandler();
    var13.setFocusTraversalPolicyProvider(true);
    var0.setNextFocusableComponent((java.awt.Component)var13);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    var43.setForeground(var48);
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    boolean var54 = var50.isDoubleBuffered();
    java.awt.dnd.DropTarget var55 = var50.getDropTarget();
    var50.show(false);
    java.awt.Rectangle var58 = var50.getVisibleRect();
    var43.repaint(var58);
    java.awt.Component.BaselineResizeBehavior var60 = var43.getBaselineResizeBehavior();
    boolean var62 = var43.requestFocus(false);
    var43.removeAll();
    var13.addKeyListener((java.awt.event.KeyListener)var43);
    java.awt.Font var65 = var43.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test84");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var2.explode();
    var2.update();
    boolean var8 = var2.isDead();
    double var9 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test85");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    float var12 = var0.getAlignmentY();
    java.awt.Dimension var13 = var0.minimumSize();
    javax.swing.InputVerifier var14 = var0.getInputVerifier();
    java.lang.String var15 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "SpaceWar.SpacePanel[,100,0,100var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var15.equals("SpaceWar.SpacePanel[,100,0,100var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test86");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setFiring(true);
    var0.loseLife();
    var0.setUp(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test87");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.transferFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    boolean var35 = var30.getVerifyInputWhenFocusTarget();
    java.awt.Component var38 = var30.findComponentAt(10, 1);
    var28.addKeyListener((java.awt.event.KeyListener)var30);
    java.awt.Dimension var40 = var30.getMinimumSize();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    var41.setRequestFocusEnabled(false);
    var41.reshape(100, 0, 100, 0);
    var41.requestFocus();
    java.awt.Rectangle var52 = var41.getVisibleRect();
    var30.setBounds(var52);
    var0.scrollRectToVisible(var52);
    boolean var55 = var0.isDisplayable();
    var0.revalidate();
    java.awt.event.MouseListener[] var57 = var0.getMouseListeners();
    javax.swing.ActionMap var58 = var0.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test88");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    float var18 = var0.getAlignmentX();
    java.awt.image.VolatileImage var21 = var0.createVolatileImage(25, 1);
    java.beans.PropertyChangeListener[] var23 = var0.getPropertyChangeListeners("PanelUI");
    boolean var24 = var0.isPaintingForPrint();
    boolean var25 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    java.awt.Toolkit var35 = var26.getToolkit();
    java.beans.PropertyChangeListener[] var36 = var26.getPropertyChangeListeners();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    var37.nextFocus();
    var37.repaint(1L);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    var44.updateUI();
    var44.enableInputMethods(true);
    var44.enableInputMethods(true);
    var37.addKeyListener((java.awt.event.KeyListener)var44);
    java.awt.event.MouseMotionListener[] var55 = var37.getMouseMotionListeners();
    var0.putClientProperty((java.lang.Object)var26, (java.lang.Object)var55);
    boolean var57 = var0.isPreferredSizeSet();
    java.awt.Component var58 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test89");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    int var4 = var0.getLives();
    var0.setScore(0);
    int var7 = var0.getPowerLevel();
    int var8 = var0.getR();
    int var9 = var0.getY();
    int var10 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test90");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var10 = var0.getAncestorListeners();
    var0.setOpaque(true);
    java.awt.Insets var13 = var0.getInsets();
    java.awt.Color var14 = var0.getForeground();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    java.awt.im.InputMethodRequests var18 = var15.getInputMethodRequests();
    int var19 = var15.countComponents();
    java.awt.event.ComponentListener[] var20 = var15.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.removeNotify();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    var24.list();
    float var30 = var24.getAlignmentY();
    java.awt.Insets var31 = var24.getInsets();
    java.awt.Insets var32 = var21.getInsets(var31);
    java.awt.Insets var33 = var15.getInsets(var32);
    javax.swing.JPopupMenu var34 = var15.getComponentPopupMenu();
    var0.addKeyListener((java.awt.event.KeyListener)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test91");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    int var7 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test92");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Graphics var3 = var0.getGraphics();
    java.awt.event.MouseMotionListener[] var4 = var0.getMouseMotionListeners();
    boolean var5 = var0.getIgnoreRepaint();
    var0.transferFocusBackward();
    var0.enable();
    java.lang.Object var8 = var0.getTreeLock();
    java.awt.Rectangle var9 = var0.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test93");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    java.awt.Container var19 = var9.getFocusCycleRootAncestor();
    boolean var20 = var9.hasFocus();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.setInheritsPopupMenu(false);
    boolean var27 = var21.isDoubleBuffered();
    boolean var28 = var21.isMinimumSizeSet();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    java.awt.Dimension var39 = var35.getPreferredSize();
    var29.setMaximumSize(var39);
    boolean var41 = var29.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var42 = var29.getAccessibleContext();
    boolean var43 = var29.isDoubleBuffered();
    java.awt.Rectangle var44 = var29.getVisibleRect();
    var21.setBounds(var44);
    java.lang.Object var46 = var9.getClientProperty((java.lang.Object)var21);
    java.awt.Cursor var47 = var9.getCursor();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    java.awt.Color var53 = var52.getBackground();
    var48.setForeground(var53);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    boolean var59 = var55.isDoubleBuffered();
    java.awt.dnd.DropTarget var60 = var55.getDropTarget();
    var55.show(false);
    java.awt.Rectangle var63 = var55.getVisibleRect();
    var48.repaint(var63);
    java.awt.Component.BaselineResizeBehavior var65 = var48.getBaselineResizeBehavior();
    boolean var67 = var48.requestFocus(false);
    var48.removeAll();
    javax.swing.plaf.PanelUI var69 = var48.getUI();
    var9.setUI(var69);
    java.awt.Component[] var71 = var9.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test94");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getPower();
    boolean var5 = var0.isDead();
    int var6 = var0.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test95");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    int var4 = var2.getR();
    int var5 = var2.getType();
    int var6 = var2.getRank();
    var2.update();
    int var8 = var2.getR();
    double var9 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 528.4541321783861d);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test96");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.reshape((-1), 1, (-1), 10);
    var16.disable();
    java.awt.LayoutManager var27 = var16.getLayout();
    boolean var30 = var16.contains((-1), 0);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    var31.nextFocus();
    var31.updateUI();
    var31.enableInputMethods(true);
    var31.setSize((-1), 1);
    java.awt.Component var42 = var16.add((java.awt.Component)var31);
    var31.paintImmediately(100, 25, 2, 2);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    java.awt.Toolkit var51 = var48.getToolkit();
    var48.setEnabled(false);
    var48.removeNotify();
    boolean var55 = var48.isDisplayable();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var56.repaint();
    var56.setRequestFocusEnabled(false);
    var56.reshape(100, 0, 100, 0);
    var56.requestFocus();
    java.awt.Rectangle var67 = var56.getVisibleRect();
    java.awt.Rectangle var68 = var56.getBounds();
    java.awt.im.InputMethodRequests var69 = var56.getInputMethodRequests();
    boolean var70 = var56.requestFocusInWindow();
    java.awt.Point var72 = var56.getMousePosition(false);
    var56.setDebugGraphicsOptions(1);
    java.awt.Graphics var75 = var56.getGraphics();
    var48.paintAll(var75);
    var31.paintComponents(var75);
    var1.printAll(var75);
    java.awt.Dimension var79 = var1.getMinimumSize();
    java.awt.Component var80 = var1.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test97");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    var0.show(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test98");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    var0.setLocation(10, 100);
    int var28 = var0.getX();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.setInheritsPopupMenu(false);
    boolean var35 = var29.isDoubleBuffered();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    var36.reshape((-1), 1, (-1), 10);
    var36.disable();
    java.awt.LayoutManager var47 = var36.getLayout();
    var29.setLayout(var47);
    var0.setLayout(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test99");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    var11.list();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    java.awt.Rectangle var26 = var11.getBounds(var25);
    javax.swing.JToolTip var27 = var11.createToolTip();
    java.awt.Dimension var28 = var11.minimumSize();
    boolean var30 = var11.requestFocus(false);
    java.awt.Dimension var31 = var11.getMaximumSize();
    var0.setPreferredSize(var31);
    boolean var33 = var0.isOpaque();
    javax.swing.KeyStroke[] var34 = var0.getRegisteredKeyStrokes();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test100");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    boolean var44 = var36.isPaintingForPrint();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var51 = var45.getMouseListeners();
    int var52 = var45.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var53 = var45.getInputMethodRequests();
    var36.addKeyListener((java.awt.event.KeyListener)var45);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    boolean var59 = var55.isDoubleBuffered();
    var55.list();
    float var61 = var55.getAlignmentY();
    boolean var62 = var45.isFocusCycleRoot((java.awt.Container)var55);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    var64.nextFocus();
    var64.updateUI();
    java.awt.Component var70 = var45.add("", (java.awt.Component)var64);
    java.awt.Component var71 = var18.add("", (java.awt.Component)var64);
    java.lang.Object var72 = var18.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test101");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getY();
    double var5 = var3.getX();
    double var6 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test102");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.setFiring(true);
    var0.update();
    int var4 = var0.getX();
    var0.loseLife();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 400);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test103");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    int var10 = var0.getBaseline(1, 1);
    var0.show(false);
    javax.swing.JRootPane var13 = var0.getRootPane();
    boolean var14 = var0.isPreferredSizeSet();
    java.lang.String var15 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test104");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    var0.setScore(500);
    int var14 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 399);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test105");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    float var18 = var0.getAlignmentY();
    java.awt.Component var21 = var0.getComponentAt(2, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test106");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.isCursorSet();
    java.awt.Dimension var10 = var0.getMinimumSize();
    var0.setFocusCycleRoot(true);
    var0.show(false);
    java.lang.String var15 = var0.getUIClassID();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    java.awt.Color var21 = var20.getBackground();
    var16.setForeground(var21);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    java.awt.Rectangle var31 = var23.getVisibleRect();
    var16.repaint(var31);
    java.awt.FocusTraversalPolicy var33 = var16.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.firePropertyChange("", (-1), 1);
    boolean var40 = var34.isFocusOwner();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    var34.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var62);
    var16.setBackground(var62);
    javax.swing.JToolTip var69 = var16.createToolTip();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, true);
    java.awt.Component var74 = var0.add((java.awt.Component)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test107");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    int var3 = var0.getY();
    int var4 = var0.getX();
    int var5 = var0.getR();
    java.awt.image.BufferedImage var7 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test108");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    int var18 = var0.getHeight();
    boolean var19 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test109");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    int var50 = var36.getComponentCount();
    boolean var51 = var36.requestDefaultFocus();
    boolean var52 = var36.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test110");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    var1.show(false);
    var1.firePropertyChange("PanelUI", false, false);
    java.awt.ComponentOrientation var25 = var1.getComponentOrientation();
    boolean var26 = var1.isFocusTraversalPolicyProvider();
    var1.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test111");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    boolean var44 = var42.hasFocus();
    boolean var45 = var42.isPreferredSizeSet();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var46.repaint();
    var46.setRequestFocusEnabled(false);
    int var51 = var42.getComponentZOrder((java.awt.Component)var46);
    boolean var52 = var42.requestDefaultFocus();
    javax.swing.border.Border var53 = var42.getBorder();
    int var54 = var0.getComponentZOrder((java.awt.Component)var42);
    javax.accessibility.AccessibleContext var55 = var42.getAccessibleContext();
    int var56 = var42.getY();
    boolean var58 = var42.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test112");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var0.setMaximumSize(var17);
    java.awt.Dimension var19 = var0.preferredSize();
    boolean var20 = var0.getVerifyInputWhenFocusTarget();
    var0.validate();
    boolean var22 = var0.isVisible();
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test113");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var36 = var30.getUI();
    java.awt.im.InputMethodRequests var37 = var30.getInputMethodRequests();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.setSize((-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var30.add((java.awt.Component)var38, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    var55.setInheritsPopupMenu(false);
    boolean var61 = var55.isDoubleBuffered();
    boolean var62 = var55.isMinimumSizeSet();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    java.awt.Dimension var73 = var69.getPreferredSize();
    var63.setMaximumSize(var73);
    boolean var75 = var63.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var76 = var63.getAccessibleContext();
    boolean var77 = var63.isDoubleBuffered();
    java.awt.Rectangle var78 = var63.getVisibleRect();
    var55.setBounds(var78);
    java.awt.Rectangle var80 = var30.getBounds(var78);
    var0.computeVisibleRect(var78);
    java.awt.image.ColorModel var82 = var0.getColorModel();
    var0.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test114");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Rectangle var15 = var0.bounds();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.reshape((-1), 1, (-1), 10);
    var16.disable();
    boolean var27 = var16.isFocusable();
    java.awt.Dimension var28 = var16.getSize();
    var0.setSize(var28);
    java.awt.Container var30 = var0.getFocusCycleRootAncestor();
    boolean var31 = var0.getAutoscrolls();
    java.awt.event.InputMethodListener[] var32 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test115");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    var17.hit();
    int var23 = var17.getR();
    int var24 = var17.getType();
    int var25 = var17.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test116");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(514.6637810615505d, 25, 100);
    double var4 = var3.getX();
    boolean var5 = var3.update();
    double var6 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 25.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5.0d);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test117");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    var9.paintImmediately(var25);
    java.awt.Rectangle var27 = var9.getBounds();
    var0.scrollRectToVisible(var27);
    boolean var29 = var0.getIgnoreRepaint();
    java.lang.String var30 = var0.toString();
    var0.paintImmediately(498, 1, 0, 499);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var30,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var30.equals("SpaceWar.SpacePanel[,0,0,0var30,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test118");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    java.awt.Rectangle var27 = var0.bounds();
    var0.setBounds(25, 99, 500, 99);
    java.awt.image.VolatileImage var35 = var0.createVolatileImage(3, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test119");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    int var10 = var0.getBaseline(1, 1);
    var0.show(false);
    javax.swing.JRootPane var13 = var0.getRootPane();
    boolean var14 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    java.awt.Dimension var19 = var15.getPreferredSize();
    boolean var20 = var15.getVerifyInputWhenFocusTarget();
    java.awt.Component var23 = var15.findComponentAt(10, 1);
    boolean var24 = var15.requestDefaultFocus();
    java.awt.Insets var25 = var15.getInsets();
    var15.setDoubleBuffered(false);
    java.awt.Point var29 = var15.getMousePosition(true);
    boolean var30 = var15.getFocusTraversalKeysEnabled();
    java.awt.Dimension var31 = var15.getSize();
    var0.setMaximumSize(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test120");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    java.lang.String var11 = var0.getToolTipText();
    var0.doLayout();
    boolean var13 = var0.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test121");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    java.lang.String var4 = var0.getToolTipText();
    java.awt.Point var5 = var0.getLocation();
    javax.swing.JPopupMenu var6 = var0.getComponentPopupMenu();
    boolean var7 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test122");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    javax.swing.plaf.PanelUI var3 = var0.getUI();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    boolean var8 = var4.isDoubleBuffered();
    java.awt.dnd.DropTarget var9 = var4.getDropTarget();
    var4.show(false);
    boolean var12 = var4.isPaintingForPrint();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var19 = var13.getMouseListeners();
    int var20 = var13.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var21 = var13.getInputMethodRequests();
    var4.addKeyListener((java.awt.event.KeyListener)var13);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    var23.list();
    float var29 = var23.getAlignmentY();
    boolean var30 = var13.isFocusCycleRoot((java.awt.Container)var23);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.updateUI();
    java.awt.Component var38 = var13.add("", (java.awt.Component)var32);
    java.awt.ComponentOrientation var39 = var32.getComponentOrientation();
    boolean var40 = var32.isFocusable();
    var0.remove((java.awt.Component)var32);
    var0.hide();
    var0.revalidate();
    boolean var44 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test123");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    int var5 = var3.getType();
    boolean var6 = var3.update();
    double var7 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test124");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    java.awt.Component var23 = var0.getNextFocusableComponent();
    java.awt.Cursor var24 = var0.getCursor();
    javax.swing.JToolTip var25 = var0.createToolTip();
    var0.layout();
    boolean var27 = var0.isFocusOwner();
    int var28 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test125");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    java.lang.String var2 = var0.toString();
    java.awt.Dimension var3 = var0.size();
    javax.swing.KeyStroke[] var4 = var0.getRegisteredKeyStrokes();
    boolean var5 = var0.isFocusable();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    boolean var8 = var6.hasFocus();
    java.beans.VetoableChangeListener[] var9 = var6.getVetoableChangeListeners();
    var6.firePropertyChange("PanelUI", 1.0f, 100.0f);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    boolean var22 = var14.isPaintingForPrint();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var29 = var23.getMouseListeners();
    int var30 = var23.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var31 = var23.getInputMethodRequests();
    var14.addKeyListener((java.awt.event.KeyListener)var23);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    var33.list();
    float var39 = var33.getAlignmentY();
    boolean var40 = var23.isFocusCycleRoot((java.awt.Container)var33);
    boolean var41 = var33.isEnabled();
    java.awt.Dimension var42 = var33.getMaximumSize();
    var33.disable();
    java.awt.peer.ComponentPeer var44 = var33.getPeer();
    var33.list();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var46.repaint();
    var46.setRequestFocusEnabled(false);
    var46.reshape(100, 0, 100, 0);
    var46.requestFocus();
    java.awt.Rectangle var57 = var46.getVisibleRect();
    java.awt.Rectangle var58 = var46.getBounds();
    java.awt.im.InputMethodRequests var59 = var46.getInputMethodRequests();
    boolean var60 = var46.requestFocusInWindow();
    java.awt.Point var62 = var46.getMousePosition(false);
    var46.setDebugGraphicsOptions(1);
    java.awt.Graphics var65 = var46.getGraphics();
    var33.paintAll(var65);
    var6.update(var65);
    var0.print(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var2,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var2.equals("SpaceWar.SpacePanel[,0,0,0var2,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test126");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    boolean var32 = var0.isPreferredSizeSet();
    java.awt.Dimension var33 = var0.getSize();
    var0.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test127");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '#');
    java.awt.Insets var22 = var0.insets();
    java.awt.Dimension var23 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test128");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    boolean var6 = var0.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    var7.requestFocus();
    var7.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var22 = var7.getLocation();
    java.awt.Dimension var23 = var7.size();
    boolean var24 = var7.isDoubleBuffered();
    var7.reshape(0, 3, 25, 3);
    java.awt.Font var30 = var7.getFont();
    var0.setFont(var30);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    java.awt.image.BufferedImage var42 = var32.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var43 = var32.getComponentOrientation();
    boolean var44 = var32.isPaintingTile();
    java.awt.LayoutManager var45 = var32.getLayout();
    boolean var46 = var0.isAncestorOf((java.awt.Component)var32);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var53 = var47.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var54 = var47.getComponentListeners();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    var55.nextFocus();
    var55.repaint(1L);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    var62.list();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    boolean var72 = var68.isDoubleBuffered();
    java.awt.dnd.DropTarget var73 = var68.getDropTarget();
    var68.show(false);
    java.awt.Rectangle var76 = var68.getVisibleRect();
    java.awt.Rectangle var77 = var62.getBounds(var76);
    var55.setBounds(var77);
    var47.paintImmediately(var77);
    java.awt.Point var80 = var47.getMousePosition();
    java.awt.image.BufferedImage var82 = var47.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var47.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3, 100);
    java.awt.ComponentOrientation var87 = var47.getComponentOrientation();
    var0.applyComponentOrientation(var87);
    var0.firePropertyChange("PanelUI", (short)(-1), (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test129");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    javax.swing.plaf.PanelUI var20 = var0.getUI();
    var0.setAutoscrolls(false);
    boolean var24 = var0.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test130");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.event.HierarchyListener[] var16 = var1.getHierarchyListeners();
    boolean var17 = var1.isPaintingForPrint();
    javax.swing.plaf.PanelUI var18 = var1.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test131");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    java.awt.Rectangle var7 = var0.getBounds();
    var0.grabFocus();
    java.awt.Rectangle var9 = var0.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test132");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    var6.nextFocus();
    var6.repaint(1L);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    java.awt.Dimension var23 = var19.getPreferredSize();
    var13.setMaximumSize(var23);
    var6.setPreferredSize(var23);
    var0.setMaximumSize(var23);
    var0.updateUI();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    java.awt.dnd.DropTarget var33 = var28.getDropTarget();
    var28.show(false);
    boolean var36 = var28.isPaintingForPrint();
    var28.enable(false);
    var28.nextFocus();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    var40.setName("");
    java.awt.Toolkit var43 = var40.getToolkit();
    var40.setEnabled(false);
    var40.removeNotify();
    boolean var47 = var40.isDisplayable();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    java.awt.Color var49 = var48.getBackground();
    var48.repaint();
    var48.setRequestFocusEnabled(false);
    var48.reshape(100, 0, 100, 0);
    var48.requestFocus();
    java.awt.Rectangle var59 = var48.getVisibleRect();
    java.awt.Rectangle var60 = var48.getBounds();
    java.awt.im.InputMethodRequests var61 = var48.getInputMethodRequests();
    boolean var62 = var48.requestFocusInWindow();
    java.awt.Point var64 = var48.getMousePosition(false);
    var48.setDebugGraphicsOptions(1);
    java.awt.Graphics var67 = var48.getGraphics();
    var40.paintAll(var67);
    var28.print(var67);
    var0.printComponents(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test133");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    boolean var18 = var3.hasFocus();
    var3.requestFocus();
    boolean var20 = var3.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test134");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.Insets var20 = var11.getInsets();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var27 = var21.getMouseListeners();
    java.awt.Dimension var28 = var21.getPreferredSize();
    java.util.Locale var29 = var21.getLocale();
    var21.setFocusable(true);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    var32.setRequestFocusEnabled(false);
    var32.setIgnoreRepaint(false);
    java.lang.String var39 = var32.toString();
    java.awt.Color var40 = var32.getBackground();
    var11.putClientProperty((java.lang.Object)var21, (java.lang.Object)var32);
    boolean var42 = var21.hasFocus();
    java.awt.image.VolatileImage var45 = var21.createVolatileImage(10, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var39.equals("SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test135");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    boolean var7 = var0.isMinimumSizeSet();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    var8.setMaximumSize(var18);
    boolean var20 = var8.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var21 = var8.getAccessibleContext();
    boolean var22 = var8.isDoubleBuffered();
    java.awt.Rectangle var23 = var8.getVisibleRect();
    var0.setBounds(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    var25.setName("");
    var25.enable(true);
    var25.enable();
    java.awt.Point var31 = var25.location();
    var25.repaint(0, 3, (-1), 1);
    java.awt.Component var39 = var25.findComponentAt(0, 25);
    var0.setNextFocusableComponent((java.awt.Component)var25);
    var0.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test136");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    java.lang.String var9 = var0.getToolTipText();
    boolean var10 = var0.isOpaque();
    boolean var11 = var0.getFocusTraversalKeysEnabled();
    java.awt.Cursor var12 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test137");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    boolean var9 = var0.isFocusTraversalPolicyProvider();
    java.awt.im.InputContext var10 = var0.getInputContext();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)100, (short)1);
    var0.nextFocus();
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test138");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(284.06998599257884d, 99, 0);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test139");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.enable(false);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)false);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var23.setForeground(var28);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    java.awt.dnd.DropTarget var35 = var30.getDropTarget();
    var30.show(false);
    java.awt.Rectangle var38 = var30.getVisibleRect();
    var23.repaint(var38);
    java.awt.Component.BaselineResizeBehavior var40 = var23.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.repaint(1L);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    java.awt.dnd.DropTarget var59 = var54.getDropTarget();
    var54.show(false);
    java.awt.Rectangle var62 = var54.getVisibleRect();
    java.awt.Rectangle var63 = var48.getBounds(var62);
    var41.setBounds(var63);
    var23.paintImmediately(var63);
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    boolean var70 = var66.isDoubleBuffered();
    java.awt.dnd.DropTarget var71 = var66.getDropTarget();
    java.awt.Point var72 = var66.getMousePosition();
    boolean var73 = var66.getAutoscrolls();
    var0.add((java.awt.Component)var23, (java.lang.Object)var66);
    var66.setInheritsPopupMenu(false);
    var66.setFocusCycleRoot(true);
    boolean var79 = var66.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test140");


    SpaceWar.Text var4 = new SpaceWar.Text(0.0d, 588.66222662657d, 1L, "SpaceWar.SpacePanel[,100,0,100x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test141");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    var0.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var15 = var9.getUI();
    java.awt.im.InputMethodRequests var16 = var9.getInputMethodRequests();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var17.setSize((-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    var28.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var9.add((java.awt.Component)var17, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var34 = var9.getKeyListeners();
    var9.repaint(3, 1, 25, 0);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    java.awt.Color var41 = var40.getBackground();
    boolean var44 = var40.inside(0, (-1));
    var40.transferFocusUpCycle();
    java.awt.Container var46 = var40.getParent();
    boolean var47 = var40.isMaximumSizeSet();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.updateUI();
    var51.enableInputMethods(true);
    var48.add((java.awt.Component)var49, (java.lang.Object)true);
    boolean var61 = var49.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    java.awt.dnd.DropTarget var67 = var62.getDropTarget();
    var62.show(false);
    java.awt.Rectangle var70 = var62.getVisibleRect();
    var49.setBounds(var70);
    var40.setBounds(var70);
    java.awt.Rectangle var73 = var9.getBounds(var70);
    var0.setBounds(var73);
    boolean var76 = var0.requestFocus(false);
    java.awt.Cursor var77 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test142");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.ComponentOrientation var3 = var0.getComponentOrientation();
    int var4 = var0.getComponentCount();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)1, (byte)0);
    var0.setDebugGraphicsOptions(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test143");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    var0.enable();
    var0.repaint(0L);
    var0.list();
    boolean var41 = var0.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test144");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(514.6637810615505d, (-8.529389630162045d), 3, 500);
    boolean var5 = var4.update();
    boolean var6 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test145");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    var42.firePropertyChange("PanelUI", (short)1, (short)1);
    int var89 = var42.getHeight();
    var42.layout();
    var42.resize(499, 24);
    java.awt.Dimension var94 = var42.getMaximumSize();
    java.awt.Dimension var95 = var42.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test146");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(594.7973940347722d, 3, 100);
    boolean var4 = var3.update();
    boolean var5 = var3.update();
    boolean var6 = var3.update();
    double var7 = var3.getR();
    double var8 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 75.48643960578549d);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test147");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    var0.resetKeyboardActions();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    java.awt.Rectangle var27 = var19.getVisibleRect();
    var0.computeVisibleRect(var27);
    java.awt.Dimension var29 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test148");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    java.awt.Point var10 = var0.getMousePosition();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.updateUI();
    var14.enableInputMethods(true);
    var11.add((java.awt.Component)var12, (java.lang.Object)true);
    boolean var23 = var11.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var24 = var11.getHierarchyListeners();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var25.setForeground(var30);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    var25.repaint(var40);
    java.awt.FocusTraversalPolicy var42 = var25.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var43 = var25.getInputMethodRequests();
    var25.layout();
    boolean var45 = var25.isFocusTraversalPolicyProvider();
    java.lang.Object var46 = var11.getClientProperty((java.lang.Object)var45);
    java.awt.Dimension var47 = var11.getSize();
    var0.resize(var47);
    var0.setRequestFocusEnabled(true);
    javax.accessibility.AccessibleContext var51 = var0.getAccessibleContext();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 'a', '#');
    var0.setSize(99, 400);
    java.awt.event.KeyListener[] var59 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test149");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    java.awt.Font var9 = var0.getFont();
    boolean var10 = var0.isForegroundSet();
    java.awt.event.HierarchyBoundsListener[] var11 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test150");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    java.awt.dnd.DropTarget var25 = var20.getDropTarget();
    var20.show(false);
    boolean var28 = var20.isPaintingForPrint();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var35 = var29.getMouseListeners();
    int var36 = var29.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var37 = var29.getInputMethodRequests();
    var20.addKeyListener((java.awt.event.KeyListener)var29);
    var29.repaint();
    java.awt.Point var40 = var29.location();
    java.awt.Component var41 = var0.findComponentAt(var40);
    java.awt.Dimension var42 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test151");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    boolean var7 = var0.isMinimumSizeSet();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    var8.setMaximumSize(var18);
    boolean var20 = var8.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var21 = var8.getAccessibleContext();
    boolean var22 = var8.isDoubleBuffered();
    java.awt.Rectangle var23 = var8.getVisibleRect();
    var0.setBounds(var23);
    var0.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test152");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    var0.repaint(1L, 400, 25, (-1), 25);
    java.awt.event.MouseListener[] var14 = var0.getMouseListeners();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3.0d, 495.44236387443226d);
    java.beans.PropertyChangeListener[] var19 = var0.getPropertyChangeListeners();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var26 = var20.getUI();
    java.awt.im.InputMethodRequests var27 = var20.getInputMethodRequests();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    var28.enableInputMethods(true);
    var28.setSize((-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    var39.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var20.add((java.awt.Component)var28, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    java.awt.Dimension var49 = var45.getPreferredSize();
    java.awt.Toolkit var50 = var45.getToolkit();
    java.awt.Toolkit var51 = var45.getToolkit();
    java.awt.Component var52 = var28.add((java.awt.Component)var45);
    var28.setDebugGraphicsOptions(0);
    java.awt.im.InputMethodRequests var55 = var28.getInputMethodRequests();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var28.setForeground(var57);
    var0.setForeground(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test153");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    int var6 = var0.countComponents();
    var0.resize((-1), 3);
    boolean var10 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test154");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.doLayout();
    javax.swing.JPopupMenu var28 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test155");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    int var7 = var0.getPower();
    int var8 = var0.getX();
    int var9 = var0.getPower();
    int var10 = var0.getX();
    int var11 = var0.getR();
    int var12 = var0.getX();
    boolean var13 = var0.isDead();
    var0.setUp(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test156");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Rectangle var15 = var0.bounds();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.reshape((-1), 1, (-1), 10);
    var16.disable();
    boolean var27 = var16.isFocusable();
    java.awt.Dimension var28 = var16.getSize();
    var0.setSize(var28);
    java.awt.Container var30 = var0.getFocusCycleRootAncestor();
    boolean var31 = var0.getAutoscrolls();
    int var32 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 100);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test157");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    var0.setRigth(true);
    boolean var6 = var0.isDead();
    var0.setLeft(false);
    int var9 = var0.getPowerLevel();
    int var10 = var0.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 25);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test158");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.Graphics var5 = var0.getGraphics();
    boolean var6 = var0.isMinimumSizeSet();
    var0.hide();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.setEnabled(false);
    var8.invalidate();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.updateUI();
    var16.enableInputMethods(true);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    boolean var26 = var24.hasFocus();
    java.awt.Insets var27 = var24.getInsets();
    java.awt.Insets var28 = var16.getInsets(var27);
    boolean var29 = var16.isManagingFocus();
    java.awt.Image var32 = var16.createImage(1, 10);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    boolean var45 = var33.getVerifyInputWhenFocusTarget();
    int var46 = var33.getX();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    var47.setEnabled(false);
    var16.add((java.awt.Component)var33, (java.lang.Object)false);
    boolean var54 = var16.isForegroundSet();
    java.awt.Component var55 = var8.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var16);
    var16.revalidate();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    var57.setName("");
    java.awt.Toolkit var60 = var57.getToolkit();
    var57.setEnabled(false);
    var57.removeNotify();
    boolean var64 = var57.isDisplayable();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    java.awt.Color var66 = var65.getBackground();
    var65.repaint();
    var65.setRequestFocusEnabled(false);
    var65.reshape(100, 0, 100, 0);
    var65.requestFocus();
    java.awt.Rectangle var76 = var65.getVisibleRect();
    java.awt.Rectangle var77 = var65.getBounds();
    java.awt.im.InputMethodRequests var78 = var65.getInputMethodRequests();
    boolean var79 = var65.requestFocusInWindow();
    java.awt.Point var81 = var65.getMousePosition(false);
    var65.setDebugGraphicsOptions(1);
    java.awt.Graphics var84 = var65.getGraphics();
    var57.paintAll(var84);
    var16.print(var84);
    var0.printComponents(var84);
    java.awt.LayoutManager var88 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test159");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    var0.removeNotify();
    var0.requestFocus();
    var0.setFocusCycleRoot(false);
    var0.layout();
    java.lang.String var26 = var0.toString();
    javax.swing.JToolTip var27 = var0.createToolTip();
    java.awt.Component[] var28 = var0.getComponents();
    var0.setVerifyInputWhenFocusTarget(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 'a', ' ');
    java.lang.String var35 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var26.equals("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test160");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    int var12 = var0.getHeight();
    javax.swing.InputVerifier var13 = var0.getInputVerifier();
    java.awt.Graphics var14 = var0.getGraphics();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var21 = var15.getMouseListeners();
    java.awt.Dimension var22 = var15.getPreferredSize();
    java.util.Locale var23 = var15.getLocale();
    java.awt.Font var24 = var15.getFont();
    java.awt.Color var25 = var15.getForeground();
    var0.setForeground(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var27 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test161");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getRequiredPower();
    int var7 = var0.getR();
    var0.setRigth(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 25);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test162");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var18 = var12.getUI();
    java.awt.im.InputMethodRequests var19 = var12.getInputMethodRequests();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var20.setSize((-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    var31.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var12.add((java.awt.Component)var20, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var37 = var12.getKeyListeners();
    java.awt.FocusTraversalPolicy var38 = var12.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    var39.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var44 = var39.getToolkit();
    var0.add((java.awt.Component)var12, (java.lang.Object)var39);
    java.beans.VetoableChangeListener[] var46 = var39.getVetoableChangeListeners();
    var39.setSize(10, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test163");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    var1.firePropertyChange("PanelUI", 499, 2);
    var1.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test164");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(500, 3);
    double var3 = var2.getX();
    double var4 = var2.getX();
    int var5 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 534.487056784109d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 534.487056784109d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 500);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test165");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    java.awt.Color var6 = var5.getBackground();
    var5.repaint();
    java.lang.Object var8 = var0.getClientProperty((java.lang.Object)var5);
    var5.repaint(1L);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    java.awt.Color var22 = var21.getBackground();
    var17.setForeground(var22);
    var11.setBackground(var22);
    var11.grabFocus();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    boolean var32 = var26.isFocusCycleRoot();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    var36.updateUI();
    var36.enableInputMethods(true);
    var33.add((java.awt.Component)var34, (java.lang.Object)true);
    java.awt.Dimension var45 = var34.getPreferredSize();
    var26.setSize(var45);
    var11.setMaximumSize(var45);
    float var48 = var11.getAlignmentY();
    java.lang.String var49 = var11.getToolTipText();
    var5.addKeyListener((java.awt.event.KeyListener)var11);
    int var51 = var5.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test166");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    var0.transferFocusDownCycle();
    java.awt.Dimension var27 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test167");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    java.beans.PropertyChangeListener[] var20 = var0.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.Insets var21 = var0.getInsets();
    boolean var22 = var0.getIgnoreRepaint();
    boolean var23 = var0.isManagingFocus();
    java.awt.Point var24 = var0.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test168");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    java.awt.event.MouseMotionListener[] var27 = var0.getMouseMotionListeners();
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test169");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    var0.hide();
    boolean var21 = var0.getIgnoreRepaint();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    java.awt.dnd.DropTarget var27 = var22.getDropTarget();
    boolean var28 = var22.isFocusCycleRoot();
    var22.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var39 = var33.getUI();
    var22.setNextFocusableComponent((java.awt.Component)var33);
    var22.repaint(1L, 1, 3, 0, 3);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    var47.nextFocus();
    var47.repaint(1L);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    var54.list();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    boolean var64 = var60.isDoubleBuffered();
    java.awt.dnd.DropTarget var65 = var60.getDropTarget();
    var60.show(false);
    java.awt.Rectangle var68 = var60.getVisibleRect();
    java.awt.Rectangle var69 = var54.getBounds(var68);
    var47.setBounds(var69);
    var22.computeVisibleRect(var69);
    var0.repaint(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test170");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    var8.setDebugGraphicsOptions(0);
    var8.setVerifyInputWhenFocusTarget(false);
    var8.nextFocus();
    var8.repaint(100, 0, 10, 3);
    java.awt.ComponentOrientation var43 = var8.getComponentOrientation();
    java.awt.dnd.DropTarget var44 = var8.getDropTarget();
    java.lang.String var45 = var8.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test171");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.setDown(false);
    int var9 = var0.getPower();
    var0.setLeft(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test172");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    java.util.Locale var6 = var0.getLocale();
    var0.paintImmediately(25, 100, 3, 0);
    boolean var12 = var0.isCursorSet();
    boolean var13 = var0.isCursorSet();
    boolean var14 = var0.getFocusTraversalKeysEnabled();
    var0.setVerifyInputWhenFocusTarget(false);
    boolean var17 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    var18.list();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    java.awt.dnd.DropTarget var29 = var24.getDropTarget();
    var24.show(false);
    java.awt.Rectangle var32 = var24.getVisibleRect();
    java.awt.image.BufferedImage var34 = var24.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var35 = var18.isAncestorOf((java.awt.Component)var24);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var36.repaint();
    var36.setRequestFocusEnabled(false);
    var36.setIgnoreRepaint(false);
    java.lang.String var43 = var36.toString();
    java.awt.Color var44 = var36.getBackground();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    java.awt.Dimension var49 = var45.getPreferredSize();
    java.awt.Toolkit var50 = var45.getToolkit();
    java.awt.Toolkit var51 = var45.getToolkit();
    SpaceWar.Player var52 = new SpaceWar.Player();
    var52.increasePower(25);
    int var55 = var52.getScore();
    var52.setRigth(true);
    var52.loseLife();
    var36.putClientProperty((java.lang.Object)var45, (java.lang.Object)var52);
    java.awt.Rectangle var60 = var45.bounds();
    java.awt.Rectangle var61 = var24.getBounds(var60);
    var0.scrollRectToVisible(var61);
    java.awt.Dimension var63 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var43,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var43.equals("SpaceWar.SpacePanel[,0,0,0var43,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test173");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    float var14 = var0.getAlignmentX();
    var0.enable(true);
    boolean var17 = var0.isPaintingTile();
    javax.swing.plaf.PanelUI var18 = var0.getUI();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    java.awt.Dimension var23 = var19.getPreferredSize();
    java.awt.Toolkit var24 = var19.getToolkit();
    boolean var25 = var19.isFocusable();
    javax.swing.KeyStroke[] var26 = var19.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    java.awt.Dimension var33 = var29.getPreferredSize();
    boolean var34 = var29.getVerifyInputWhenFocusTarget();
    java.awt.Component var37 = var29.findComponentAt(10, 1);
    var27.addKeyListener((java.awt.event.KeyListener)var29);
    var29.repaint(100, (-1), (-1), 1);
    boolean var44 = var19.isAncestorOf((java.awt.Component)var29);
    var19.nextFocus();
    var19.disable();
    java.awt.Dimension var47 = var19.size();
    var19.list();
    var19.hide();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.reshape((-1), 1, (-1), 10);
    var50.disable();
    java.awt.LayoutManager var61 = var50.getLayout();
    boolean var64 = var50.contains((-1), 0);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    var65.nextFocus();
    var65.updateUI();
    var65.enableInputMethods(true);
    var65.setSize((-1), 1);
    java.awt.Component var76 = var50.add((java.awt.Component)var65);
    var65.nextFocus();
    boolean var78 = var65.hasFocus();
    javax.accessibility.AccessibleContext var79 = var65.getAccessibleContext();
    var0.putClientProperty((java.lang.Object)var19, (java.lang.Object)var65);
    var0.setAutoscrolls(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test174");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    boolean var28 = var0.requestFocus(true);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var29.repaint();
    var29.setRequestFocusEnabled(false);
    var29.reshape(100, 0, 100, 0);
    var29.requestFocus();
    var29.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var44 = var29.getLocation();
    java.awt.event.MouseWheelListener[] var45 = var29.getMouseWheelListeners();
    java.awt.Component var46 = var29.getNextFocusableComponent();
    boolean var47 = var29.requestDefaultFocus();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.updateUI();
    var51.enableInputMethods(true);
    var48.add((java.awt.Component)var49, (java.lang.Object)true);
    java.awt.Dimension var60 = var49.getPreferredSize();
    java.awt.Component[] var61 = var49.getComponents();
    var49.repaint(25, 25, 100, 1);
    javax.swing.KeyStroke[] var67 = var49.getRegisteredKeyStrokes();
    var49.validate();
    boolean var69 = var29.isAncestorOf((java.awt.Component)var49);
    java.awt.Point var70 = var49.location();
    boolean var71 = var0.contains(var70);
    java.awt.Graphics var72 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test175");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    float var10 = var0.getAlignmentY();
    boolean var11 = var0.isFocusable();
    var0.enable();
    java.awt.Dimension var13 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test176");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    var8.setDebugGraphicsOptions(0);
    var8.setVerifyInputWhenFocusTarget(false);
    var8.nextFocus();
    var8.repaint(100, 0, 10, 3);
    java.awt.Dimension var43 = var8.getSize();
    boolean var44 = var8.isManagingFocus();
    var8.enable();
    java.awt.im.InputContext var46 = var8.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test177");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 0);
    var2.update();

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test178");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    boolean var26 = var0.isValidateRoot();
    var0.setDoubleBuffered(true);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    java.awt.dnd.DropTarget var34 = var29.getDropTarget();
    var29.show(false);
    boolean var37 = var29.isPaintingForPrint();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var44 = var38.getMouseListeners();
    int var45 = var38.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var46 = var38.getInputMethodRequests();
    var29.addKeyListener((java.awt.event.KeyListener)var38);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    float var54 = var48.getAlignmentY();
    boolean var55 = var38.isFocusCycleRoot((java.awt.Container)var48);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    var57.nextFocus();
    var57.updateUI();
    java.awt.Component var63 = var38.add("", (java.awt.Component)var57);
    java.awt.ComponentOrientation var64 = var57.getComponentOrientation();
    var0.setComponentOrientation(var64);
    java.awt.event.MouseListener[] var66 = var0.getMouseListeners();
    int var69 = var0.getBaseline(498, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test179");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    java.lang.Object var11 = var0.getTreeLock();
    var0.setAlignmentY(0.0f);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', ' ');
    java.awt.Component.BaselineResizeBehavior var18 = var0.getBaselineResizeBehavior();
    boolean var19 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test180");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    var42.firePropertyChange("PanelUI", (short)1, (short)1);
    int var89 = var42.getHeight();
    var42.layout();
    java.awt.Component var93 = var42.getComponentAt(2, 399);
    var42.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test181");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.setInheritsPopupMenu(false);
    boolean var31 = var25.isDoubleBuffered();
    boolean var32 = var25.isMinimumSizeSet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    boolean var45 = var33.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var46 = var33.getAccessibleContext();
    boolean var47 = var33.isDoubleBuffered();
    java.awt.Rectangle var48 = var33.getVisibleRect();
    var25.setBounds(var48);
    java.awt.Rectangle var50 = var0.getBounds(var48);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    java.awt.dnd.DropTarget var56 = var51.getDropTarget();
    var51.show(false);
    boolean var59 = var51.isPaintingForPrint();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var66 = var60.getMouseListeners();
    int var67 = var60.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var68 = var60.getInputMethodRequests();
    var51.addKeyListener((java.awt.event.KeyListener)var60);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    boolean var74 = var70.isDoubleBuffered();
    var70.list();
    float var76 = var70.getAlignmentY();
    boolean var77 = var60.isFocusCycleRoot((java.awt.Container)var70);
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    float var80 = var79.getAlignmentX();
    var79.setVisible(false);
    var79.nextFocus();
    var79.updateUI();
    java.awt.Component var85 = var60.add("", (java.awt.Component)var79);
    java.awt.ComponentOrientation var86 = var79.getComponentOrientation();
    var0.applyComponentOrientation(var86);
    var0.requestFocus();
    boolean var89 = var0.getAutoscrolls();
    java.awt.ComponentOrientation var90 = var0.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test182");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    javax.swing.InputMap var18 = var1.getInputMap();
    var1.addNotify();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    java.awt.Color var22 = var21.getBackground();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    var23.updateUI();
    var23.enableInputMethods(true);
    var20.add((java.awt.Component)var21, (java.lang.Object)true);
    java.awt.Dimension var32 = var21.getPreferredSize();
    java.awt.Component[] var33 = var21.getComponents();
    var21.repaint(25, 25, 100, 1);
    var21.nextFocus();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    var40.reshape((-1), 1, (-1), 10);
    var40.disable();
    java.awt.LayoutManager var51 = var40.getLayout();
    var40.setVisible(false);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    var54.setInheritsPopupMenu(false);
    boolean var60 = var54.isDoubleBuffered();
    boolean var61 = var54.isMinimumSizeSet();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    java.awt.Dimension var72 = var68.getPreferredSize();
    var62.setMaximumSize(var72);
    boolean var74 = var62.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var75 = var62.getAccessibleContext();
    boolean var76 = var62.isDoubleBuffered();
    java.awt.Rectangle var77 = var62.getVisibleRect();
    var54.setBounds(var77);
    var40.computeVisibleRect(var77);
    var21.repaint(var77);
    var1.setBounds(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test183");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    int var10 = var0.getBaseline(1, 1);
    var0.show(false);
    var0.doLayout();
    var0.hide();
    javax.swing.JRootPane var15 = var0.getRootPane();
    boolean var16 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test184");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)1, (short)100);
    var0.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test185");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(514.6637810615505d, 25, 100);
    double var4 = var3.getY();
    double var5 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 5.0d);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test186");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(5.0d, 0, 1);
    double var4 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test187");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    var0.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.updateUI();
    java.util.Locale var20 = var14.getLocale();
    var0.setLocale(var20);
    boolean var22 = var0.isRequestFocusEnabled();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var29 = var23.getMouseListeners();
    int var30 = var23.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    var23.paintImmediately(var39);
    int var41 = var23.getWidth();
    var0.removeKeyListener((java.awt.event.KeyListener)var23);
    java.awt.event.KeyListener[] var43 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test188");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.beans.PropertyChangeListener[] var15 = var1.getPropertyChangeListeners();
    java.awt.FocusTraversalPolicy var16 = var1.getFocusTraversalPolicy();
    var1.show(false);
    java.lang.String var19 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test189");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test190");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    javax.swing.plaf.PanelUI var20 = var0.getUI();
    java.awt.Dimension var21 = var0.getMinimumSize();
    boolean var22 = var0.getInheritsPopupMenu();
    java.awt.event.FocusListener[] var23 = var0.getFocusListeners();
    var0.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test191");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(594.7973940347722d, 3, 100);
    double var4 = var3.getY();
    boolean var5 = var3.update();
    double var6 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5.0d);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test192");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    boolean var9 = var0.isFocusable();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    boolean var18 = var10.isPaintingForPrint();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var25 = var19.getMouseListeners();
    int var26 = var19.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var27 = var19.getInputMethodRequests();
    var10.addKeyListener((java.awt.event.KeyListener)var19);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    var29.list();
    float var35 = var29.getAlignmentY();
    boolean var36 = var19.isFocusCycleRoot((java.awt.Container)var29);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    java.awt.Component var44 = var19.add("", (java.awt.Component)var38);
    var19.firePropertyChange("hi!", 'a', '4');
    boolean var49 = var19.getAutoscrolls();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    boolean var54 = var50.isDoubleBuffered();
    java.awt.dnd.DropTarget var55 = var50.getDropTarget();
    var50.show(false);
    boolean var58 = var50.isPaintingForPrint();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var65 = var59.getMouseListeners();
    int var66 = var59.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var67 = var59.getInputMethodRequests();
    var50.addKeyListener((java.awt.event.KeyListener)var59);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    boolean var73 = var69.isDoubleBuffered();
    var69.list();
    float var75 = var69.getAlignmentY();
    boolean var76 = var59.isFocusCycleRoot((java.awt.Container)var69);
    var69.firePropertyChange("", 1L, 1L);
    var69.setVerifyInputWhenFocusTarget(true);
    java.awt.Cursor var83 = var69.getCursor();
    var19.setCursor(var83);
    var0.setCursor(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test193");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    boolean var35 = var18.isPaintingTile();
    java.awt.image.ColorModel var36 = var18.getColorModel();
    var18.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test194");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    boolean var18 = var0.isFocusCycleRoot();
    java.awt.image.VolatileImage var21 = var0.createVolatileImage(500, 0);
    int var22 = var0.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test195");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    javax.swing.KeyStroke[] var9 = var0.getRegisteredKeyStrokes();
    boolean var10 = var0.isMinimumSizeSet();
    java.lang.String var11 = var0.getUIClassID();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test196");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Rectangle var4 = var0.bounds();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    boolean var6 = var0.isMaximumSizeSet();
    java.awt.LayoutManager var7 = var0.getLayout();
    java.awt.Rectangle var8 = var0.getBounds();
    boolean var9 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test197");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(594.7973940347722d, 3, 100);
    double var4 = var3.getR();
    boolean var5 = var3.update();
    boolean var6 = var3.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test198");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    java.awt.image.BufferedImage var5 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var6 = var0.getPower();
    int var7 = var0.getRequiredPower();
    var0.increasePower(3);
    boolean var10 = var0.isRecovering();
    var0.setLife(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test199");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Dimension var12 = var2.getMinimumSize();
    java.lang.String var13 = var2.getToolTipText();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 10.0d, 100.0d);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    boolean var25 = var19.isFocusCycleRoot();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var30.repaint();
    var30.setRequestFocusEnabled(false);
    var30.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var40 = var30.getAncestorListeners();
    var30.grabFocus();
    boolean var42 = var19.isFocusCycleRoot((java.awt.Container)var30);
    javax.swing.ActionMap var43 = var30.getActionMap();
    var14.setActionMap(var43);
    var2.setActionMap(var43);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    var46.list();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    boolean var56 = var52.isDoubleBuffered();
    java.awt.dnd.DropTarget var57 = var52.getDropTarget();
    var52.show(false);
    java.awt.Rectangle var60 = var52.getVisibleRect();
    java.awt.Rectangle var61 = var46.getBounds(var60);
    javax.swing.JToolTip var62 = var46.createToolTip();
    boolean var63 = var62.getInheritsPopupMenu();
    var62.layout();
    var62.invalidate();
    java.awt.Cursor var66 = var62.getCursor();
    var2.setCursor(var66);
    java.awt.Graphics var68 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test200");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    java.awt.Component var37 = var0.findComponentAt(1, 25);
    java.awt.Container var38 = var0.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test201");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    java.lang.String var50 = var2.getUIClassID();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var57 = var51.getMouseListeners();
    int var58 = var51.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var59 = var51.getInputMethodRequests();
    var51.removeNotify();
    var51.enable();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    java.awt.Color var63 = var62.getBackground();
    boolean var66 = var62.inside(0, (-1));
    var62.transferFocusUpCycle();
    java.lang.String var68 = var62.getName();
    boolean var69 = var51.isFocusCycleRoot((java.awt.Container)var62);
    java.awt.Dimension var70 = var51.getMinimumSize();
    boolean var73 = var51.inside(500, 3);
    boolean var74 = var2.isFocusCycleRoot((java.awt.Container)var51);
    java.awt.image.ColorModel var75 = var2.getColorModel();
    java.awt.Point var76 = var2.getLocation();
    var2.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)1, (byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "PanelUI"+ "'", var50.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test202");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    boolean var9 = var0.isFocusTraversalPolicyProvider();
    boolean var10 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.updateUI();
    var14.enableInputMethods(true);
    var11.add((java.awt.Component)var12, (java.lang.Object)true);
    java.awt.Image var25 = var12.createImage(1, (-1));
    boolean var26 = var12.isValidateRoot();
    var12.resize(1, 3);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var30.repaint();
    java.awt.im.InputMethodRequests var33 = var30.getInputMethodRequests();
    var30.setDoubleBuffered(true);
    var30.show(false);
    var30.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    var40.setForeground(var45);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    boolean var51 = var47.isDoubleBuffered();
    java.awt.dnd.DropTarget var52 = var47.getDropTarget();
    var47.show(false);
    java.awt.Rectangle var55 = var47.getVisibleRect();
    var40.repaint(var55);
    java.awt.FocusTraversalPolicy var57 = var40.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var58 = var40.getInputMethodRequests();
    var40.layout();
    boolean var60 = var40.isFocusTraversalPolicyProvider();
    java.awt.Insets var61 = var40.insets();
    java.awt.Dimension var62 = var40.getMinimumSize();
    java.awt.Dimension var63 = var30.getSize(var62);
    var12.resize(var62);
    java.awt.Dimension var65 = var0.getSize(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test203");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.event.InputMethodListener[] var20 = var11.getInputMethodListeners();
    boolean var21 = var11.isValid();
    java.util.Locale var22 = var11.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test204");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    var0.repaint(100L);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    var11.nextFocus();
    var11.reshape((-1), 1, (-1), 10);
    var11.disable();
    java.awt.LayoutManager var22 = var11.getLayout();
    var11.setVisible(false);
    javax.accessibility.AccessibleContext var25 = var11.getAccessibleContext();
    java.awt.Point var26 = var11.getLocation();
    var0.setLocation(var26);
    java.awt.Component.BaselineResizeBehavior var28 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test205");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    int var28 = var8.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test206");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    var26.list();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    java.awt.image.BufferedImage var42 = var32.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var43 = var26.isAncestorOf((java.awt.Component)var32);
    java.awt.GraphicsConfiguration var44 = var32.getGraphicsConfiguration();
    java.awt.Font var45 = var32.getFont();
    var0.setFont(var45);
    java.awt.Color var47 = var0.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test207");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var8 = var0.getUI();
    java.util.Set var10 = var0.getFocusTraversalKeys(3);
    var0.requestFocus();
    var0.setLocation(0, 24);
    var0.doLayout();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var22 = var16.getMouseListeners();
    var16.firePropertyChange("", 0.5f, 100.0f);
    var16.enable(false);
    int var29 = var16.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.repaint(1L);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    java.awt.Dimension var47 = var43.getPreferredSize();
    var37.setMaximumSize(var47);
    var30.setPreferredSize(var47);
    java.awt.Container var50 = var30.getFocusCycleRootAncestor();
    java.awt.image.ColorModel var51 = var30.getColorModel();
    int var52 = var30.getComponentCount();
    java.awt.Component var53 = var16.add((java.awt.Component)var30);
    var30.setBounds((-1), 25, 10, (-1));
    var30.grabFocus();
    boolean var60 = var0.isAncestorOf((java.awt.Component)var30);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var61.repaint();
    var61.setRequestFocusEnabled(false);
    var61.setIgnoreRepaint(false);
    java.lang.String var68 = var61.toString();
    java.awt.Color var69 = var61.getBackground();
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    java.awt.Dimension var74 = var70.getPreferredSize();
    java.awt.Toolkit var75 = var70.getToolkit();
    java.awt.Toolkit var76 = var70.getToolkit();
    SpaceWar.Player var77 = new SpaceWar.Player();
    var77.increasePower(25);
    int var80 = var77.getScore();
    var77.setRigth(true);
    var77.loseLife();
    var61.putClientProperty((java.lang.Object)var70, (java.lang.Object)var77);
    var30.addKeyListener((java.awt.event.KeyListener)var70);
    var70.resetKeyboardActions();
    java.awt.FocusTraversalPolicy var87 = var70.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var68,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var68.equals("SpaceWar.SpacePanel[,0,0,0var68,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test208");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    boolean var50 = var14.isFocusTraversable();
    var14.revalidate();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.setInheritsPopupMenu(false);
    boolean var58 = var52.isDoubleBuffered();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.nextFocus();
    var59.reshape((-1), 1, (-1), 10);
    var59.disable();
    java.awt.LayoutManager var70 = var59.getLayout();
    var52.setLayout(var70);
    java.awt.event.MouseMotionListener[] var72 = var52.getMouseMotionListeners();
    javax.swing.event.AncestorListener[] var73 = var52.getAncestorListeners();
    boolean var74 = var14.isFocusCycleRoot((java.awt.Container)var52);
    boolean var75 = var14.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test209");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    var3.repaint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    javax.swing.plaf.PanelUI var40 = var20.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.reshape((-1), 1, (-1), 10);
    var41.disable();
    java.awt.LayoutManager var52 = var41.getLayout();
    java.awt.Container var53 = var41.getParent();
    java.lang.String var54 = var41.getUIClassID();
    SpaceWar.Enemy var57 = new SpaceWar.Enemy(0, 10);
    var20.add((java.awt.Component)var41, (java.lang.Object)10);
    java.awt.event.MouseListener[] var59 = var20.getMouseListeners();
    java.awt.Component var61 = var3.add((java.awt.Component)var20, (-1));
    var61.repaint((-1L));
    java.awt.Container var64 = var61.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test210");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(500, 3);
    var2.explode();
    var2.hit();
    double var5 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test211");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    javax.swing.plaf.PanelUI var20 = var3.getUI();
    int var21 = var3.getComponentCount();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    var22.list();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    java.awt.dnd.DropTarget var33 = var28.getDropTarget();
    var28.show(false);
    java.awt.Rectangle var36 = var28.getVisibleRect();
    java.awt.image.BufferedImage var38 = var28.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var39 = var22.isAncestorOf((java.awt.Component)var28);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    java.awt.Color var41 = var40.getBackground();
    var40.repaint();
    var40.setRequestFocusEnabled(false);
    var40.setIgnoreRepaint(false);
    java.lang.String var47 = var40.toString();
    java.awt.Color var48 = var40.getBackground();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    java.awt.Toolkit var54 = var49.getToolkit();
    java.awt.Toolkit var55 = var49.getToolkit();
    SpaceWar.Player var56 = new SpaceWar.Player();
    var56.increasePower(25);
    int var59 = var56.getScore();
    var56.setRigth(true);
    var56.loseLife();
    var40.putClientProperty((java.lang.Object)var49, (java.lang.Object)var56);
    java.awt.Rectangle var64 = var49.bounds();
    java.awt.Rectangle var65 = var28.getBounds(var64);
    var3.setBounds(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var47.equals("SpaceWar.SpacePanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test212");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    java.awt.Component var9 = var0.getComponentAt(1, (-1));
    java.awt.image.BufferedImage var11 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    javax.swing.border.Border var12 = var0.getBorder();
    var0.setDoubleBuffered(false);
    java.awt.Font var15 = var0.getFont();
    java.awt.Insets var16 = var0.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test213");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    boolean var36 = var0.isFocusTraversable();
    java.awt.event.MouseListener[] var37 = var0.getMouseListeners();
    var0.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test214");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    var5.nextFocus();
    var5.reshape((-1), 1, (-1), 10);
    var5.disable();
    boolean var16 = var5.isFocusable();
    int var17 = var5.getHeight();
    var0.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Set var20 = var0.getFocusTraversalKeys(0);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    java.awt.Color var26 = var25.getBackground();
    var21.setForeground(var26);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    java.awt.dnd.DropTarget var33 = var28.getDropTarget();
    var28.show(false);
    java.awt.Rectangle var36 = var28.getVisibleRect();
    var21.repaint(var36);
    java.awt.FocusTraversalPolicy var38 = var21.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.firePropertyChange("", (-1), 1);
    boolean var45 = var39.isFocusOwner();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    java.awt.Dimension var51 = var47.getPreferredSize();
    java.awt.Toolkit var52 = var47.getToolkit();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    var53.setName("");
    int var56 = var53.getX();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    var57.nextFocus();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    java.awt.Color var67 = var66.getBackground();
    var62.setForeground(var67);
    var57.setBackground(var67);
    var53.setBackground(var67);
    var47.setForeground(var67);
    var39.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var67);
    var21.setBackground(var67);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var80 = new SpaceWar.SpacePanel();
    float var81 = var80.getAlignmentX();
    var80.setVisible(false);
    SpaceWar.SpacePanel var84 = new SpaceWar.SpacePanel();
    java.awt.Color var85 = var84.getBackground();
    var80.setForeground(var85);
    var74.setBackground(var85);
    java.awt.Point var88 = var74.location();
    java.awt.Point var89 = var21.getLocation(var88);
    boolean var90 = var0.contains(var88);
    java.beans.VetoableChangeListener[] var91 = var0.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test215");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    boolean var4 = var0.isRecovering();
    var0.setLife(499);
    var0.setFiring(true);
    int var9 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 499);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test216");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setFocusCycleRoot(false);
    var19.setInheritsPopupMenu(false);
    var19.transferFocusBackward();
    var19.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test217");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    var19.setRequestFocusEnabled(false);
    var19.reshape(100, 0, 100, 0);
    var19.requestFocus();
    var19.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var34 = var19.getLocation();
    java.awt.Component var35 = var11.getComponentAt(var34);
    java.beans.VetoableChangeListener[] var36 = var11.getVetoableChangeListeners();
    var11.removeAll();
    java.awt.event.HierarchyListener[] var38 = var11.getHierarchyListeners();
    var11.repaint(500, 499, 10, 25);
    boolean var44 = var11.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test218");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.removeNotify();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    boolean var9 = var5.isDoubleBuffered();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    var5.show(false);
    boolean var13 = var5.isPaintingForPrint();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var20 = var14.getMouseListeners();
    int var21 = var14.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var22 = var14.getInputMethodRequests();
    var5.addKeyListener((java.awt.event.KeyListener)var14);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    var24.list();
    float var30 = var24.getAlignmentY();
    boolean var31 = var14.isFocusCycleRoot((java.awt.Container)var24);
    boolean var32 = var24.isEnabled();
    java.awt.Dimension var33 = var24.getMaximumSize();
    var24.disable();
    var24.updateUI();
    var24.setFocusable(false);
    boolean var38 = var24.isDoubleBuffered();
    var24.repaint(0L);
    javax.swing.ActionMap var41 = var24.getActionMap();
    var0.setActionMap(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test219");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var14 = var8.getUI();
    java.awt.im.InputMethodRequests var15 = var8.getInputMethodRequests();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.updateUI();
    var16.enableInputMethods(true);
    var16.setSize((-1), 1);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    var27.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var8.add((java.awt.Component)var16, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    java.awt.Toolkit var38 = var33.getToolkit();
    java.awt.Toolkit var39 = var33.getToolkit();
    java.awt.Component var40 = var16.add((java.awt.Component)var33);
    int var41 = var16.getY();
    int var44 = var16.getBaseline(25, 10);
    java.awt.im.InputMethodRequests var45 = var16.getInputMethodRequests();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    java.awt.Dimension var56 = var52.getPreferredSize();
    var46.setMaximumSize(var56);
    boolean var58 = var46.getVerifyInputWhenFocusTarget();
    var46.transferFocusUpCycle();
    java.awt.Point var60 = var46.location();
    java.awt.Point var61 = var16.getLocation(var60);
    boolean var62 = var0.contains(var61);
    boolean var63 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test220");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    boolean var44 = var36.isPaintingForPrint();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var51 = var45.getMouseListeners();
    int var52 = var45.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var53 = var45.getInputMethodRequests();
    var36.addKeyListener((java.awt.event.KeyListener)var45);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    boolean var59 = var55.isDoubleBuffered();
    var55.list();
    float var61 = var55.getAlignmentY();
    boolean var62 = var45.isFocusCycleRoot((java.awt.Container)var55);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    var64.nextFocus();
    var64.updateUI();
    java.awt.Component var70 = var45.add("", (java.awt.Component)var64);
    java.awt.Component var71 = var18.add("", (java.awt.Component)var64);
    boolean var74 = var18.inside(100, 0);
    boolean var75 = var18.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    float var77 = var76.getAlignmentX();
    var76.setVisible(false);
    SpaceWar.SpacePanel var80 = new SpaceWar.SpacePanel();
    java.awt.Color var81 = var80.getBackground();
    var76.setForeground(var81);
    SpaceWar.SpacePanel var83 = new SpaceWar.SpacePanel();
    float var84 = var83.getAlignmentX();
    var83.setVisible(false);
    boolean var87 = var83.isDoubleBuffered();
    java.awt.dnd.DropTarget var88 = var83.getDropTarget();
    var83.show(false);
    java.awt.Rectangle var91 = var83.getVisibleRect();
    var76.repaint(var91);
    java.awt.FocusTraversalPolicy var93 = var76.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var94 = var76.getInputMethodRequests();
    var76.layout();
    var76.setDebugGraphicsOptions(10);
    javax.swing.ActionMap var98 = var76.getActionMap();
    var18.setActionMap(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test221");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    int var4 = var2.getR();
    int var5 = var2.getType();
    int var6 = var2.getType();
    var2.hit();
    int var8 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test222");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    java.awt.dnd.DropTarget var25 = var20.getDropTarget();
    boolean var26 = var20.isFocusCycleRoot();
    var20.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var37 = var31.getUI();
    var20.setNextFocusableComponent((java.awt.Component)var31);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.setInheritsPopupMenu(false);
    var39.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    var47.repaint();
    java.awt.im.InputMethodRequests var50 = var47.getInputMethodRequests();
    java.awt.GraphicsConfiguration var51 = var47.getGraphicsConfiguration();
    java.awt.Component var52 = var39.add((java.awt.Component)var47);
    java.awt.Rectangle var53 = var39.getBounds();
    var31.paintImmediately(var53);
    var0.computeVisibleRect(var53);
    var0.setSize(24, 505);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test223");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var0.repaint(25, 25, 24, 10);
    var0.transferFocusBackward();
    java.awt.Component var62 = var0.getComponentAt(100, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test224");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    var4.nextFocus();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var9.setForeground(var14);
    var4.setBackground(var14);
    var0.setBackground(var14);
    boolean var18 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.setName("");
    int var22 = var19.getX();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    var23.setBackground(var33);
    var19.setBackground(var33);
    var0.setBackground(var33);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    java.awt.Point var47 = var38.getMousePosition(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    java.awt.dnd.DropTarget var59 = var54.getDropTarget();
    var54.show(false);
    java.awt.Rectangle var62 = var54.getVisibleRect();
    java.awt.Rectangle var63 = var48.getBounds(var62);
    var38.scrollRectToVisible(var62);
    var0.paintImmediately(var62);
    var0.firePropertyChange("hi!", 1L, 100L);
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)100, (short)10);
    java.awt.Color var74 = var0.getForeground();
    int var75 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test225");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    float var14 = var0.getAlignmentX();
    var0.enable(true);
    boolean var17 = var0.isPaintingTile();
    boolean var18 = var0.isValidateRoot();
    boolean var19 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test226");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    float var6 = var0.getAlignmentY();
    var0.repaint((-1L));
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var15 = var9.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var16 = var9.getComponentListeners();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.repaint(1L);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    var24.list();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    java.awt.dnd.DropTarget var35 = var30.getDropTarget();
    var30.show(false);
    java.awt.Rectangle var38 = var30.getVisibleRect();
    java.awt.Rectangle var39 = var24.getBounds(var38);
    var17.setBounds(var39);
    var9.paintImmediately(var39);
    var0.scrollRectToVisible(var39);
    var0.setDoubleBuffered(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var51 = var45.getUI();
    java.awt.im.InputMethodRequests var52 = var45.getInputMethodRequests();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    var53.nextFocus();
    var53.updateUI();
    var53.enableInputMethods(true);
    var53.setSize((-1), 1);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    var64.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var45.add((java.awt.Component)var53, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var70 = var0.getComponentZOrder((java.awt.Component)var53);
    java.awt.Dimension var71 = var53.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test227");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    java.awt.Point var6 = var0.getMousePosition();
    boolean var7 = var0.getAutoscrolls();
    var0.setBounds(500, 100, 1, 1);
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    java.awt.Dimension var19 = var15.getPreferredSize();
    java.awt.Toolkit var20 = var15.getToolkit();
    boolean var21 = var15.isFocusable();
    javax.swing.KeyStroke[] var22 = var15.getRegisteredKeyStrokes();
    var15.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.reshape((-1), 1, (-1), 10);
    var25.disable();
    boolean var36 = var25.isFocusable();
    int var37 = var25.getHeight();
    javax.swing.InputVerifier var38 = var25.getInputVerifier();
    java.awt.Graphics var39 = var25.getGraphics();
    java.awt.Color var40 = var25.getForeground();
    var15.setBackground(var40);
    var0.setForeground(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test228");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    boolean var13 = var0.isManagingFocus();
    java.awt.Image var16 = var0.createImage(1, 10);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    java.awt.Dimension var27 = var23.getPreferredSize();
    var17.setMaximumSize(var27);
    boolean var29 = var17.getVerifyInputWhenFocusTarget();
    int var30 = var17.getX();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    var31.setEnabled(false);
    var0.add((java.awt.Component)var17, (java.lang.Object)false);
    boolean var38 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test229");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Rectangle var4 = var0.bounds();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    boolean var6 = var0.isMaximumSizeSet();
    java.awt.LayoutManager var7 = var0.getLayout();
    boolean var8 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    var9.updateUI();
    var9.enableInputMethods(true);
    java.awt.Point var17 = var9.getMousePosition();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    boolean var26 = var18.isPaintingForPrint();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var33 = var27.getMouseListeners();
    int var34 = var27.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var35 = var27.getInputMethodRequests();
    var18.addKeyListener((java.awt.event.KeyListener)var27);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    var37.list();
    float var43 = var37.getAlignmentY();
    boolean var44 = var27.isFocusCycleRoot((java.awt.Container)var37);
    var37.firePropertyChange("", 1L, 1L);
    var37.setVerifyInputWhenFocusTarget(true);
    var37.resize(25, 400);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var60 = var54.getMouseListeners();
    java.awt.Dimension var61 = var54.getPreferredSize();
    java.beans.PropertyChangeListener[] var62 = var54.getPropertyChangeListeners();
    java.awt.LayoutManager var63 = var54.getLayout();
    var37.setLayout(var63);
    var9.removeKeyListener((java.awt.event.KeyListener)var37);
    boolean var66 = var0.isAncestorOf((java.awt.Component)var9);
    var0.reshape(2, 400, 99, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test230");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    java.awt.Insets var35 = var0.insets();
    boolean var36 = var0.isFocusTraversalPolicySet();
    boolean var37 = var0.isOpaque();
    java.awt.Component var40 = var0.getComponentAt(10, 498);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test231");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getRequiredPower();
    int var7 = var0.getR();
    var0.increasePower(25);
    int var10 = var0.getLives();
    int var11 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test232");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    boolean var27 = var0.isPaintingForPrint();
    int var28 = var0.getComponentCount();
    boolean var29 = var0.isFontSet();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test233");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var36 = var30.getUI();
    java.awt.im.InputMethodRequests var37 = var30.getInputMethodRequests();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.setSize((-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var30.add((java.awt.Component)var38, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    var55.setInheritsPopupMenu(false);
    boolean var61 = var55.isDoubleBuffered();
    boolean var62 = var55.isMinimumSizeSet();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    java.awt.Dimension var73 = var69.getPreferredSize();
    var63.setMaximumSize(var73);
    boolean var75 = var63.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var76 = var63.getAccessibleContext();
    boolean var77 = var63.isDoubleBuffered();
    java.awt.Rectangle var78 = var63.getVisibleRect();
    var55.setBounds(var78);
    java.awt.Rectangle var80 = var30.getBounds(var78);
    var0.computeVisibleRect(var78);
    java.awt.FocusTraversalPolicy var82 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test234");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isForegroundSet();
    java.awt.event.KeyListener[] var10 = var0.getKeyListeners();
    java.util.Locale var11 = var0.getLocale();
    javax.swing.JComponent.setDefaultLocale(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test235");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test236");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    boolean var15 = var0.isValid();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    var16.nextFocus();
    var16.reshape((-1), 1, (-1), 10);
    var16.disable();
    java.awt.Component var29 = var16.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    var30.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var35 = var30.getUI();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    var36.repaint(1L);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    var43.setMaximumSize(var53);
    var36.setPreferredSize(var53);
    var30.setMaximumSize(var53);
    var16.setSize(var53);
    java.awt.Container var58 = var16.getParent();
    java.awt.Dimension var59 = var16.getPreferredSize();
    var0.resize(var59);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    var61.nextFocus();
    var61.repaint(1L);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    java.awt.Dimension var78 = var74.getPreferredSize();
    var68.setMaximumSize(var78);
    var61.setPreferredSize(var78);
    javax.swing.plaf.PanelUI var81 = var61.getUI();
    var0.addKeyListener((java.awt.event.KeyListener)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test237");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.Dimension var5 = var0.getSize();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    var6.nextFocus();
    var6.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    var16.repaint();
    var16.setRequestFocusEnabled(false);
    var16.reshape(100, 0, 100, 0);
    java.awt.Component var26 = var6.add((java.awt.Component)var16);
    boolean var27 = var16.isEnabled();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.setInheritsPopupMenu(false);
    var28.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    var36.list();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    java.awt.dnd.DropTarget var47 = var42.getDropTarget();
    var42.show(false);
    java.awt.Rectangle var50 = var42.getVisibleRect();
    java.awt.Rectangle var51 = var36.getBounds(var50);
    javax.swing.JToolTip var52 = var36.createToolTip();
    var28.removeKeyListener((java.awt.event.KeyListener)var36);
    javax.swing.TransferHandler var54 = var28.getTransferHandler();
    var28.transferFocus();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    java.awt.Dimension var62 = var58.getPreferredSize();
    boolean var63 = var58.getVerifyInputWhenFocusTarget();
    java.awt.Component var66 = var58.findComponentAt(10, 1);
    var56.addKeyListener((java.awt.event.KeyListener)var58);
    java.awt.Dimension var68 = var58.getMinimumSize();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    java.awt.Color var70 = var69.getBackground();
    var69.repaint();
    var69.setRequestFocusEnabled(false);
    var69.reshape(100, 0, 100, 0);
    var69.requestFocus();
    java.awt.Rectangle var80 = var69.getVisibleRect();
    var58.setBounds(var80);
    var28.scrollRectToVisible(var80);
    var16.setBounds(var80);
    var0.setBounds(var80);
    var0.show();
    boolean var86 = var0.isPaintingTile();
    boolean var87 = var0.isFocusCycleRoot();
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test238");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var0.firePropertyChange("", false, true);
    boolean var16 = var0.requestFocusInWindow();
    boolean var17 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test239");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isEnabled();
    javax.swing.ActionMap var22 = var10.getActionMap();
    javax.swing.border.Border var23 = var10.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test240");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    javax.swing.TransferHandler var18 = var0.getTransferHandler();
    java.awt.Component var19 = var0.getNextFocusableComponent();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    java.awt.Color var21 = var20.getBackground();
    boolean var24 = var20.inside(0, (-1));
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var25.setForeground(var30);
    var20.setForeground(var30);
    var0.setForeground(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test241");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    java.util.Locale var7 = var0.getLocale();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    var8.repaint();
    java.awt.im.InputMethodRequests var11 = var8.getInputMethodRequests();
    var8.setDoubleBuffered(true);
    var8.setInheritsPopupMenu(false);
    javax.swing.InputMap var16 = var8.getInputMap();
    var8.doLayout();
    java.awt.LayoutManager var18 = var8.getLayout();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.reshape((-1), 1, (-1), 10);
    var19.disable();
    java.awt.LayoutManager var30 = var19.getLayout();
    java.awt.Container var31 = var19.getParent();
    boolean var32 = var19.isPaintingForPrint();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    java.awt.Color var44 = var43.getBackground();
    var43.repaint();
    var43.setRequestFocusEnabled(false);
    var43.reshape(100, 0, 100, 0);
    java.awt.Component var53 = var33.add((java.awt.Component)var43);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    var54.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var59 = var54.getUI();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.repaint(1L);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    var60.setPreferredSize(var77);
    var54.setMaximumSize(var77);
    java.awt.Dimension var81 = var43.getSize(var77);
    var19.setSize(var81);
    java.awt.Dimension var83 = var8.getSize(var81);
    java.awt.Dimension var84 = var0.getSize(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test242");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    java.awt.event.MouseWheelListener[] var7 = var0.getMouseWheelListeners();
    boolean var8 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test243");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    var0.setAlignmentY(100.0f);
    var0.setAlignmentX(0.0f);
    java.beans.PropertyChangeListener[] var11 = var0.getPropertyChangeListeners();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    boolean var14 = var12.hasFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.reshape((-1), 1, (-1), 10);
    var15.disable();
    java.awt.LayoutManager var26 = var15.getLayout();
    var15.setVisible(false);
    var12.remove((java.awt.Component)var15);
    var15.repaint();
    boolean var31 = var15.hasFocus();
    java.awt.Point var33 = var15.getMousePosition(false);
    java.awt.Component var34 = var0.add((java.awt.Component)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test244");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    boolean var20 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test245");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.loseLife();
    var0.setDown(true);
    int var7 = var0.getRequiredPower();
    var0.setUp(true);
    java.awt.image.BufferedImage var11 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var12 = var0.getScore();
    int var13 = var0.getR();
    var0.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 25);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test246");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Container var8 = var0.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.removeNotify();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    float var18 = var12.getAlignmentY();
    java.awt.Insets var19 = var12.getInsets();
    java.awt.Insets var20 = var9.getInsets(var19);
    java.awt.Insets var21 = var0.getInsets(var20);
    boolean var22 = var0.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    var23.updateUI();
    java.util.Locale var29 = var23.getLocale();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.updateUI();
    var33.enableInputMethods(true);
    var30.add((java.awt.Component)var31, (java.lang.Object)true);
    boolean var42 = var30.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var43 = var30.getHierarchyListeners();
    int var44 = var30.getComponentCount();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var45.repaint();
    var45.setRequestFocusEnabled(false);
    var45.removeAll();
    var30.setNextFocusableComponent((java.awt.Component)var45);
    java.awt.event.KeyListener[] var52 = var45.getKeyListeners();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    var0.add((java.awt.Component)var23, (java.lang.Object)var45);
    java.awt.Rectangle var55 = var23.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test247");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    java.awt.im.InputContext var21 = var10.getInputContext();
    var10.enableInputMethods(true);
    var10.setLocation(100, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test248");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    java.awt.Toolkit var6 = var0.getToolkit();
    var0.enable(false);
    java.awt.Color var9 = var0.getForeground();
    java.awt.Dimension var10 = var0.getPreferredSize();
    java.awt.image.VolatileImage var13 = var0.createVolatileImage(100, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test249");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    var0.setAutoscrolls(true);
    boolean var21 = var0.requestFocus(true);
    java.awt.Color var22 = var0.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test250");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.disable();
    java.awt.peer.ComponentPeer var30 = var19.getPeer();
    javax.swing.border.Border var31 = var19.getBorder();
    var19.firePropertyChange("SpaceWar.SpacePanel[,100,0,100x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1L), 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test251");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    java.awt.Color var26 = var25.getBackground();
    var21.setForeground(var26);
    javax.swing.InputMap var28 = var21.getInputMap();
    var0.setInputMap(1, var28);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0d, 1.0d);
    java.awt.image.BufferedImage var35 = var0.loadImg("hi!");
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 284.06998599257884d, 596.7541610319765d);
    java.awt.event.MouseWheelListener[] var40 = var0.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test252");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    var0.loseLife();
    var0.setRigth(false);
    int var7 = var0.getR();
    var0.setUp(true);
    var0.setLife((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 25);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test253");


    SpaceWar.Text var4 = new SpaceWar.Text(303.60543962277467d, 388.0925419430599d, 1L, "SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test254");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(83.657626403857d, 1, 24);
    double var4 = var3.getY();
    boolean var5 = var3.update();
    boolean var6 = var3.update();
    double var7 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 24.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3.2093874710972052d);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test255");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.loseLife();
    int var5 = var0.getX();
    var0.setLife(2);
    var0.setFiring(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 400);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test256");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    int var2 = var0.getLives();
    var0.setUp(false);
    boolean var5 = var0.isDead();
    int var6 = var0.getPower();
    var0.loseLife();
    int var8 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test257");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.setInheritsPopupMenu(false);
    var24.move(10, 10);
    var24.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.event.KeyListener[] var37 = var24.getKeyListeners();
    var9.removeKeyListener((java.awt.event.KeyListener)var24);
    boolean var39 = var9.isCursorSet();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    boolean var42 = var40.hasFocus();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.reshape((-1), 1, (-1), 10);
    var43.disable();
    java.awt.LayoutManager var54 = var43.getLayout();
    var43.setVisible(false);
    var40.remove((java.awt.Component)var43);
    var43.repaint();
    boolean var59 = var43.hasFocus();
    java.awt.event.MouseWheelListener[] var60 = var43.getMouseWheelListeners();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.setVisible(false);
    java.awt.Dimension var71 = var67.getPreferredSize();
    var61.setMaximumSize(var71);
    boolean var73 = var61.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var74 = var61.getToolkit();
    java.awt.Dimension var75 = var61.minimumSize();
    var43.setPreferredSize(var75);
    java.awt.Dimension var77 = var9.getSize(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test258");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    javax.swing.plaf.PanelUI var15 = var0.getUI();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1.0f, 0.5f);
    var0.setSize(24, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test259");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    int var5 = var0.getR();
    boolean var6 = var0.isRecovering();
    int var7 = var0.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 25);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test260");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.image.ColorModel var9 = var0.getColorModel();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var16 = var10.getMouseListeners();
    int var17 = var10.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    var10.paintImmediately(var26);
    boolean var28 = var10.isFocusCycleRoot();
    java.awt.image.VolatileImage var31 = var10.createVolatileImage(500, 0);
    var10.enable();
    var10.firePropertyChange("PanelUI", (byte)10, (byte)(-1));
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    java.awt.dnd.DropTarget var42 = var37.getDropTarget();
    var37.show(false);
    boolean var45 = var37.isPaintingForPrint();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var52 = var46.getMouseListeners();
    int var53 = var46.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var54 = var46.getInputMethodRequests();
    var37.addKeyListener((java.awt.event.KeyListener)var46);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.reshape((-1), 1, (-1), 10);
    var56.disable();
    java.awt.LayoutManager var67 = var56.getLayout();
    java.awt.Container var68 = var56.getParent();
    boolean var69 = var56.isOptimizedDrawingEnabled();
    var56.grabFocus();
    int var71 = var56.getHeight();
    java.util.Set var73 = var56.getFocusTraversalKeys(3);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    boolean var78 = var74.isDoubleBuffered();
    java.awt.dnd.DropTarget var79 = var74.getDropTarget();
    java.awt.Point var80 = var74.getMousePosition();
    java.lang.String var81 = var74.getUIClassID();
    var74.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '4');
    boolean var86 = var74.requestDefaultFocus();
    java.awt.Point var88 = var74.getMousePosition(false);
    java.awt.Rectangle var89 = var74.getBounds();
    var56.repaint(var89);
    var46.setBounds(var89);
    var10.paintImmediately(var89);
    var0.computeVisibleRect(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "PanelUI"+ "'", var81.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test261");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    java.awt.Component var18 = var10.findComponentAt(10, 1);
    var8.addKeyListener((java.awt.event.KeyListener)var10);
    var10.repaint(100, (-1), (-1), 1);
    boolean var25 = var0.isAncestorOf((java.awt.Component)var10);
    var0.setFocusable(false);
    java.awt.ComponentOrientation var28 = var0.getComponentOrientation();
    java.awt.Component[] var29 = var0.getComponents();
    java.awt.event.FocusListener[] var30 = var0.getFocusListeners();
    java.lang.String var31 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test262");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    var0.enableInputMethods(true);
    boolean var27 = var0.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test263");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var14 = var8.getMouseListeners();
    int var15 = var8.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    java.awt.Rectangle var24 = var16.getVisibleRect();
    var8.paintImmediately(var24);
    var8.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '#');
    var8.list();
    java.awt.Rectangle var31 = var8.getBounds();
    var0.scrollRectToVisible(var31);
    SpaceWar.Player var33 = new SpaceWar.Player();
    boolean var34 = var33.isRecovering();
    var33.setRigth(false);
    int var37 = var33.getPowerLevel();
    var33.increasePower((-1));
    java.lang.Object var40 = var0.getClientProperty((java.lang.Object)(-1));
    var0.setFocusable(true);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    boolean var47 = var43.isDoubleBuffered();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    var43.show(false);
    java.awt.Rectangle var51 = var43.getVisibleRect();
    java.awt.image.BufferedImage var53 = var43.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var54 = var43.getComponentOrientation();
    javax.swing.plaf.PanelUI var55 = var43.getUI();
    var43.doLayout();
    boolean var57 = var43.isOptimizedDrawingEnabled();
    java.awt.Dimension var58 = var43.minimumSize();
    java.awt.Dimension var59 = var0.getSize(var58);
    int var60 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test264");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    boolean var9 = var0.isFocusable();
    java.lang.String var10 = var0.getUIClassID();
    boolean var11 = var0.isPaintingTile();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    var12.repaint();
    java.awt.im.InputMethodRequests var15 = var12.getInputMethodRequests();
    var12.setDoubleBuffered(true);
    var12.show(false);
    boolean var20 = var12.isPaintingForPrint();
    var12.repaint(100L);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    var23.reshape((-1), 1, (-1), 10);
    var23.disable();
    java.awt.LayoutManager var34 = var23.getLayout();
    var23.setVisible(false);
    javax.accessibility.AccessibleContext var37 = var23.getAccessibleContext();
    java.awt.Point var38 = var23.getLocation();
    var12.setLocation(var38);
    java.awt.Component var40 = var0.getComponentAt(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "PanelUI"+ "'", var10.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test265");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.setDown(false);
    java.awt.image.BufferedImage var10 = var0.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var11 = var0.isRecovering();
    var0.setUp(true);
    int var14 = var0.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 25);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test266");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.loseLife();
    int var8 = var0.getY();
    boolean var9 = var0.isRecovering();
    int var10 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 400);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test267");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var0.isMinimumSizeSet();
    javax.swing.InputMap var22 = var0.getInputMap();
    java.awt.LayoutManager var23 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test268");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.removeAll();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    boolean var14 = var6.isPaintingForPrint();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var21 = var15.getMouseListeners();
    int var22 = var15.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var23 = var15.getInputMethodRequests();
    var6.addKeyListener((java.awt.event.KeyListener)var15);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    var25.list();
    float var31 = var25.getAlignmentY();
    boolean var32 = var15.isFocusCycleRoot((java.awt.Container)var25);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    var34.nextFocus();
    var34.updateUI();
    java.awt.Component var40 = var15.add("", (java.awt.Component)var34);
    boolean var41 = var0.isAncestorOf((java.awt.Component)var34);
    boolean var43 = var34.requestFocus(true);
    var34.reshape(2, 400, 2, 10);
    java.awt.Component var51 = var34.locate(0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test269");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(99, 341.4774144340512d, 590.8075763025306d);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test270");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.setNextFocusableComponent((java.awt.Component)var11);
    java.awt.Component var21 = var0.locate(500, 3);
    var0.setVisible(true);
    var0.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test271");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    var0.update();
    java.awt.image.BufferedImage var6 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var7 = var0.isDead();
    var0.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test272");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    var0.enable(true);
    var0.enable();
    java.awt.Point var6 = var0.location();
    var0.repaint(0, 3, (-1), 1);
    var0.setBounds(25, 100, 1, 0);
    var0.validate();
    var0.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test273");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    java.awt.event.FocusListener[] var13 = var1.getFocusListeners();
    java.awt.Dimension var14 = var1.preferredSize();
    java.awt.im.InputContext var15 = var1.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test274");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    java.util.Locale var7 = var0.getLocale();
    boolean var8 = var0.isEnabled();
    java.awt.im.InputContext var9 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test275");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.disable();
    var19.updateUI();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var32 = var19.getFocusTraversalKeys((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test276");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    boolean var26 = var8.isMaximumSizeSet();
    java.beans.PropertyChangeListener[] var28 = var8.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    boolean var31 = var29.hasFocus();
    boolean var32 = var29.isPreferredSizeSet();
    var29.firePropertyChange("", (short)1, (short)0);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.firePropertyChange("", (-1), 1);
    boolean var43 = var37.isFocusOwner();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    java.awt.Dimension var49 = var45.getPreferredSize();
    java.awt.Toolkit var50 = var45.getToolkit();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    var51.setName("");
    int var54 = var51.getX();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    var55.nextFocus();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    java.awt.Color var65 = var64.getBackground();
    var60.setForeground(var65);
    var55.setBackground(var65);
    var51.setBackground(var65);
    var45.setForeground(var65);
    var37.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var65);
    boolean var71 = var37.isEnabled();
    java.awt.event.ComponentListener[] var72 = var37.getComponentListeners();
    java.awt.Dimension var73 = var37.getPreferredSize();
    var29.setSize(var73);
    java.awt.Dimension var75 = var8.getSize(var73);
    var8.resize(25, 0);
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    float var80 = var79.getAlignmentX();
    var79.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var85 = new SpaceWar.SpacePanel();
    float var86 = var85.getAlignmentX();
    var85.setVisible(false);
    java.awt.Dimension var89 = var85.getPreferredSize();
    var79.setMaximumSize(var89);
    boolean var91 = var79.getVerifyInputWhenFocusTarget();
    int var92 = var79.getX();
    java.awt.Rectangle var93 = var79.bounds();
    var8.computeVisibleRect(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test277");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.loseLife();
    int var5 = var0.getX();
    var0.setLife(2);
    var0.setLife(0);
    var0.setScore(400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 400);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test278");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.setInheritsPopupMenu(false);
    boolean var31 = var25.isDoubleBuffered();
    boolean var32 = var25.isMinimumSizeSet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    boolean var45 = var33.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var46 = var33.getAccessibleContext();
    boolean var47 = var33.isDoubleBuffered();
    java.awt.Rectangle var48 = var33.getVisibleRect();
    var25.setBounds(var48);
    java.awt.Rectangle var50 = var0.getBounds(var48);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]", (byte)(-1), (byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test279");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Dimension var20 = var14.size();
    var0.setSize(var20);
    java.beans.VetoableChangeListener[] var22 = var0.getVetoableChangeListeners();
    javax.swing.JToolTip var23 = var0.createToolTip();
    var23.enable();
    java.awt.Insets var25 = var23.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test280");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var14.add((java.awt.Component)var15, (java.lang.Object)true);
    boolean var26 = var14.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var27 = var14.getHierarchyListeners();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    boolean var39 = var35.isDoubleBuffered();
    java.awt.dnd.DropTarget var40 = var35.getDropTarget();
    var35.show(false);
    java.awt.Rectangle var43 = var35.getVisibleRect();
    var28.repaint(var43);
    java.awt.FocusTraversalPolicy var45 = var28.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var46 = var28.getInputMethodRequests();
    var28.layout();
    boolean var48 = var28.isFocusTraversalPolicyProvider();
    java.lang.Object var49 = var14.getClientProperty((java.lang.Object)var48);
    boolean var50 = var14.isFocusTraversable();
    var1.remove((java.awt.Component)var14);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    java.awt.Color var53 = var52.getBackground();
    var52.repaint();
    var52.setRequestFocusEnabled(false);
    var52.reshape(100, 0, 100, 0);
    var52.requestFocus();
    java.awt.Rectangle var63 = var52.getVisibleRect();
    var14.repaint(var63);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    java.awt.Color var70 = var69.getBackground();
    var65.setForeground(var70);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    float var73 = var72.getAlignmentX();
    var72.setVisible(false);
    boolean var76 = var72.isDoubleBuffered();
    java.awt.dnd.DropTarget var77 = var72.getDropTarget();
    var72.show(false);
    java.awt.Rectangle var80 = var72.getVisibleRect();
    var65.repaint(var80);
    java.awt.Component.BaselineResizeBehavior var82 = var65.getBaselineResizeBehavior();
    var65.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1L, 1L);
    boolean var87 = var65.isFocusTraversable();
    boolean var88 = var14.isAncestorOf((java.awt.Component)var65);
    boolean var91 = var14.contains(10, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test281");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var28 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    java.awt.Dimension var33 = var29.getPreferredSize();
    java.awt.Toolkit var34 = var29.getToolkit();
    boolean var35 = var29.isFocusable();
    javax.swing.KeyStroke[] var36 = var29.getRegisteredKeyStrokes();
    java.awt.Component var39 = var29.getComponentAt(100, 100);
    java.lang.Object var40 = var29.getTreeLock();
    boolean var43 = var29.inside(400, 0);
    java.awt.event.MouseWheelListener[] var44 = var29.getMouseWheelListeners();
    var29.enableInputMethods(true);
    boolean var47 = var0.isAncestorOf((java.awt.Component)var29);
    java.awt.event.MouseMotionListener[] var48 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test282");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    var1.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100.0d, 1.0d);
    var1.setLocation(24, 3);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    boolean var31 = var23.isPaintingForPrint();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var38 = var32.getMouseListeners();
    int var39 = var32.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var40 = var32.getInputMethodRequests();
    var23.addKeyListener((java.awt.event.KeyListener)var32);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    var42.list();
    float var48 = var42.getAlignmentY();
    boolean var49 = var32.isFocusCycleRoot((java.awt.Container)var42);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.updateUI();
    java.awt.Component var57 = var32.add("", (java.awt.Component)var51);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    java.awt.Color var60 = var59.getBackground();
    var59.repaint();
    var59.setRequestFocusEnabled(false);
    var59.reshape(100, 0, 100, 0);
    var59.requestFocus();
    var59.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var74 = var59.getLocation();
    java.awt.Dimension var75 = var59.size();
    java.awt.Component var76 = var32.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var59);
    java.awt.Point var77 = var76.getMousePosition();
    boolean var78 = var76.isValid();
    java.awt.Component var80 = var1.add(var76, 0);
    boolean var81 = var80.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test283");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(25, 278.4452028314304d, 218.4131012750485d);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test284");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    boolean var3 = var0.isDead();
    var0.setDown(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test285");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    int var8 = var0.getPowerLevel();
    var0.setDown(false);
    boolean var11 = var0.isRecovering();
    int var12 = var0.getRequiredPower();
    boolean var13 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test286");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.firePropertyChange("PanelUI", 10, 10);
    boolean var14 = var0.requestFocusInWindow();
    var0.grabFocus();
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test287");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.Insets var7 = var0.getInsets();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var14 = var8.getMouseListeners();
    var8.firePropertyChange("", 0.5f, 100.0f);
    var8.enable(false);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    java.awt.Dimension var27 = var23.getPreferredSize();
    boolean var28 = var23.getVerifyInputWhenFocusTarget();
    java.awt.Component var31 = var23.findComponentAt(10, 1);
    var21.addKeyListener((java.awt.event.KeyListener)var23);
    java.awt.Cursor var33 = var21.getCursor();
    java.awt.Dimension var34 = var21.getMinimumSize();
    var8.setSize(var34);
    java.awt.Dimension var36 = var0.getSize(var34);
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test288");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var9.isShowing();
    boolean var20 = var9.isOpaque();
    var9.grabFocus();
    var9.repaint(1L);
    java.awt.image.BufferedImage var25 = var9.loadImg("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test289");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    int var29 = var5.getBaseline(400, 25);
    var5.repaint(500, 0, 99, 505);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test290");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.removeAll();
    var0.paintImmediately(500, 500, 100, 2);
    boolean var11 = var0.isMaximumSizeSet();
    java.awt.LayoutManager var12 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test291");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    java.lang.Object var35 = var18.getTreeLock();
    var18.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test292");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    var0.resize(400, 2);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    var23.updateUI();
    var23.enableInputMethods(true);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    boolean var33 = var31.hasFocus();
    java.awt.Insets var34 = var31.getInsets();
    java.awt.Insets var35 = var23.getInsets(var34);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    var36.setName("");
    java.awt.Graphics var39 = var36.getGraphics();
    java.awt.event.MouseMotionListener[] var40 = var36.getMouseMotionListeners();
    boolean var41 = var36.getIgnoreRepaint();
    var36.transferFocusBackward();
    var0.putClientProperty((java.lang.Object)var34, (java.lang.Object)var36);
    int var44 = var0.getComponentCount();
    boolean var45 = var0.isOptimizedDrawingEnabled();
    boolean var46 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    java.lang.String var47 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test293");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    int var4 = var2.getR();
    int var5 = var2.getR();
    boolean var6 = var2.isDead();
    var2.explode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test294");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    java.awt.Component var18 = var10.findComponentAt(10, 1);
    var8.addKeyListener((java.awt.event.KeyListener)var10);
    var10.repaint(100, (-1), (-1), 1);
    boolean var25 = var0.isAncestorOf((java.awt.Component)var10);
    var0.nextFocus();
    var0.disable();
    java.awt.Dimension var28 = var0.size();
    var0.list();
    var0.resize(100, 0);
    var0.transferFocusBackward();
    java.beans.VetoableChangeListener[] var34 = var0.getVetoableChangeListeners();
    java.awt.Point var36 = var0.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test295");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isMinimumSizeSet();
    java.awt.Point var8 = var0.getMousePosition(true);
    var0.setVerifyInputWhenFocusTarget(false);
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test296");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.Insets var20 = var11.getInsets();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var27 = var21.getMouseListeners();
    java.awt.Dimension var28 = var21.getPreferredSize();
    java.util.Locale var29 = var21.getLocale();
    var21.setFocusable(true);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    var32.setRequestFocusEnabled(false);
    var32.setIgnoreRepaint(false);
    java.lang.String var39 = var32.toString();
    java.awt.Color var40 = var32.getBackground();
    var11.putClientProperty((java.lang.Object)var21, (java.lang.Object)var32);
    var11.revalidate();
    java.awt.event.ContainerListener[] var43 = var11.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var39.equals("SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test297");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var9.isShowing();
    boolean var20 = var9.isOpaque();
    var9.grabFocus();
    java.awt.event.HierarchyBoundsListener[] var22 = var9.getHierarchyBoundsListeners();
    java.beans.PropertyChangeListener[] var24 = var9.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var9.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test298");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    var9.repaint();
    java.awt.Point var20 = var9.location();
    java.awt.FocusTraversalPolicy var21 = var9.getFocusTraversalPolicy();
    var9.hide();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    var23.repaint();
    java.awt.im.InputMethodRequests var26 = var23.getInputMethodRequests();
    var23.setDoubleBuffered(true);
    var23.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var31 = var23.getUI();
    java.util.Set var33 = var23.getFocusTraversalKeys(3);
    var23.requestFocus();
    var23.setAlignmentX(0.0f);
    var23.reshape(0, 25, 10, 2);
    var23.hide();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.setInheritsPopupMenu(false);
    var43.setFocusTraversalPolicyProvider(true);
    boolean var53 = var43.inside(25, 3);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    java.awt.dnd.DropTarget var59 = var54.getDropTarget();
    var54.show(false);
    boolean var62 = var54.isPaintingForPrint();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    java.awt.Dimension var69 = var65.getPreferredSize();
    boolean var70 = var65.getVerifyInputWhenFocusTarget();
    java.awt.Component var73 = var65.findComponentAt(10, 1);
    var63.addKeyListener((java.awt.event.KeyListener)var65);
    java.awt.Dimension var75 = var65.getMinimumSize();
    var54.setMinimumSize(var75);
    var43.setPreferredSize(var75);
    boolean var79 = var43.requestFocus(true);
    var43.reshape((-1), 10, 24, 0);
    java.awt.event.MouseWheelListener[] var85 = var43.getMouseWheelListeners();
    java.awt.FocusTraversalPolicy var86 = var43.getFocusTraversalPolicy();
    var23.setFocusTraversalPolicy(var86);
    var9.setFocusTraversalPolicy(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test299");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    var1.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100.0d, 1.0d);
    boolean var20 = var1.isPaintingTile();
    var1.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test300");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.Rectangle var45 = var30.getBounds(var44);
    javax.swing.JToolTip var46 = var30.createToolTip();
    var22.removeKeyListener((java.awt.event.KeyListener)var30);
    var0.setComponentZOrder((java.awt.Component)var22, 0);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1.0f, 0.5f);
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test301");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    int var10 = var0.getDebugGraphicsOptions();
    var0.enableInputMethods(true);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Container var15 = var0.getFocusCycleRootAncestor();
    java.awt.Component.BaselineResizeBehavior var16 = var0.getBaselineResizeBehavior();
    java.lang.String var17 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "PanelUI"+ "'", var17.equals("PanelUI"));

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test302");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    java.awt.image.BufferedImage var21 = var0.loadImg("PanelUI");
    var0.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    boolean var28 = var24.inside(0, (-1));
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.reshape((-1), 1, (-1), 10);
    var30.disable();
    boolean var41 = var30.isFocusable();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var48 = var42.getUI();
    java.awt.im.InputMethodRequests var49 = var42.getInputMethodRequests();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.updateUI();
    var50.enableInputMethods(true);
    var50.setSize((-1), 1);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var42.add((java.awt.Component)var50, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var67 = var42.getKeyListeners();
    java.awt.FocusTraversalPolicy var68 = var42.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var74 = var69.getToolkit();
    var30.add((java.awt.Component)var42, (java.lang.Object)var69);
    var30.layout();
    java.awt.Component var77 = var24.add("", (java.awt.Component)var30);
    java.lang.Object var78 = var0.getClientProperty((java.lang.Object)var77);
    java.util.Locale var79 = var77.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test303");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getRequiredPower();
    int var7 = var0.getPower();
    var0.setLife(500);
    int var10 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test304");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setFocusCycleRoot(false);
    boolean var31 = var19.isPaintingTile();
    java.awt.Rectangle var32 = var19.getBounds();
    var19.repaint();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    java.awt.Rectangle var48 = var40.getVisibleRect();
    java.awt.Rectangle var49 = var34.getBounds(var48);
    javax.swing.JToolTip var50 = var34.createToolTip();
    var34.firePropertyChange("", false, false);
    var34.setFocusTraversalKeysEnabled(false);
    var34.setAlignmentY(100.0f);
    boolean var59 = var19.isAncestorOf((java.awt.Component)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test305");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(1.0d, 19.998476951563912d, 0, (-1));
    boolean var5 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test306");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var26 = var21.getUI();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.repaint(1L);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    var34.setMaximumSize(var44);
    var27.setPreferredSize(var44);
    var21.setMaximumSize(var44);
    java.awt.Dimension var48 = var10.getSize(var44);
    boolean var49 = var10.isFontSet();
    boolean var50 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var10);
    boolean var51 = var10.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test307");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    javax.swing.JToolTip var19 = var0.createToolTip();
    javax.swing.JRootPane var20 = var19.getRootPane();
    boolean var21 = var19.isMinimumSizeSet();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    var22.setMaximumSize(var32);
    boolean var34 = var22.getVerifyInputWhenFocusTarget();
    int var35 = var22.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    boolean var43 = var38.getVerifyInputWhenFocusTarget();
    java.awt.Component var46 = var38.findComponentAt(10, 1);
    var36.addKeyListener((java.awt.event.KeyListener)var38);
    var38.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    java.awt.Color var54 = var53.getBackground();
    var53.repaint();
    java.awt.im.InputMethodRequests var56 = var53.getInputMethodRequests();
    java.awt.GraphicsConfiguration var57 = var53.getGraphicsConfiguration();
    var38.remove((java.awt.Component)var53);
    java.awt.Font var59 = var53.getFont();
    var22.setFont(var59);
    boolean var61 = var22.isManagingFocus();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    java.awt.Color var63 = var62.getBackground();
    var62.repaint();
    var62.setRequestFocusEnabled(false);
    var62.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var72 = var62.getVetoableChangeListeners();
    java.awt.Rectangle var73 = var62.getVisibleRect();
    java.awt.Rectangle var74 = var22.getBounds(var73);
    var19.setBounds(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test308");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    boolean var17 = var16.getInheritsPopupMenu();
    var16.layout();
    var16.invalidate();
    java.beans.VetoableChangeListener[] var20 = var16.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test309");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    java.awt.Insets var20 = var0.getInsets();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var27.setForeground(var32);
    var21.setBackground(var32);
    java.awt.Point var35 = var21.location();
    java.awt.Point var36 = var0.getLocation(var35);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    java.awt.Dimension var47 = var43.getPreferredSize();
    var37.setMaximumSize(var47);
    boolean var49 = var37.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var50 = var37.getToolkit();
    java.awt.Dimension var51 = var37.minimumSize();
    var0.setNextFocusableComponent((java.awt.Component)var37);
    var37.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test310");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var0.repaint(25, 25, 24, 10);
    java.lang.Object var59 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test311");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    var6.repaint();
    var6.setRequestFocusEnabled(false);
    var6.reshape(100, 0, 100, 0);
    var6.requestFocus();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var23 = var17.getUI();
    java.awt.im.InputMethodRequests var24 = var17.getInputMethodRequests();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var25.setSize((-1), 1);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    var36.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var17.add((java.awt.Component)var25, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    var42.setName("");
    java.awt.ComponentOrientation var45 = var42.getComponentOrientation();
    var17.applyComponentOrientation(var45);
    var6.setComponentOrientation(var45);
    var0.applyComponentOrientation(var45);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var55 = var49.getUI();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    java.awt.Color var61 = var60.getBackground();
    var56.setForeground(var61);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    boolean var67 = var63.isDoubleBuffered();
    java.awt.dnd.DropTarget var68 = var63.getDropTarget();
    var63.show(false);
    java.awt.Rectangle var71 = var63.getVisibleRect();
    var56.repaint(var71);
    java.awt.FocusTraversalPolicy var73 = var56.getFocusTraversalPolicy();
    var56.resetKeyboardActions();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    boolean var79 = var75.isDoubleBuffered();
    java.awt.dnd.DropTarget var80 = var75.getDropTarget();
    var75.show(false);
    java.awt.Rectangle var83 = var75.getVisibleRect();
    var56.computeVisibleRect(var83);
    javax.swing.ActionMap var85 = var56.getActionMap();
    var49.setActionMap(var85);
    var0.setActionMap(var85);
    boolean var88 = var0.isValidateRoot();
    java.awt.event.MouseMotionListener[] var89 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test312");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var8.setAutoscrolls(true);
    java.awt.Image var29 = var8.createImage(400, 400);
    var8.enableInputMethods(true);
    javax.swing.plaf.PanelUI var32 = var8.getUI();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    java.awt.Color var34 = var33.getBackground();
    boolean var37 = var33.inside(0, (-1));
    var33.transferFocusUpCycle();
    javax.swing.JToolTip var39 = var33.createToolTip();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    boolean var48 = var40.isPaintingForPrint();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var55 = var49.getMouseListeners();
    int var56 = var49.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var57 = var49.getInputMethodRequests();
    var40.addKeyListener((java.awt.event.KeyListener)var49);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    boolean var63 = var59.isDoubleBuffered();
    var59.list();
    float var65 = var59.getAlignmentY();
    boolean var66 = var49.isFocusCycleRoot((java.awt.Container)var59);
    javax.swing.JPopupMenu var67 = var59.getComponentPopupMenu();
    var59.firePropertyChange("hi!", 3, 0);
    boolean var72 = var59.isValidateRoot();
    java.awt.Rectangle var73 = var59.getVisibleRect();
    java.awt.Rectangle var74 = var33.getBounds(var73);
    var8.paintImmediately(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test313");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var0.setMaximumSize(var17);
    java.awt.Dimension var19 = var0.preferredSize();
    boolean var20 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Rectangle var21 = var0.bounds();
    var0.repaint(24, 99, (-1), (-1));
    javax.swing.TransferHandler var27 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test314");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    java.lang.String var4 = var0.getToolTipText();
    java.awt.Point var5 = var0.getLocation();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    var6.repaint();
    var6.setRequestFocusEnabled(false);
    var6.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var16 = var6.getAncestorListeners();
    var6.setOpaque(true);
    var6.show();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var26 = var20.getMouseListeners();
    java.awt.Dimension var27 = var20.getPreferredSize();
    java.util.Locale var28 = var20.getLocale();
    java.awt.Font var29 = var20.getFont();
    java.awt.Container var30 = var20.getTopLevelAncestor();
    var0.add((java.awt.Component)var6, (java.lang.Object)var20);
    var6.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test315");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    int var8 = var0.getPowerLevel();
    var0.setDown(false);
    var0.setLeft(false);
    var0.update();
    int var14 = var0.getX();
    int var15 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test316");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    java.awt.dnd.DropTarget var27 = var8.getDropTarget();
    var8.repaint(3, 499, 400, 1);
    java.awt.Toolkit var33 = var8.getToolkit();
    var8.setFocusCycleRoot(true);
    var8.resize(498, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test317");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    java.awt.GraphicsConfiguration var10 = var4.getGraphicsConfiguration();
    java.awt.Container var11 = var4.getTopLevelAncestor();
    boolean var12 = var4.isOpaque();
    var4.repaint(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test318");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    java.awt.event.MouseMotionListener[] var10 = var0.getMouseMotionListeners();
    boolean var11 = var0.isManagingFocus();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    var12.nextFocus();
    var12.updateUI();
    var12.enableInputMethods(true);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    boolean var22 = var20.hasFocus();
    java.awt.Insets var23 = var20.getInsets();
    java.awt.Insets var24 = var12.getInsets(var23);
    var12.enable(true);
    var12.nextFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    boolean var39 = var35.isDoubleBuffered();
    java.awt.dnd.DropTarget var40 = var35.getDropTarget();
    var35.show(false);
    java.awt.Rectangle var43 = var35.getVisibleRect();
    var28.repaint(var43);
    java.awt.FocusTraversalPolicy var45 = var28.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.firePropertyChange("", (-1), 1);
    boolean var52 = var46.isFocusOwner();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    java.awt.Dimension var58 = var54.getPreferredSize();
    java.awt.Toolkit var59 = var54.getToolkit();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    var60.setName("");
    int var63 = var60.getX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    var64.nextFocus();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    java.awt.Color var74 = var73.getBackground();
    var69.setForeground(var74);
    var64.setBackground(var74);
    var60.setBackground(var74);
    var54.setForeground(var74);
    var46.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var74);
    var28.setBackground(var74);
    SpaceWar.SpacePanel var81 = new SpaceWar.SpacePanel();
    float var82 = var81.getAlignmentX();
    var81.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    float var88 = var87.getAlignmentX();
    var87.setVisible(false);
    SpaceWar.SpacePanel var91 = new SpaceWar.SpacePanel();
    java.awt.Color var92 = var91.getBackground();
    var87.setForeground(var92);
    var81.setBackground(var92);
    java.awt.Point var95 = var81.location();
    java.awt.Point var96 = var28.getLocation(var95);
    java.awt.Component var97 = var12.getComponentAt(var96);
    java.awt.Point var98 = var0.getLocation(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test319");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    java.lang.String var4 = var0.getToolTipText();
    java.awt.Point var5 = var0.getLocation();
    javax.swing.JPopupMenu var6 = var0.getComponentPopupMenu();
    boolean var7 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test320");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    var10.list();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    java.awt.Rectangle var24 = var16.getVisibleRect();
    java.awt.Rectangle var25 = var10.getBounds(var24);
    javax.swing.JToolTip var26 = var10.createToolTip();
    var10.firePropertyChange("", false, false);
    var10.validate();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.updateUI();
    var32.enableInputMethods(true);
    java.lang.String var40 = var32.toString();
    var0.putClientProperty((java.lang.Object)var10, (java.lang.Object)var32);
    boolean var42 = var32.isValid();
    java.awt.event.HierarchyBoundsListener[] var43 = var32.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var40,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var40.equals("SpaceWar.SpacePanel[,0,0,0var40,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test321");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    var8.setName("");
    java.awt.Graphics var11 = var8.getGraphics();
    java.awt.event.MouseMotionListener[] var12 = var8.getMouseMotionListeners();
    boolean var13 = var8.getIgnoreRepaint();
    var8.transferFocusBackward();
    java.awt.Cursor var15 = var8.getCursor();
    var0.setCursor(var15);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    java.awt.Dimension var23 = var19.getPreferredSize();
    boolean var24 = var19.getVerifyInputWhenFocusTarget();
    java.awt.Component var27 = var19.findComponentAt(10, 1);
    var17.addKeyListener((java.awt.event.KeyListener)var19);
    var19.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var34.repaint();
    java.awt.im.InputMethodRequests var37 = var34.getInputMethodRequests();
    java.awt.GraphicsConfiguration var38 = var34.getGraphicsConfiguration();
    var19.remove((java.awt.Component)var34);
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 1.0f);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    java.awt.Dimension var48 = var44.getPreferredSize();
    boolean var49 = var44.getVerifyInputWhenFocusTarget();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    var50.setName("");
    int var53 = var50.getX();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    var54.nextFocus();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    var59.setForeground(var64);
    var54.setBackground(var64);
    var50.setBackground(var64);
    var19.add((java.awt.Component)var44, (java.lang.Object)var50);
    var0.setNextFocusableComponent((java.awt.Component)var50);
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test322");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPower();
    boolean var3 = var0.isRecovering();
    int var4 = var0.getPowerLevel();
    int var5 = var0.getR();
    var0.setUp(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 25);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test323");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var9 = var0.getMousePosition(false);
    java.awt.Point var10 = var0.getMousePosition();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.updateUI();
    var14.enableInputMethods(true);
    var11.add((java.awt.Component)var12, (java.lang.Object)true);
    boolean var23 = var11.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var24 = var11.getHierarchyListeners();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    java.awt.Color var30 = var29.getBackground();
    var25.setForeground(var30);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    var25.repaint(var40);
    java.awt.FocusTraversalPolicy var42 = var25.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var43 = var25.getInputMethodRequests();
    var25.layout();
    boolean var45 = var25.isFocusTraversalPolicyProvider();
    java.lang.Object var46 = var11.getClientProperty((java.lang.Object)var45);
    java.awt.Dimension var47 = var11.getSize();
    var0.resize(var47);
    var0.setRequestFocusEnabled(true);
    java.awt.Insets var51 = var0.getInsets();
    java.awt.Dimension var52 = var0.minimumSize();
    var0.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test324");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    var0.enable(true);
    var0.enable();
    java.awt.Point var6 = var0.location();
    var0.repaint(0, 3, (-1), 1);
    java.awt.Dimension var12 = var0.getPreferredSize();
    java.awt.Toolkit var13 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test325");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    java.awt.Dimension var8 = var0.minimumSize();
    java.awt.Point var9 = var0.getMousePosition();
    var0.resize(10, 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    java.awt.Dimension var23 = var19.getPreferredSize();
    var13.setMaximumSize(var23);
    boolean var25 = var13.getVerifyInputWhenFocusTarget();
    java.awt.Container var26 = var13.getTopLevelAncestor();
    java.awt.Cursor var27 = var13.getCursor();
    var13.layout();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var35 = var29.getMouseListeners();
    var29.firePropertyChange("", 0.5f, 100.0f);
    var29.enable(false);
    int var42 = var29.getDebugGraphicsOptions();
    java.awt.ComponentOrientation var43 = var29.getComponentOrientation();
    var13.applyComponentOrientation(var43);
    java.awt.event.MouseWheelListener[] var45 = var13.getMouseWheelListeners();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    java.awt.dnd.DropTarget var51 = var46.getDropTarget();
    var46.show(false);
    boolean var54 = var46.isPaintingForPrint();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var61 = var55.getMouseListeners();
    int var62 = var55.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var63 = var55.getInputMethodRequests();
    var46.addKeyListener((java.awt.event.KeyListener)var55);
    boolean var65 = var46.isDisplayable();
    var46.resize(400, 2);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    var69.nextFocus();
    var69.updateUI();
    var69.enableInputMethods(true);
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    float var78 = var77.getAlignmentX();
    boolean var79 = var77.hasFocus();
    java.awt.Insets var80 = var77.getInsets();
    java.awt.Insets var81 = var69.getInsets(var80);
    SpaceWar.SpacePanel var82 = new SpaceWar.SpacePanel();
    var82.setName("");
    java.awt.Graphics var85 = var82.getGraphics();
    java.awt.event.MouseMotionListener[] var86 = var82.getMouseMotionListeners();
    boolean var87 = var82.getIgnoreRepaint();
    var82.transferFocusBackward();
    var46.putClientProperty((java.lang.Object)var80, (java.lang.Object)var82);
    var0.putClientProperty((java.lang.Object)var13, (java.lang.Object)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test326");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    java.lang.String var11 = var0.getToolTipText();
    boolean var12 = var0.isLightweight();
    javax.swing.event.AncestorListener[] var13 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test327");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    java.awt.Toolkit var13 = var0.getToolkit();
    java.awt.Dimension var14 = var0.getMinimumSize();
    java.lang.String var15 = var0.toString();
    var0.disable();
    java.awt.Container var17 = var0.getParent();
    javax.swing.plaf.PanelUI var18 = var0.getUI();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    java.awt.Dimension var25 = var21.getPreferredSize();
    boolean var26 = var21.getVerifyInputWhenFocusTarget();
    java.awt.Component var29 = var21.findComponentAt(10, 1);
    var19.addKeyListener((java.awt.event.KeyListener)var21);
    var21.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var36 = var21.getColorModel();
    java.awt.event.MouseWheelListener[] var37 = var21.getMouseWheelListeners();
    var21.setRequestFocusEnabled(false);
    var0.removeKeyListener((java.awt.event.KeyListener)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var15,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var15.equals("SpaceWar.SpacePanel[,0,0,0var15,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test328");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isCursorSet();
    java.awt.Dimension var21 = var0.size();
    java.awt.image.BufferedImage var23 = var0.loadImg("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test329");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    java.awt.ComponentOrientation var10 = var0.getComponentOrientation();
    boolean var11 = var0.getAutoscrolls();
    java.awt.Dimension var12 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test330");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.setFocusCycleRoot(true);
    var0.requestFocus();
    boolean var6 = var0.requestFocus(true);
    var0.doLayout();
    var0.setLocation(10, 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test331");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    int var3 = var2.getR();
    double var4 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test332");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.removeAll();
    int var8 = var0.getHeight();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.removeNotify();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    float var18 = var12.getAlignmentY();
    java.awt.Insets var19 = var12.getInsets();
    java.awt.Insets var20 = var9.getInsets(var19);
    boolean var21 = var9.isDoubleBuffered();
    java.awt.Component var22 = var0.add((java.awt.Component)var9);
    var0.setBounds(24, 1, 100, 500);
    var0.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test333");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    var42.firePropertyChange("PanelUI", (short)1, (short)1);
    java.lang.String var89 = var42.getToolTipText();
    int var90 = var42.getDebugGraphicsOptions();
    var42.transferFocusUpCycle();
    java.awt.event.InputMethodListener[] var92 = var42.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test334");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Container var13 = var0.getTopLevelAncestor();
    java.awt.Cursor var14 = var0.getCursor();
    var0.layout();
    var0.setIgnoreRepaint(false);
    var0.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test335");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    boolean var26 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    boolean var35 = var27.isPaintingForPrint();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var42 = var36.getMouseListeners();
    int var43 = var36.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var44 = var36.getInputMethodRequests();
    var27.addKeyListener((java.awt.event.KeyListener)var36);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    var46.list();
    float var52 = var46.getAlignmentY();
    boolean var53 = var36.isFocusCycleRoot((java.awt.Container)var46);
    boolean var54 = var46.isEnabled();
    java.awt.Dimension var55 = var46.getMaximumSize();
    var8.setMinimumSize(var55);
    var8.disable();
    int var58 = var8.getComponentCount();
    var8.setAutoscrolls(true);
    java.awt.image.VolatileImage var63 = var8.createVolatileImage(100, 2);
    var8.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)1, (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test336");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    boolean var9 = var0.getIgnoreRepaint();
    var0.repaint(100, 10, 100, 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    javax.swing.JToolTip var31 = var15.createToolTip();
    var15.firePropertyChange("", false, false);
    var15.validate();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    java.awt.dnd.DropTarget var42 = var37.getDropTarget();
    var37.show(false);
    boolean var45 = var37.isPaintingForPrint();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var52 = var46.getMouseListeners();
    int var53 = var46.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var54 = var46.getInputMethodRequests();
    var37.addKeyListener((java.awt.event.KeyListener)var46);
    var46.repaint();
    java.awt.Point var57 = var46.location();
    java.awt.Component var58 = var15.getComponentAt(var57);
    var0.setLocation(var57);
    java.awt.peer.ComponentPeer var60 = var0.getPeer();
    var0.transferFocus();
    java.awt.Toolkit var62 = var0.getToolkit();
    boolean var63 = var0.isOpaque();
    boolean var64 = var0.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test337");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    java.awt.Point var33 = var0.getMousePosition();
    java.awt.image.BufferedImage var35 = var0.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3, 100);
    java.awt.ComponentOrientation var40 = var0.getComponentOrientation();
    var0.setAlignmentY(10.0f);
    java.awt.Insets var43 = var0.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test338");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    java.awt.Dimension var21 = var0.preferredSize();
    boolean var22 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test339");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    java.awt.Dimension var36 = var0.getSize();
    boolean var37 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.resetKeyboardActions();
    var0.removeKeyListener((java.awt.event.KeyListener)var38);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    boolean var56 = var48.isPaintingForPrint();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var63 = var57.getMouseListeners();
    int var64 = var57.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var65 = var57.getInputMethodRequests();
    var48.addKeyListener((java.awt.event.KeyListener)var57);
    boolean var67 = var48.isDisplayable();
    java.awt.Dimension var68 = var48.getPreferredSize();
    var0.setSize(var68);
    java.awt.Graphics var70 = var0.getGraphics();
    boolean var71 = var0.requestDefaultFocus();
    var0.setBounds(24, 2, 10, (-1));
    int var79 = var0.getBaseline(0, 10);
    boolean var80 = var0.isMaximumSizeSet();
    javax.accessibility.AccessibleContext var81 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test340");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Graphics var3 = var0.getGraphics();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    var4.nextFocus();
    var4.repaint(1L);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    var11.list();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    java.awt.Rectangle var26 = var11.getBounds(var25);
    var4.setBounds(var26);
    var0.paintImmediately(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test341");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.firePropertyChange("", 0.5f, 100.0f);
    var0.enable(false);
    int var13 = var0.getDebugGraphicsOptions();
    boolean var14 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test342");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    boolean var8 = var0.isFocusTraversalPolicySet();
    var0.transferFocusUpCycle();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    java.awt.Rectangle var18 = var10.getVisibleRect();
    java.awt.image.BufferedImage var20 = var10.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    java.awt.Component var22 = var0.add((java.awt.Component)var10);
    var0.enable();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.updateUI();
    var24.enableInputMethods(true);
    java.awt.Point var33 = var24.getMousePosition(false);
    java.awt.Component.BaselineResizeBehavior var34 = var24.getBaselineResizeBehavior();
    java.awt.Dimension var35 = var24.getPreferredSize();
    var24.show();
    java.lang.Object var37 = var0.getClientProperty((java.lang.Object)var24);
    javax.swing.InputMap var38 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test343");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    boolean var6 = var0.requestFocus(false);
    javax.swing.JPopupMenu var7 = var0.getComponentPopupMenu();
    boolean var8 = var0.isLightweight();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    javax.swing.event.AncestorListener[] var10 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test344");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    java.awt.Color var6 = var5.getBackground();
    var5.repaint();
    java.lang.Object var8 = var0.getClientProperty((java.lang.Object)var5);
    var5.repaint(10, 1, 25, 0);
    boolean var14 = var5.isPreferredSizeSet();
    int var15 = var5.getHeight();
    boolean var16 = var5.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test345");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPowerLevel();
    var0.setLeft(false);
    var0.setScore(400);
    int var7 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test346");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    var0.requestFocus();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    var20.setMaximumSize(var30);
    boolean var32 = var20.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var33 = var20.getToolkit();
    java.lang.String var34 = var20.getUIClassID();
    java.awt.Dimension var35 = var20.getMinimumSize();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.setInheritsPopupMenu(false);
    var36.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    boolean var48 = var44.isDoubleBuffered();
    var44.list();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    boolean var54 = var50.isDoubleBuffered();
    java.awt.dnd.DropTarget var55 = var50.getDropTarget();
    var50.show(false);
    java.awt.Rectangle var58 = var50.getVisibleRect();
    java.awt.Rectangle var59 = var44.getBounds(var58);
    javax.swing.JToolTip var60 = var44.createToolTip();
    var36.removeKeyListener((java.awt.event.KeyListener)var44);
    javax.swing.TransferHandler var62 = var36.getTransferHandler();
    boolean var63 = var36.requestFocusInWindow();
    var0.add((java.awt.Component)var20, (java.lang.Object)var36);
    java.awt.Insets var65 = var20.getInsets();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var72 = var66.getMouseListeners();
    java.awt.Dimension var73 = var66.getPreferredSize();
    java.util.Locale var74 = var66.getLocale();
    var66.setFocusable(true);
    var66.paintImmediately((-1), 10, 100, 25);
    boolean var82 = var66.isOpaque();
    var20.setNextFocusableComponent((java.awt.Component)var66);
    boolean var84 = var20.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "PanelUI"+ "'", var34.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test347");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.setDown(false);
    var0.loseLife();
    var0.loseLife();
    int var11 = var0.getPower();
    var0.setLife(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 24);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test348");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Dimension var12 = var2.getMinimumSize();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var13.repaint();
    var13.setRequestFocusEnabled(false);
    var13.reshape(100, 0, 100, 0);
    var13.requestFocus();
    java.awt.Rectangle var24 = var13.getVisibleRect();
    var2.setBounds(var24);
    var2.move(24, 10);
    var2.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)1, (short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test349");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    java.awt.Point var33 = var0.getMousePosition();
    var0.setRequestFocusEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test350");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.Rectangle var45 = var30.getBounds(var44);
    javax.swing.JToolTip var46 = var30.createToolTip();
    var22.removeKeyListener((java.awt.event.KeyListener)var30);
    var0.setComponentZOrder((java.awt.Component)var22, 0);
    var0.repaint();
    javax.swing.ActionMap var51 = var0.getActionMap();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)0, (short)0);
    boolean var56 = var0.hasFocus();
    var0.setLocation(1, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test351");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(500, 3);
    var2.explode();
    var2.hit();
    java.awt.image.BufferedImage var6 = var2.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test352");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    java.awt.Component var16 = var0.getComponentAt(100, 3);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    var17.enable(false);
    boolean var24 = var17.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    boolean var31 = var25.isFocusable();
    javax.swing.KeyStroke[] var32 = var25.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    java.awt.Dimension var39 = var35.getPreferredSize();
    boolean var40 = var35.getVerifyInputWhenFocusTarget();
    java.awt.Component var43 = var35.findComponentAt(10, 1);
    var33.addKeyListener((java.awt.event.KeyListener)var35);
    var35.repaint(100, (-1), (-1), 1);
    boolean var50 = var25.isAncestorOf((java.awt.Component)var35);
    var17.addKeyListener((java.awt.event.KeyListener)var35);
    java.awt.ComponentOrientation var52 = var17.getComponentOrientation();
    var0.setComponentOrientation(var52);
    boolean var55 = var0.requestFocus(true);
    java.util.Locale var56 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test353");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    boolean var15 = var0.isPaintingForPrint();
    int var16 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var17.add((java.awt.Component)var18, (java.lang.Object)true);
    java.awt.Dimension var29 = var18.getPreferredSize();
    var18.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    var18.removeNotify();
    java.awt.Dimension var35 = var18.size();
    java.awt.LayoutManager var36 = var18.getLayout();
    var0.setLayout(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test354");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    var16.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    var16.remove((java.awt.Component)var31);
    java.awt.Font var37 = var31.getFont();
    var0.setFont(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.reshape((-1), 1, (-1), 10);
    var39.disable();
    java.awt.LayoutManager var50 = var39.getLayout();
    var0.setLayout(var50);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    java.awt.Component var65 = var52.getNextFocusableComponent();
    float var66 = var52.getAlignmentY();
    java.awt.event.MouseListener[] var67 = var52.getMouseListeners();
    java.awt.Point var68 = var52.location();
    boolean var69 = var0.contains(var68);
    boolean var70 = var0.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test355");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.repaint();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    java.awt.Graphics var25 = var8.getGraphics();
    var8.setAutoscrolls(false);
    boolean var28 = var8.requestFocusInWindow();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.reshape((-1), 1, (-1), 10);
    var29.disable();
    java.awt.LayoutManager var40 = var29.getLayout();
    java.awt.Container var41 = var29.getParent();
    boolean var42 = var29.isOptimizedDrawingEnabled();
    java.awt.Font var43 = var29.getFont();
    java.awt.FontMetrics var44 = var8.getFontMetrics(var43);
    var0.setFont(var43);
    boolean var46 = var0.isCursorSet();
    java.awt.Dimension var47 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test356");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    var1.setFocusable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test357");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(false);
    boolean var12 = var0.isPaintingForPrint();
    boolean var13 = var0.getIgnoreRepaint();
    java.awt.FocusTraversalPolicy var14 = var0.getFocusTraversalPolicy();
    var0.setRequestFocusEnabled(true);
    java.awt.Rectangle var17 = var0.getBounds();
    var0.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test358");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isFocusTraversalPolicyProvider();
    java.awt.Insets var21 = var0.insets();
    java.awt.Dimension var22 = var0.getMinimumSize();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    java.awt.event.MouseWheelListener[] var31 = var23.getMouseWheelListeners();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var32.setForeground(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    var39.show(false);
    java.awt.Rectangle var47 = var39.getVisibleRect();
    var32.repaint(var47);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var55 = var49.getMouseListeners();
    java.awt.Dimension var56 = var49.getPreferredSize();
    java.util.Locale var57 = var49.getLocale();
    var32.setLocale(var57);
    java.util.Locale var59 = var32.getLocale();
    var23.setLocale(var59);
    var0.setLocale(var59);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    java.awt.Color var63 = var62.getBackground();
    var62.repaint();
    var62.setRequestFocusEnabled(false);
    var62.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var72 = var62.getVetoableChangeListeners();
    java.awt.Rectangle var73 = var62.getVisibleRect();
    float var74 = var62.getAlignmentY();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    java.awt.Color var76 = var75.getBackground();
    var75.repaint();
    java.awt.im.InputMethodRequests var78 = var75.getInputMethodRequests();
    int var79 = var75.countComponents();
    java.awt.Dimension var80 = var75.getSize();
    var62.setPreferredSize(var80);
    java.awt.Dimension var82 = var0.getSize(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var84 = var0.getInputMap(25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test359");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    var0.show();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    java.awt.Rectangle var27 = var12.getBounds(var26);
    javax.swing.JToolTip var28 = var12.createToolTip();
    var12.firePropertyChange("", false, false);
    var12.validate();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    boolean var42 = var34.isPaintingForPrint();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var49 = var43.getMouseListeners();
    int var50 = var43.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var51 = var43.getInputMethodRequests();
    var34.addKeyListener((java.awt.event.KeyListener)var43);
    var43.repaint();
    java.awt.Point var54 = var43.location();
    java.awt.Component var55 = var12.getComponentAt(var54);
    java.awt.Point var56 = var0.getLocation(var54);
    var0.setAlignmentY(0.5f);
    boolean var59 = var0.getVerifyInputWhenFocusTarget();
    boolean var60 = var0.isBackgroundSet();
    java.awt.Point var61 = var0.location();
    java.awt.Dimension var62 = var0.size();
    java.beans.VetoableChangeListener[] var63 = var0.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test360");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    boolean var18 = var3.hasFocus();
    java.lang.String var19 = var3.toString();
    java.awt.Component var22 = var3.findComponentAt(3, 24);
    java.awt.event.InputMethodListener[] var23 = var3.getInputMethodListeners();
    java.awt.Rectangle var24 = var3.bounds();
    javax.swing.JToolTip var25 = var3.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var19.equals("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test361");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    boolean var6 = var0.isRequestFocusEnabled();
    java.awt.Dimension var7 = var0.getSize();
    java.awt.Component var10 = var0.getComponentAt(2, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test362");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    boolean var10 = var0.inside((-1), 498);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test363");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    javax.swing.border.Border var12 = var0.getBorder();
    var0.setEnabled(false);
    java.awt.Graphics var15 = var0.getGraphics();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    boolean var24 = var16.isPaintingForPrint();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var31 = var25.getMouseListeners();
    int var32 = var25.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var33 = var25.getInputMethodRequests();
    var16.addKeyListener((java.awt.event.KeyListener)var25);
    boolean var35 = var16.isDisplayable();
    java.awt.Insets var36 = var16.getInsets();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    var43.setForeground(var48);
    var37.setBackground(var48);
    java.awt.Point var51 = var37.location();
    java.awt.Point var52 = var16.getLocation(var51);
    java.awt.Component var53 = var0.findComponentAt(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test364");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var8.doLayout();
    java.awt.event.MouseListener[] var26 = var8.getMouseListeners();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    var27.setRequestFocusEnabled(false);
    var27.reshape(100, 0, 100, 0);
    var27.requestFocus();
    java.awt.Rectangle var38 = var27.getVisibleRect();
    java.awt.Rectangle var39 = var27.getBounds();
    java.awt.im.InputMethodRequests var40 = var27.getInputMethodRequests();
    boolean var41 = var27.requestFocusInWindow();
    java.awt.Point var43 = var27.getMousePosition(false);
    var27.setDebugGraphicsOptions(1);
    java.awt.Graphics var46 = var27.getGraphics();
    var8.printComponents(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test365");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    java.awt.Component var18 = var10.findComponentAt(10, 1);
    var8.addKeyListener((java.awt.event.KeyListener)var10);
    var10.repaint(100, (-1), (-1), 1);
    boolean var25 = var0.isAncestorOf((java.awt.Component)var10);
    java.awt.Point var26 = var0.location();
    boolean var27 = var0.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test366");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(25, 382.22188660250424d, 396.44637138944637d);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test367");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    var0.doLayout();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    var21.setMaximumSize(var31);
    boolean var33 = var21.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var34 = var21.getToolkit();
    java.awt.Dimension var35 = var21.minimumSize();
    java.awt.Image var38 = var21.createImage((-1), 400);
    java.awt.event.MouseMotionListener[] var39 = var21.getMouseMotionListeners();
    java.awt.Component var40 = var0.add((java.awt.Component)var21);
    boolean var41 = var21.isPaintingForPrint();
    var21.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test368");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    float var14 = var0.getAlignmentX();
    var0.enable(true);
    boolean var17 = var0.isPaintingTile();
    javax.swing.plaf.PanelUI var18 = var0.getUI();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    java.awt.Dimension var23 = var19.getPreferredSize();
    java.awt.Toolkit var24 = var19.getToolkit();
    boolean var25 = var19.isFocusable();
    javax.swing.KeyStroke[] var26 = var19.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    java.awt.Dimension var33 = var29.getPreferredSize();
    boolean var34 = var29.getVerifyInputWhenFocusTarget();
    java.awt.Component var37 = var29.findComponentAt(10, 1);
    var27.addKeyListener((java.awt.event.KeyListener)var29);
    var29.repaint(100, (-1), (-1), 1);
    boolean var44 = var19.isAncestorOf((java.awt.Component)var29);
    var19.nextFocus();
    var19.disable();
    java.awt.Dimension var47 = var19.size();
    var19.list();
    var19.hide();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.reshape((-1), 1, (-1), 10);
    var50.disable();
    java.awt.LayoutManager var61 = var50.getLayout();
    boolean var64 = var50.contains((-1), 0);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    var65.nextFocus();
    var65.updateUI();
    var65.enableInputMethods(true);
    var65.setSize((-1), 1);
    java.awt.Component var76 = var50.add((java.awt.Component)var65);
    var65.nextFocus();
    boolean var78 = var65.hasFocus();
    javax.accessibility.AccessibleContext var79 = var65.getAccessibleContext();
    var0.putClientProperty((java.lang.Object)var19, (java.lang.Object)var65);
    var19.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test369");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    javax.swing.InputMap var9 = var0.getInputMap(1);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.updateUI();
    var13.enableInputMethods(true);
    var10.add((java.awt.Component)var11, (java.lang.Object)true);
    java.awt.Image var24 = var11.createImage(1, (-1));
    java.awt.event.MouseListener[] var25 = var11.getMouseListeners();
    java.awt.Color var26 = var11.getBackground();
    var11.grabFocus();
    boolean var28 = var0.isAncestorOf((java.awt.Component)var11);
    java.awt.event.HierarchyListener[] var29 = var0.getHierarchyListeners();
    var0.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test370");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    java.awt.Point var12 = var0.location();
    java.awt.Dimension var13 = var0.getMinimumSize();
    java.awt.Rectangle var14 = var0.bounds();
    var0.firePropertyChange("SpaceWar.SpacePanel[,499,2,499x500,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 12.0d, 215.19350638961689d);
    var0.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test371");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    float var18 = var0.getAlignmentX();
    java.awt.image.VolatileImage var21 = var0.createVolatileImage(25, 1);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    var22.setName("");
    java.awt.ComponentOrientation var25 = var22.getComponentOrientation();
    var0.remove((java.awt.Component)var22);
    java.awt.Dimension var27 = var22.minimumSize();
    java.lang.String var28 = var22.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test372");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    var8.setDebugGraphicsOptions(0);
    java.awt.im.InputMethodRequests var35 = var8.getInputMethodRequests();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var8.setForeground(var37);
    java.awt.Point var39 = var8.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test373");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.firePropertyChange("hi!", false, true);
    javax.swing.ActionMap var14 = var0.getActionMap();
    var0.setDebugGraphicsOptions(10);
    java.awt.LayoutManager var17 = var0.getLayout();
    var0.firePropertyChange("SpaceWar.SpacePanel[,100,0,100x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test374");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    var0.loseLife();
    var0.setDown(true);
    int var15 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test375");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    java.awt.image.BufferedImage var24 = var2.loadImg("hi!");
    java.awt.Component var27 = var2.locate(2, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test376");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    javax.swing.plaf.PanelUI var20 = var0.getUI();
    java.awt.Dimension var21 = var0.getMinimumSize();
    boolean var22 = var0.getInheritsPopupMenu();
    java.awt.event.ContainerListener[] var23 = var0.getContainerListeners();
    javax.swing.KeyStroke[] var24 = var0.getRegisteredKeyStrokes();
    javax.swing.JRootPane var25 = var0.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test377");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isCursorSet();
    var10.paintImmediately(3, 10, (-1), (-1));
    int var27 = var10.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 100);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test378");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    boolean var14 = var0.contains(2, (-1));
    java.awt.Point var16 = var0.getMousePosition(false);
    var0.transferFocusUpCycle();
    boolean var18 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test379");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.ComponentOrientation var3 = var0.getComponentOrientation();
    int var4 = var0.getComponentCount();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)1, (byte)0);
    var0.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test380");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    int var4 = var0.getLives();
    var0.setScore(0);
    var0.setLeft(false);
    var0.setDown(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test381");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    var0.setDown(false);
    var0.setRigth(false);
    var0.loseLife();
    var0.loseLife();
    int var9 = var0.getPowerLevel();
    var0.setFiring(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test382");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    var0.show();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    var12.setForeground(var17);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    java.awt.Rectangle var27 = var19.getVisibleRect();
    var12.repaint(var27);
    java.awt.FocusTraversalPolicy var29 = var12.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var30 = var12.getInputMethodRequests();
    var12.layout();
    java.awt.Point var32 = var12.getMousePosition();
    java.awt.Graphics var33 = var12.getGraphics();
    boolean var34 = var12.requestFocusInWindow();
    java.awt.image.ColorModel var35 = var12.getColorModel();
    var0.addKeyListener((java.awt.event.KeyListener)var12);
    java.awt.event.InputMethodListener[] var37 = var0.getInputMethodListeners();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    boolean var43 = var38.getVerifyInputWhenFocusTarget();
    java.awt.Component var46 = var38.findComponentAt(10, 1);
    boolean var47 = var38.requestDefaultFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    boolean var50 = var38.isPaintingForPrint();
    boolean var51 = var38.getIgnoreRepaint();
    java.awt.FocusTraversalPolicy var52 = var38.getFocusTraversalPolicy();
    var38.setRequestFocusEnabled(true);
    java.awt.Rectangle var55 = var38.getBounds();
    var0.repaint(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test383");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var8.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 2, 10);
    var8.removeAll();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    java.awt.Dimension var36 = var32.getPreferredSize();
    boolean var37 = var32.getVerifyInputWhenFocusTarget();
    java.awt.Component var40 = var32.findComponentAt(10, 1);
    var30.addKeyListener((java.awt.event.KeyListener)var32);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    java.awt.Dimension var48 = var44.getPreferredSize();
    boolean var49 = var44.getVerifyInputWhenFocusTarget();
    java.awt.Component var52 = var44.findComponentAt(10, 1);
    var42.addKeyListener((java.awt.event.KeyListener)var44);
    var44.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var59 = var44.getColorModel();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    boolean var64 = var60.isDoubleBuffered();
    var60.list();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    boolean var70 = var66.isDoubleBuffered();
    java.awt.dnd.DropTarget var71 = var66.getDropTarget();
    var66.show(false);
    java.awt.Rectangle var74 = var66.getVisibleRect();
    java.awt.image.BufferedImage var76 = var66.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var77 = var60.isAncestorOf((java.awt.Component)var66);
    javax.swing.InputVerifier var78 = var66.getInputVerifier();
    var32.putClientProperty((java.lang.Object)var44, (java.lang.Object)var66);
    javax.swing.JToolTip var80 = var32.createToolTip();
    boolean var81 = var80.isFocusTraversable();
    java.awt.Dimension var82 = var80.getMinimumSize();
    var8.resize(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test384");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(100, 399);
    var2.update();
    var2.explode();
    boolean var5 = var2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test385");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Dimension var12 = var2.getMinimumSize();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var13.repaint();
    var13.setRequestFocusEnabled(false);
    var13.reshape(100, 0, 100, 0);
    var13.requestFocus();
    java.awt.Rectangle var24 = var13.getVisibleRect();
    var2.setBounds(var24);
    var2.move(24, 10);
    boolean var29 = var2.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test386");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Rectangle var4 = var0.bounds();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    boolean var6 = var0.isValidateRoot();
    java.awt.Dimension var7 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test387");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var6 = var0.getVisibleRect();
    java.awt.event.MouseListener[] var7 = var0.getMouseListeners();
    int var8 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    boolean var11 = var9.hasFocus();
    java.awt.Insets var12 = var9.getInsets();
    java.awt.Rectangle var13 = var9.bounds();
    java.awt.event.MouseMotionListener[] var14 = var9.getMouseMotionListeners();
    boolean var15 = var9.isMaximumSizeSet();
    java.awt.LayoutManager var16 = var9.getLayout();
    java.awt.Rectangle var17 = var9.getBounds();
    var9.transferFocus();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var19.repaint();
    var19.setRequestFocusEnabled(false);
    var19.setIgnoreRepaint(false);
    java.lang.String var26 = var19.toString();
    java.awt.Color var27 = var19.getBackground();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    java.awt.Toolkit var33 = var28.getToolkit();
    java.awt.Toolkit var34 = var28.getToolkit();
    SpaceWar.Player var35 = new SpaceWar.Player();
    var35.increasePower(25);
    int var38 = var35.getScore();
    var35.setRigth(true);
    var35.loseLife();
    var19.putClientProperty((java.lang.Object)var28, (java.lang.Object)var35);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.setInheritsPopupMenu(false);
    var43.move(10, 10);
    var43.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.event.KeyListener[] var56 = var43.getKeyListeners();
    var28.removeKeyListener((java.awt.event.KeyListener)var43);
    java.awt.Dimension var58 = var43.minimumSize();
    java.awt.LayoutManager var59 = var43.getLayout();
    var9.setLayout(var59);
    var0.setLayout(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var26,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var26.equals("SpaceWar.SpacePanel[,0,0,0var26,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test388");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getY();
    var0.setLife(3);
    int var5 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 500);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test389");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    var0.setFocusCycleRoot(true);
    int var24 = var0.countComponents();
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    java.awt.im.InputContext var26 = var0.getInputContext();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    boolean var35 = var27.isPaintingForPrint();
    boolean var36 = var27.getIgnoreRepaint();
    var27.repaint(100, 10, 100, 0);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    var42.list();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    java.awt.Rectangle var56 = var48.getVisibleRect();
    java.awt.Rectangle var57 = var42.getBounds(var56);
    javax.swing.JToolTip var58 = var42.createToolTip();
    var42.firePropertyChange("", false, false);
    var42.validate();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    java.awt.dnd.DropTarget var69 = var64.getDropTarget();
    var64.show(false);
    boolean var72 = var64.isPaintingForPrint();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var79 = var73.getMouseListeners();
    int var80 = var73.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var81 = var73.getInputMethodRequests();
    var64.addKeyListener((java.awt.event.KeyListener)var73);
    var73.repaint();
    java.awt.Point var84 = var73.location();
    java.awt.Component var85 = var42.getComponentAt(var84);
    var27.setLocation(var84);
    java.awt.peer.ComponentPeer var87 = var27.getPeer();
    java.awt.Component var88 = var0.add((java.awt.Component)var27);
    boolean var89 = var88.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test390");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    var4.nextFocus();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var9.setForeground(var14);
    var4.setBackground(var14);
    var0.setBackground(var14);
    boolean var18 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.setName("");
    int var22 = var19.getX();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    var23.setBackground(var33);
    var19.setBackground(var33);
    var0.setBackground(var33);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    java.awt.Point var47 = var38.getMousePosition(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    java.awt.dnd.DropTarget var59 = var54.getDropTarget();
    var54.show(false);
    java.awt.Rectangle var62 = var54.getVisibleRect();
    java.awt.Rectangle var63 = var48.getBounds(var62);
    var38.scrollRectToVisible(var62);
    var0.paintImmediately(var62);
    var0.firePropertyChange("hi!", 1L, 100L);
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test391");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    javax.swing.plaf.PanelUI var20 = var0.getUI();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.reshape((-1), 1, (-1), 10);
    var21.disable();
    java.awt.LayoutManager var32 = var21.getLayout();
    java.awt.Container var33 = var21.getParent();
    java.lang.String var34 = var21.getUIClassID();
    SpaceWar.Enemy var37 = new SpaceWar.Enemy(0, 10);
    var0.add((java.awt.Component)var21, (java.lang.Object)10);
    boolean var39 = var21.getInheritsPopupMenu();
    var21.setLocation(24, 100);
    java.awt.event.FocusListener[] var43 = var21.getFocusListeners();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    java.awt.Color var49 = var48.getBackground();
    var44.setForeground(var49);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    java.awt.dnd.DropTarget var56 = var51.getDropTarget();
    var51.show(false);
    java.awt.Rectangle var59 = var51.getVisibleRect();
    var44.repaint(var59);
    java.awt.Component.BaselineResizeBehavior var61 = var44.getBaselineResizeBehavior();
    boolean var63 = var44.requestFocus(false);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    boolean var66 = var64.hasFocus();
    boolean var67 = var64.isPreferredSizeSet();
    var64.firePropertyChange("", (short)1, (short)0);
    boolean var72 = var64.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var73 = var64.getPeer();
    java.awt.ComponentOrientation var74 = var64.getComponentOrientation();
    var44.applyComponentOrientation(var74);
    var21.setComponentOrientation(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "PanelUI"+ "'", var34.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test392");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    boolean var20 = var0.isOpaque();
    var0.setIgnoreRepaint(true);
    var0.repaint(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test393");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    java.awt.Color var6 = var0.getBackground();
    var0.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test394");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    var17.setRequestFocusEnabled(false);
    var17.reshape(100, 0, 100, 0);
    var17.requestFocus();
    java.awt.Rectangle var28 = var17.getVisibleRect();
    java.awt.Rectangle var29 = var17.getBounds();
    java.awt.im.InputMethodRequests var30 = var17.getInputMethodRequests();
    boolean var31 = var17.requestFocusInWindow();
    java.lang.Object var32 = var2.getClientProperty((java.lang.Object)var17);
    javax.swing.TransferHandler var33 = var17.getTransferHandler();
    boolean var34 = var17.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test395");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.repaint(1L);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    java.awt.Rectangle var48 = var40.getVisibleRect();
    java.awt.Rectangle var49 = var34.getBounds(var48);
    var27.setBounds(var49);
    var0.setBounds(var49);
    java.awt.Point var52 = var0.location();
    javax.swing.KeyStroke[] var53 = var0.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test396");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    javax.swing.InputMap var7 = var0.getInputMap();
    java.awt.Dimension var8 = var0.preferredSize();
    java.lang.String var9 = var0.getName();
    java.awt.Component[] var10 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test397");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    boolean var10 = var0.requestDefaultFocus();
    java.awt.LayoutManager var11 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test398");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    java.awt.Font var23 = var17.getFont();
    boolean var25 = var17.requestFocus(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var32 = var26.getUI();
    java.awt.im.InputMethodRequests var33 = var26.getInputMethodRequests();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    var34.nextFocus();
    var34.updateUI();
    var34.enableInputMethods(true);
    var34.setSize((-1), 1);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    var45.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var26.add((java.awt.Component)var34, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var51 = var34.getComponentOrientation();
    java.beans.VetoableChangeListener[] var52 = var34.getVetoableChangeListeners();
    java.awt.Rectangle var53 = var34.bounds();
    var17.setNextFocusableComponent((java.awt.Component)var34);
    var17.setSize(3, 10);
    var17.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 10L, 1L);
    java.awt.Dimension var62 = var17.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test399");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getPowerLevel();
    var0.setRigth(false);
    var0.increasePower((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test400");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    var0.transferFocusBackward();
    float var12 = var0.getAlignmentY();
    java.awt.Rectangle var13 = var0.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test401");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    java.util.Locale var6 = var0.getLocale();
    var0.paintImmediately(25, 100, 3, 0);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    var12.setInheritsPopupMenu(false);
    var12.setFocusTraversalPolicyProvider(true);
    boolean var22 = var12.inside(25, 3);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    boolean var31 = var23.isPaintingForPrint();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    java.awt.Dimension var38 = var34.getPreferredSize();
    boolean var39 = var34.getVerifyInputWhenFocusTarget();
    java.awt.Component var42 = var34.findComponentAt(10, 1);
    var32.addKeyListener((java.awt.event.KeyListener)var34);
    java.awt.Dimension var44 = var34.getMinimumSize();
    var23.setMinimumSize(var44);
    var12.setPreferredSize(var44);
    var0.setMinimumSize(var44);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    var48.nextFocus();
    var48.reshape((-1), 1, (-1), 10);
    var48.disable();
    java.awt.Component var61 = var48.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    var62.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var67 = var62.getUI();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    var68.nextFocus();
    var68.repaint(1L);
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var81 = new SpaceWar.SpacePanel();
    float var82 = var81.getAlignmentX();
    var81.setVisible(false);
    java.awt.Dimension var85 = var81.getPreferredSize();
    var75.setMaximumSize(var85);
    var68.setPreferredSize(var85);
    var62.setMaximumSize(var85);
    var48.setSize(var85);
    java.awt.Container var90 = var48.getParent();
    java.awt.Dimension var91 = var48.getPreferredSize();
    java.awt.Dimension var92 = var0.getSize(var91);
    java.awt.Dimension var93 = var0.getMinimumSize();
    var0.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test402");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    var1.grabFocus();
    javax.swing.JToolTip var18 = var1.createToolTip();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    boolean var27 = var19.isPaintingForPrint();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var19.addKeyListener((java.awt.event.KeyListener)var28);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    var38.list();
    float var44 = var38.getAlignmentY();
    boolean var45 = var28.isFocusCycleRoot((java.awt.Container)var38);
    var38.firePropertyChange("", 1L, 1L);
    java.awt.Component[] var50 = var38.getComponents();
    SpaceWar.Player var51 = new SpaceWar.Player();
    int var52 = var51.getPower();
    var51.setLeft(true);
    var51.increasePower(0);
    int var57 = var51.getRequiredPower();
    var1.putClientProperty((java.lang.Object)var50, (java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test403");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    var0.transferFocusUpCycle();
    java.awt.Container var6 = var0.getParent();
    boolean var7 = var0.isMaximumSizeSet();
    var0.firePropertyChange("hi!", 594.7973940347722d, 5.0d);
    java.awt.Image var14 = var0.createImage(3, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test404");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    boolean var7 = var0.isFocusOwner();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    var11.nextFocus();
    var11.reshape((-1), 1, (-1), 10);
    var11.disable();
    java.awt.LayoutManager var22 = var11.getLayout();
    var11.setVisible(false);
    var8.remove((java.awt.Component)var11);
    java.awt.Container var26 = var11.getFocusCycleRootAncestor();
    boolean var27 = var11.isDoubleBuffered();
    boolean var28 = var11.isValidateRoot();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var35 = var29.getVisibleRect();
    var11.computeVisibleRect(var35);
    java.awt.Rectangle var37 = var11.getVisibleRect();
    var0.scrollRectToVisible(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test405");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var53.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, true);
    var53.setBounds(100, 3, 400, 24);
    javax.swing.TransferHandler var63 = var53.getTransferHandler();
    boolean var64 = var53.hasFocus();
    boolean var65 = var53.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test406");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    var0.enable();
    java.awt.peer.ComponentPeer var21 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test407");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    java.awt.Component var14 = var0.add((java.awt.Component)var9);
    java.awt.Container var15 = var0.getParent();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.updateUI();
    var19.enableInputMethods(true);
    var16.add((java.awt.Component)var17, (java.lang.Object)true);
    boolean var28 = var16.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var29 = var16.getHierarchyListeners();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var30.setForeground(var35);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    java.awt.dnd.DropTarget var42 = var37.getDropTarget();
    var37.show(false);
    java.awt.Rectangle var45 = var37.getVisibleRect();
    var30.repaint(var45);
    java.awt.FocusTraversalPolicy var47 = var30.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var48 = var30.getInputMethodRequests();
    var30.layout();
    boolean var50 = var30.isFocusTraversalPolicyProvider();
    java.lang.Object var51 = var16.getClientProperty((java.lang.Object)var50);
    java.awt.Dimension var52 = var16.getSize();
    var16.removeNotify();
    java.awt.Cursor var54 = var16.getCursor();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    boolean var59 = var55.inside(0, (-1));
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    java.awt.Color var65 = var64.getBackground();
    var60.setForeground(var65);
    var55.setForeground(var65);
    java.awt.image.VolatileImage var70 = var55.createVolatileImage(400, (-1));
    java.awt.LayoutManager var71 = var55.getLayout();
    var16.setLayout(var71);
    var0.setNextFocusableComponent((java.awt.Component)var16);
    java.awt.Dimension var74 = var16.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test408");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    java.awt.Color var15 = var14.getBackground();
    var10.setForeground(var15);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    var10.repaint(var25);
    java.awt.FocusTraversalPolicy var27 = var10.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var28 = var10.getInputMethodRequests();
    var10.layout();
    boolean var30 = var10.isFocusTraversalPolicyProvider();
    java.awt.Insets var31 = var10.insets();
    java.awt.Dimension var32 = var10.getMinimumSize();
    java.awt.Dimension var33 = var0.getSize(var32);
    var0.setDoubleBuffered(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test409");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    boolean var7 = var0.isMinimumSizeSet();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    var8.setMaximumSize(var18);
    boolean var20 = var8.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var21 = var8.getAccessibleContext();
    boolean var22 = var8.isDoubleBuffered();
    java.awt.Rectangle var23 = var8.getVisibleRect();
    var0.setBounds(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    var25.setName("");
    var25.enable(true);
    var25.enable();
    java.awt.Point var31 = var25.location();
    var25.repaint(0, 3, (-1), 1);
    java.awt.Component var39 = var25.findComponentAt(0, 25);
    var0.setNextFocusableComponent((java.awt.Component)var25);
    boolean var41 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test410");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    var8.setDebugGraphicsOptions(0);
    boolean var35 = var8.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test411");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    javax.swing.JRootPane var13 = var0.getRootPane();
    int var14 = var0.getY();
    javax.swing.JToolTip var15 = var0.createToolTip();
    var15.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test412");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    java.awt.event.ComponentListener[] var19 = var0.getComponentListeners();
    java.lang.String var20 = var0.toString();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)0, (byte)100);
    var0.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var20.equals("SpaceWar.SpacePanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test413");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    boolean var23 = var0.isValid();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var30 = var24.getMouseListeners();
    int var31 = var24.getDebugGraphicsOptions();
    java.awt.Color var32 = var24.getBackground();
    var0.setForeground(var32);
    java.awt.Color var34 = var0.getForeground();
    boolean var35 = var0.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test414");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    boolean var36 = var0.isFocusTraversable();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100.0f, 0.5f);
    java.awt.Graphics var41 = var0.getGraphics();
    var0.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test415");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    int var14 = var0.getComponentCount();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    var15.setRequestFocusEnabled(false);
    var15.removeAll();
    var0.setNextFocusableComponent((java.awt.Component)var15);
    java.awt.event.KeyListener[] var22 = var15.getKeyListeners();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.setInheritsPopupMenu(false);
    var23.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    java.awt.Component var36 = var23.add((java.awt.Component)var31);
    java.awt.Rectangle var37 = var23.getBounds();
    var15.scrollRectToVisible(var37);
    var15.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test416");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.setName("");
    java.awt.Dimension var36 = var33.minimumSize();
    boolean var37 = var33.isDoubleBuffered();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    boolean var45 = var40.getVerifyInputWhenFocusTarget();
    java.awt.Component var48 = var40.findComponentAt(10, 1);
    var38.addKeyListener((java.awt.event.KeyListener)var40);
    var40.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    var55.repaint();
    java.awt.im.InputMethodRequests var58 = var55.getInputMethodRequests();
    java.awt.GraphicsConfiguration var59 = var55.getGraphicsConfiguration();
    var40.remove((java.awt.Component)var55);
    java.awt.Font var61 = var55.getFont();
    java.awt.FontMetrics var62 = var33.getFontMetrics(var61);
    java.awt.FontMetrics var63 = var19.getFontMetrics(var61);
    java.awt.Component[] var64 = var19.getComponents();
    boolean var65 = var19.isEnabled();
    float var66 = var19.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test417");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    var18.hide();
    java.awt.event.MouseWheelListener[] var36 = var18.getMouseWheelListeners();
    var18.setLocation((-1), 500);
    var18.nextFocus();
    java.awt.Rectangle var41 = var18.bounds();
    var18.repaint(400, 3, (-1), 0);
    var18.updateUI();
    var18.transferFocusUpCycle();
    java.awt.Rectangle var49 = var18.getVisibleRect();
    boolean var50 = var18.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test418");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    var0.enable();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.reshape((-1), 1, (-1), 10);
    var38.disable();
    java.awt.LayoutManager var49 = var38.getLayout();
    boolean var52 = var38.contains((-1), 0);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    var53.nextFocus();
    var53.updateUI();
    var53.enableInputMethods(true);
    var53.setSize((-1), 1);
    java.awt.Component var64 = var38.add((java.awt.Component)var53);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    var65.nextFocus();
    var65.updateUI();
    var65.enableInputMethods(true);
    java.lang.String var73 = var65.toString();
    java.awt.FocusTraversalPolicy var74 = var65.getFocusTraversalPolicy();
    var53.removeKeyListener((java.awt.event.KeyListener)var65);
    var0.addKeyListener((java.awt.event.KeyListener)var65);
    java.awt.Dimension var77 = var0.getPreferredSize();
    boolean var78 = var0.isShowing();
    javax.swing.InputMap var79 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var73,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var73.equals("SpaceWar.SpacePanel[,0,0,0var73,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test419");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    java.awt.Point var14 = var0.location();
    java.awt.Image var17 = var0.createImage((-1), 10);
    var0.setInheritsPopupMenu(true);
    int var20 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test420");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    int var4 = var2.getR();
    int var5 = var2.getType();
    int var6 = var2.getRank();
    var2.hit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test421");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getToolTipText();
    java.awt.Dimension var14 = var0.preferredSize();
    java.awt.LayoutManager var15 = var0.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test422");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    var0.setUp(false);
    int var9 = var0.getRequiredPower();
    var0.loseLife();
    int var11 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test423");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    var0.repaint(1L, 400, 25, (-1), 25);
    var0.show();
    var0.transferFocusUpCycle();
    javax.swing.JPopupMenu var16 = var0.getComponentPopupMenu();
    java.awt.Rectangle var17 = var0.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test424");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    java.awt.peer.ComponentPeer var21 = var0.getPeer();
    java.awt.Component var24 = var0.getComponentAt(2, 399);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    java.awt.Color var26 = var25.getBackground();
    boolean var29 = var25.inside(0, (-1));
    var25.transferFocusUpCycle();
    java.awt.Container var31 = var25.getParent();
    boolean var32 = var25.isMaximumSizeSet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var38 = var33.getUI();
    java.awt.Color var39 = var33.getBackground();
    var33.removeAll();
    var33.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)(-1), (short)100);
    java.awt.GraphicsConfiguration var45 = var33.getGraphicsConfiguration();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    java.awt.Dimension var52 = var48.getPreferredSize();
    boolean var53 = var48.getVerifyInputWhenFocusTarget();
    java.awt.Component var56 = var48.findComponentAt(10, 1);
    var46.addKeyListener((java.awt.event.KeyListener)var48);
    var48.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var63 = var48.getColorModel();
    boolean var64 = var48.isFocusTraversalPolicyProvider();
    var48.show(false);
    boolean var67 = var48.isManagingFocus();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    java.awt.Color var69 = var68.getBackground();
    var68.repaint();
    var68.setRequestFocusEnabled(false);
    var68.reshape(100, 0, 100, 0);
    var68.requestFocus();
    java.awt.Rectangle var79 = var68.getVisibleRect();
    java.awt.Rectangle var80 = var68.getBounds();
    java.awt.im.InputMethodRequests var81 = var68.getInputMethodRequests();
    boolean var82 = var68.requestFocusInWindow();
    java.awt.Point var84 = var68.getMousePosition(false);
    var68.setDebugGraphicsOptions(1);
    java.awt.Graphics var87 = var68.getGraphics();
    var48.paint(var87);
    var33.paintAll(var87);
    var25.printComponents(var87);
    var0.paintAll(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test425");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(true);
    var0.setFocusTraversalKeysEnabled(false);
    javax.swing.event.AncestorListener[] var14 = var0.getAncestorListeners();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    javax.swing.JToolTip var31 = var15.createToolTip();
    java.awt.Dimension var32 = var15.minimumSize();
    boolean var34 = var15.requestFocus(false);
    java.awt.Dimension var35 = var15.getMaximumSize();
    var0.setPreferredSize(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test426");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    var19.resize(25, 400);
    java.awt.event.ComponentListener[] var36 = var19.getComponentListeners();
    var19.setAlignmentX(10.0f);
    var19.setDoubleBuffered(false);
    boolean var43 = var19.inside(0, 3);
    var19.show(true);
    var19.setOpaque(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test427");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(67.31525280771399d, 261.2028294988706d, 25, 99);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test428");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    boolean var10 = var0.isPaintingTile();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    var11.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var16 = var11.getUI();
    java.awt.Color var17 = var11.getBackground();
    var0.addKeyListener((java.awt.event.KeyListener)var11);
    int var19 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test429");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.removeNotify();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    boolean var7 = var3.isDoubleBuffered();
    var3.list();
    float var9 = var3.getAlignmentY();
    java.awt.Insets var10 = var3.getInsets();
    java.awt.Insets var11 = var0.getInsets(var10);
    boolean var12 = var0.isDoubleBuffered();
    java.beans.PropertyChangeListener[] var14 = var0.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test430");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    boolean var3 = var2.isDead();
    var2.update();
    double var5 = var2.getX();
    java.awt.image.BufferedImage var7 = var2.loadImg("PanelUI");
    double var8 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 585.574920724042d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test431");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    var8.setDebugGraphicsOptions(0);
    var8.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    var37.list();
    float var43 = var37.getAlignmentY();
    java.awt.Insets var44 = var37.getInsets();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    java.awt.Dimension var55 = var51.getPreferredSize();
    var45.setMaximumSize(var55);
    java.awt.Dimension var57 = var37.getSize(var55);
    var8.setPreferredSize(var57);
    java.awt.event.MouseWheelListener[] var59 = var8.getMouseWheelListeners();
    java.awt.im.InputMethodRequests var60 = var8.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test432");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    var0.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    javax.swing.plaf.PanelUI var13 = var10.getUI();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    boolean var22 = var14.isPaintingForPrint();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var29 = var23.getMouseListeners();
    int var30 = var23.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var31 = var23.getInputMethodRequests();
    var14.addKeyListener((java.awt.event.KeyListener)var23);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    var33.list();
    float var39 = var33.getAlignmentY();
    boolean var40 = var23.isFocusCycleRoot((java.awt.Container)var33);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    var42.updateUI();
    java.awt.Component var48 = var23.add("", (java.awt.Component)var42);
    java.awt.ComponentOrientation var49 = var42.getComponentOrientation();
    boolean var50 = var42.isFocusable();
    var10.remove((java.awt.Component)var42);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.setInheritsPopupMenu(false);
    boolean var58 = var52.isDoubleBuffered();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.nextFocus();
    var59.reshape((-1), 1, (-1), 10);
    var59.disable();
    java.awt.LayoutManager var70 = var59.getLayout();
    var52.setLayout(var70);
    var0.add((java.awt.Component)var10, (java.lang.Object)var70);
    int var73 = var0.getX();
    java.awt.LayoutManager var74 = var0.getLayout();
    javax.swing.JToolTip var75 = var0.createToolTip();
    var0.setOpaque(false);
    var0.resetKeyboardActions();
    int var81 = var0.getBaseline(0, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test433");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.move((-1), 100);
    var19.validate();
    java.awt.Toolkit var32 = var19.getToolkit();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    java.awt.Color var39 = var38.getBackground();
    var38.repaint();
    java.lang.Object var41 = var33.getClientProperty((java.lang.Object)var38);
    var38.repaint(10, 1, 25, 0);
    var19.removeKeyListener((java.awt.event.KeyListener)var38);
    boolean var48 = var38.isDoubleBuffered();
    var38.move(399, 399);
    var38.setAlignmentX(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test434");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    var0.setFocusable(false);
    var0.nextFocus();
    boolean var18 = var0.isPreferredSizeSet();
    var0.repaint(10, 100, 2, 400);
    java.awt.Image var26 = var0.createImage(99, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test435");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var0.setMaximumSize(var17);
    boolean var19 = var0.isOpaque();
    var0.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test436");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    java.awt.Dimension var15 = var11.getPreferredSize();
    boolean var16 = var11.getVerifyInputWhenFocusTarget();
    java.awt.Component var19 = var11.findComponentAt(10, 1);
    var9.addKeyListener((java.awt.event.KeyListener)var11);
    java.awt.Dimension var21 = var11.getMinimumSize();
    var0.setMinimumSize(var21);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.repaint(1L);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    var31.setMaximumSize(var41);
    var24.setPreferredSize(var41);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    var45.setForeground(var50);
    javax.swing.InputMap var52 = var45.getInputMap();
    var24.setInputMap(1, var52);
    var0.setInputMap(1, var52);
    var0.setAlignmentY(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test437");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    int var35 = var0.getX();
    boolean var36 = var0.isMaximumSizeSet();
    var0.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test438");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    javax.swing.JToolTip var53 = var0.createToolTip();
    var53.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, true);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    var58.setName("");
    java.awt.Dimension var61 = var58.minimumSize();
    boolean var62 = var58.isDoubleBuffered();
    java.awt.event.HierarchyListener[] var63 = var58.getHierarchyListeners();
    java.awt.Font var64 = var58.getFont();
    java.awt.FontMetrics var65 = var53.getFontMetrics(var64);
    var53.setAutoscrolls(true);
    int var68 = var53.getX();
    var53.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test439");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    java.awt.event.MouseWheelListener[] var20 = var3.getMouseWheelListeners();
    boolean var21 = var3.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test440");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    java.awt.dnd.DropTarget var27 = var8.getDropTarget();
    var8.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test441");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getX();
    double var5 = var3.getY();
    double var6 = var3.getY();
    double var7 = var3.getY();
    double var8 = var3.getR();
    double var9 = var3.getX();
    boolean var10 = var3.update();
    boolean var11 = var3.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test442");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    var0.setLocation(10, 100);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var28.removeNotify();
    var28.enable();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    boolean var43 = var39.inside(0, (-1));
    var39.transferFocusUpCycle();
    java.lang.String var45 = var39.getName();
    boolean var46 = var28.isFocusCycleRoot((java.awt.Container)var39);
    java.awt.Dimension var47 = var28.getMinimumSize();
    var0.resize(var47);
    var0.setAlignmentX((-1.0f));
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]", 383.0566534864913d, 559.7240852144217d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test443");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    java.awt.Insets var3 = var0.getInsets();
    java.awt.Rectangle var4 = var0.bounds();
    boolean var5 = var0.isMaximumSizeSet();
    java.lang.String var6 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var6,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var6.equals("SpaceWar.SpacePanel[,0,0,0var6,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test444");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.getInheritsPopupMenu();
    javax.swing.event.AncestorListener[] var18 = var1.getAncestorListeners();
    var1.doLayout();
    java.awt.event.HierarchyBoundsListener[] var20 = var1.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test445");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    boolean var35 = var18.isPaintingTile();
    java.awt.image.ColorModel var36 = var18.getColorModel();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    var37.setName("");
    int var40 = var37.getX();
    java.lang.String var41 = var37.getToolTipText();
    java.awt.Point var42 = var37.getLocation();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var49 = var43.getUI();
    java.awt.im.InputMethodRequests var50 = var43.getInputMethodRequests();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.updateUI();
    var51.enableInputMethods(true);
    var51.setSize((-1), 1);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    var62.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var43.add((java.awt.Component)var51, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var43.setAutoscrolls(false);
    java.awt.event.InputMethodListener[] var70 = var43.getInputMethodListeners();
    java.awt.Rectangle var71 = var43.bounds();
    var37.paintImmediately(var71);
    java.lang.Object var73 = var18.getClientProperty((java.lang.Object)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test446");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    java.awt.Point var33 = var0.getMousePosition();
    java.awt.image.BufferedImage var35 = var0.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3, 100);
    boolean var40 = var0.isMaximumSizeSet();
    var0.updateUI();
    boolean var42 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test447");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    float var12 = var0.getAlignmentY();
    boolean var13 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.setInheritsPopupMenu(false);
    var14.setFocusTraversalPolicyProvider(true);
    boolean var24 = var14.inside(25, 3);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    java.awt.dnd.DropTarget var30 = var25.getDropTarget();
    var25.show(false);
    boolean var33 = var25.isPaintingForPrint();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    java.awt.Dimension var40 = var36.getPreferredSize();
    boolean var41 = var36.getVerifyInputWhenFocusTarget();
    java.awt.Component var44 = var36.findComponentAt(10, 1);
    var34.addKeyListener((java.awt.event.KeyListener)var36);
    java.awt.Dimension var46 = var36.getMinimumSize();
    var25.setMinimumSize(var46);
    var14.setPreferredSize(var46);
    boolean var50 = var14.requestFocus(true);
    java.awt.Dimension var51 = var14.getMinimumSize();
    java.beans.PropertyChangeListener[] var53 = var14.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    javax.swing.KeyStroke[] var54 = var14.getRegisteredKeyStrokes();
    var14.transferFocus();
    var14.resetKeyboardActions();
    java.awt.Component var57 = var0.add((java.awt.Component)var14);
    javax.swing.JPopupMenu var58 = var14.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test448");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    var0.removeAll();
    boolean var20 = var0.getIgnoreRepaint();
    int var21 = var0.getY();
    boolean var22 = var0.isFocusTraversable();
    java.awt.Dimension var23 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test449");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    boolean var3 = var2.isDead();
    var2.hit();
    double var5 = var2.getY();
    int var6 = var2.getRank();
    double var7 = var2.getX();
    var2.explode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 249.6642428175776d);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test450");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    var0.revalidate();
    boolean var13 = var0.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test451");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    java.awt.Toolkit var27 = var1.getToolkit();
    var1.setAutoscrolls(false);
    boolean var30 = var1.isValidateRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var32 = var1.getFocusTraversalKeys(25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test452");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    java.awt.event.FocusListener[] var32 = var0.getFocusListeners();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.setName("");
    var33.enable(true);
    var33.enable();
    java.awt.Point var39 = var33.location();
    var33.repaint(0, 3, (-1), 1);
    var33.setBounds(25, 100, 1, 0);
    java.awt.Insets var50 = var33.getInsets();
    java.awt.peer.ComponentPeer var51 = var33.getPeer();
    javax.swing.KeyStroke[] var52 = var33.getRegisteredKeyStrokes();
    boolean var53 = var33.getAutoscrolls();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    java.awt.Color var55 = var54.getBackground();
    var54.repaint();
    var54.setRequestFocusEnabled(false);
    var54.reshape(100, 0, 100, 0);
    var54.requestFocus();
    java.awt.Rectangle var65 = var54.getVisibleRect();
    java.awt.Rectangle var66 = var54.getBounds();
    java.awt.im.InputMethodRequests var67 = var54.getInputMethodRequests();
    boolean var68 = var54.requestFocusInWindow();
    java.awt.Point var70 = var54.getMousePosition(false);
    var54.setDebugGraphicsOptions(1);
    java.awt.Graphics var73 = var54.getGraphics();
    var33.paintComponents(var73);
    var0.printAll(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test453");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    var31.setRequestFocusEnabled(false);
    var31.reshape(100, 0, 100, 0);
    var31.requestFocus();
    var31.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var46 = var31.getLocation();
    java.awt.Dimension var47 = var31.size();
    boolean var48 = var31.isDoubleBuffered();
    var31.grabFocus();
    java.awt.Rectangle var50 = var31.bounds();
    var19.setBounds(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test454");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    var0.setToolTipText("PanelUI");
    var0.setEnabled(false);
    java.awt.Dimension var12 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test455");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    java.awt.Component.BaselineResizeBehavior var7 = var0.getBaselineResizeBehavior();
    javax.swing.InputMap var8 = var0.getInputMap();
    var0.doLayout();
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test456");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    boolean var35 = var18.isPaintingTile();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var42 = var36.getUI();
    java.awt.im.InputMethodRequests var43 = var36.getInputMethodRequests();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    var44.updateUI();
    var44.enableInputMethods(true);
    var44.setSize((-1), 1);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    var55.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var36.add((java.awt.Component)var44, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var61 = var44.getComponentOrientation();
    java.beans.VetoableChangeListener[] var62 = var44.getVetoableChangeListeners();
    int var63 = var44.countComponents();
    boolean var64 = var44.isFocusOwner();
    var44.enable(false);
    java.awt.Insets var67 = var44.getInsets();
    java.awt.Insets var68 = var18.getInsets(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test457");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    var0.setUp(false);
    int var9 = var0.getScore();
    int var10 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test458");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    javax.swing.JToolTip var19 = var0.createToolTip();
    float var20 = var19.getAlignmentY();
    boolean var21 = var19.isMaximumSizeSet();
    boolean var22 = var19.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test459");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    float var18 = var0.getAlignmentY();
    boolean var19 = var0.getInheritsPopupMenu();
    javax.accessibility.AccessibleContext var20 = var0.getAccessibleContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var22 = var0.getComponent(498);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test460");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    java.awt.Dimension var29 = var25.getPreferredSize();
    java.awt.Toolkit var30 = var25.getToolkit();
    java.awt.Toolkit var31 = var25.getToolkit();
    java.awt.Component var32 = var8.add((java.awt.Component)var25);
    int var33 = var8.getY();
    var8.removeNotify();
    java.awt.event.KeyListener[] var35 = var8.getKeyListeners();
    boolean var36 = var8.isFocusCycleRoot();
    boolean var37 = var8.isOptimizedDrawingEnabled();
    var8.setDoubleBuffered(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test461");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    java.awt.Component var14 = var0.add((java.awt.Component)var9);
    boolean var15 = var0.isRequestFocusEnabled();
    var0.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.repaint(1L);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    var18.setPreferredSize(var35);
    javax.swing.plaf.PanelUI var38 = var18.getUI();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.reshape((-1), 1, (-1), 10);
    var39.disable();
    java.awt.LayoutManager var50 = var39.getLayout();
    java.awt.Container var51 = var39.getParent();
    java.lang.String var52 = var39.getUIClassID();
    SpaceWar.Enemy var55 = new SpaceWar.Enemy(0, 10);
    var18.add((java.awt.Component)var39, (java.lang.Object)10);
    javax.swing.JToolTip var57 = var18.createToolTip();
    java.awt.Component var58 = var0.add((java.awt.Component)var57);
    var0.setVisible(true);
    boolean var61 = var0.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PanelUI"+ "'", var52.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test462");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isEnabled();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.setInheritsPopupMenu(false);
    var22.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.Rectangle var45 = var30.getBounds(var44);
    javax.swing.JToolTip var46 = var30.createToolTip();
    var22.removeKeyListener((java.awt.event.KeyListener)var30);
    javax.swing.TransferHandler var48 = var22.getTransferHandler();
    var22.transferFocus();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    java.awt.Dimension var56 = var52.getPreferredSize();
    boolean var57 = var52.getVerifyInputWhenFocusTarget();
    java.awt.Component var60 = var52.findComponentAt(10, 1);
    var50.addKeyListener((java.awt.event.KeyListener)var52);
    java.awt.Dimension var62 = var52.getMinimumSize();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    var63.repaint();
    var63.setRequestFocusEnabled(false);
    var63.reshape(100, 0, 100, 0);
    var63.requestFocus();
    java.awt.Rectangle var74 = var63.getVisibleRect();
    var52.setBounds(var74);
    var22.scrollRectToVisible(var74);
    var10.setBounds(var74);
    java.awt.Rectangle var78 = var10.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test463");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    float var14 = var0.getAlignmentX();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.enable(false);
    boolean var22 = var15.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    java.awt.Dimension var27 = var23.getPreferredSize();
    java.awt.Toolkit var28 = var23.getToolkit();
    boolean var29 = var23.isFocusable();
    javax.swing.KeyStroke[] var30 = var23.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    boolean var38 = var33.getVerifyInputWhenFocusTarget();
    java.awt.Component var41 = var33.findComponentAt(10, 1);
    var31.addKeyListener((java.awt.event.KeyListener)var33);
    var33.repaint(100, (-1), (-1), 1);
    boolean var48 = var23.isAncestorOf((java.awt.Component)var33);
    var15.addKeyListener((java.awt.event.KeyListener)var33);
    java.util.Locale var50 = var33.getLocale();
    var0.setLocale(var50);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var58 = var52.getMouseListeners();
    int var59 = var52.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var60 = var52.getInputMethodRequests();
    var52.removeNotify();
    var52.enable();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    boolean var67 = var63.inside(0, (-1));
    var63.transferFocusUpCycle();
    java.lang.String var69 = var63.getName();
    boolean var70 = var52.isFocusCycleRoot((java.awt.Container)var63);
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    java.awt.Color var72 = var71.getBackground();
    var71.repaint();
    var71.setRequestFocusEnabled(false);
    var71.reshape(100, 0, 100, 0);
    var71.requestFocus();
    var71.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var86 = var71.getLocation();
    java.awt.Component var87 = var63.getComponentAt(var86);
    java.awt.Component var88 = var0.findComponentAt(var86);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.event.MouseListener[] var91 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test464");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setBackground(var10);
    java.awt.Component var13 = var0.getNextFocusableComponent();
    float var14 = var0.getAlignmentY();
    java.awt.event.MouseWheelListener[] var15 = var0.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test465");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    boolean var12 = var2.isFocusTraversable();
    java.awt.Component.BaselineResizeBehavior var13 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test466");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    boolean var10 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var11.setForeground(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    var11.repaint(var26);
    java.awt.FocusTraversalPolicy var28 = var11.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.firePropertyChange("", (-1), 1);
    boolean var35 = var29.isFocusOwner();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    java.awt.Toolkit var42 = var37.getToolkit();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    var43.setName("");
    int var46 = var43.getX();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    var47.nextFocus();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var52.setForeground(var57);
    var47.setBackground(var57);
    var43.setBackground(var57);
    var37.setForeground(var57);
    var29.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var57);
    var11.setBackground(var57);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    java.awt.dnd.DropTarget var69 = var64.getDropTarget();
    var64.show(false);
    boolean var72 = var64.isPaintingForPrint();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    java.awt.Dimension var79 = var75.getPreferredSize();
    boolean var80 = var75.getVerifyInputWhenFocusTarget();
    java.awt.Component var83 = var75.findComponentAt(10, 1);
    var73.addKeyListener((java.awt.event.KeyListener)var75);
    java.awt.Dimension var85 = var75.getMinimumSize();
    var64.setMinimumSize(var85);
    java.awt.Dimension var87 = var11.getSize(var85);
    java.awt.Rectangle var88 = var11.getVisibleRect();
    var0.paintImmediately(var88);
    boolean var90 = var0.isFontSet();
    javax.swing.event.AncestorListener[] var91 = var0.getAncestorListeners();
    javax.swing.ActionMap var92 = var0.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test467");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var37 = var19.getLocation();
    var19.transferFocusUpCycle();
    boolean var40 = var19.areFocusTraversalKeysSet(0);
    boolean var41 = var19.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test468");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(506.9915098063617d, 25, 99);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test469");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    var8.enable(true);
    boolean var30 = var8.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    var31.setRequestFocusEnabled(false);
    var31.reshape(100, 0, 100, 0);
    var31.requestFocus();
    var31.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var46 = var31.getLocation();
    var8.setLocation(var46);
    boolean var48 = var8.isManagingFocus();
    var8.transferFocusDownCycle();
    var8.show();
    boolean var51 = var8.isEnabled();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var58 = var52.getMouseListeners();
    int var59 = var52.getDebugGraphicsOptions();
    boolean var60 = var52.isValid();
    var52.setAlignmentX((-1.0f));
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    java.awt.Color var65 = var64.getBackground();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    var66.nextFocus();
    var66.updateUI();
    var66.enableInputMethods(true);
    var63.add((java.awt.Component)var64, (java.lang.Object)true);
    java.awt.Image var77 = var64.createImage(1, (-1));
    java.awt.event.MouseListener[] var78 = var64.getMouseListeners();
    java.awt.Color var79 = var64.getBackground();
    boolean var80 = var64.getIgnoreRepaint();
    java.awt.Dimension var81 = var64.minimumSize();
    java.awt.Insets var82 = var64.getInsets();
    java.awt.Insets var83 = var52.getInsets(var82);
    java.awt.Insets var84 = var8.getInsets(var83);
    boolean var85 = var8.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test470");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    boolean var18 = var0.isLightweight();
    var0.move(100, 500);
    java.awt.Container var22 = var0.getParent();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    boolean var25 = var23.hasFocus();
    java.awt.Insets var26 = var23.getInsets();
    boolean var27 = var23.isFocusTraversalPolicyProvider();
    java.beans.PropertyChangeListener[] var29 = var23.getPropertyChangeListeners("hi!");
    java.awt.Cursor var30 = var23.getCursor();
    boolean var31 = var0.isFocusCycleRoot((java.awt.Container)var23);
    boolean var32 = var23.isOptimizedDrawingEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var34 = var23.getInputMap(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test471");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var26 = var21.getUI();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.repaint(1L);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    var34.setMaximumSize(var44);
    var27.setPreferredSize(var44);
    var21.setMaximumSize(var44);
    java.awt.Dimension var48 = var10.getSize(var44);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    java.awt.dnd.DropTarget var54 = var49.getDropTarget();
    var49.show(false);
    boolean var57 = var49.isPaintingForPrint();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var64 = var58.getMouseListeners();
    int var65 = var58.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var66 = var58.getInputMethodRequests();
    var49.addKeyListener((java.awt.event.KeyListener)var58);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    boolean var72 = var68.isDoubleBuffered();
    var68.list();
    float var74 = var68.getAlignmentY();
    boolean var75 = var58.isFocusCycleRoot((java.awt.Container)var68);
    var10.setNextFocusableComponent((java.awt.Component)var68);
    boolean var77 = var10.isForegroundSet();
    java.awt.Rectangle var78 = var10.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test472");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    var0.list();
    boolean var10 = var0.requestFocusInWindow();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    var11.repaint();
    java.awt.im.InputMethodRequests var14 = var11.getInputMethodRequests();
    int var15 = var11.countComponents();
    java.awt.event.ComponentListener[] var16 = var11.getComponentListeners();
    var11.transferFocusBackward();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.enable(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    boolean var28 = var26.hasFocus();
    java.awt.Insets var29 = var26.getInsets();
    java.awt.Rectangle var30 = var26.bounds();
    var19.repaint(var30);
    java.awt.Component var32 = var11.add("", (java.awt.Component)var19);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.reshape((-1), 1, (-1), 10);
    java.util.Set var44 = var33.getFocusTraversalKeys(3);
    java.awt.Point var45 = var33.getLocation();
    var32.setLocation(var45);
    boolean var47 = var0.contains(var45);
    java.awt.Dimension var48 = var0.getMinimumSize();
    java.awt.event.InputMethodListener[] var49 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test473");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(365.5281187817767d, 3, 24);
    double var4 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 24.0d);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test474");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var26 = var21.getUI();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.repaint(1L);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    var34.setMaximumSize(var44);
    var27.setPreferredSize(var44);
    var21.setMaximumSize(var44);
    java.awt.Dimension var48 = var10.getSize(var44);
    boolean var49 = var10.getIgnoreRepaint();
    boolean var50 = var10.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test475");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    int var3 = var2.getR();
    int var4 = var2.getR();
    double var5 = var2.getY();
    var2.update();
    double var7 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 450.0138673900408d);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test476");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    int var5 = var3.getType();
    double var6 = var3.getX();
    int var7 = var3.getType();
    double var8 = var3.getY();
    double var9 = var3.getX();
    double var10 = var3.getY();
    int var11 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test477");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(24.0d, 100, 499);
    double var4 = var3.getY();
    double var5 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 499.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100.0d);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test478");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.transferFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    boolean var35 = var30.getVerifyInputWhenFocusTarget();
    java.awt.Component var38 = var30.findComponentAt(10, 1);
    var28.addKeyListener((java.awt.event.KeyListener)var30);
    java.awt.Dimension var40 = var30.getMinimumSize();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    var41.setRequestFocusEnabled(false);
    var41.reshape(100, 0, 100, 0);
    var41.requestFocus();
    java.awt.Rectangle var52 = var41.getVisibleRect();
    var30.setBounds(var52);
    var0.scrollRectToVisible(var52);
    int var55 = var0.getY();
    java.awt.Container var56 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test479");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    float var12 = var0.getAlignmentY();
    java.awt.Container var13 = var0.getTopLevelAncestor();
    int var14 = var0.getDebugGraphicsOptions();
    javax.swing.InputMap var15 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test480");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(396.44637138944637d, 2, 499);
    double var4 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 5.0d);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test481");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    boolean var6 = var0.isFocusOwner();
    java.awt.Dimension var7 = var0.getMinimumSize();
    boolean var8 = var0.requestFocusInWindow();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    var9.requestFocus();
    boolean var15 = var9.isBackgroundSet();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    var16.repaint();
    var16.setRequestFocusEnabled(false);
    var16.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    var26.setInheritsPopupMenu(false);
    boolean var32 = var26.isDoubleBuffered();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.reshape((-1), 1, (-1), 10);
    var33.disable();
    java.awt.LayoutManager var44 = var33.getLayout();
    var26.setLayout(var44);
    var9.add((java.awt.Component)var16, (java.lang.Object)var44);
    var0.setLayout(var44);
    int var50 = var0.getBaseline(400, 499);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test482");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    java.awt.Rectangle var23 = var15.getVisibleRect();
    java.awt.image.BufferedImage var25 = var15.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var26 = var9.isAncestorOf((java.awt.Component)var15);
    java.awt.GraphicsConfiguration var27 = var15.getGraphicsConfiguration();
    java.awt.Font var28 = var15.getFont();
    java.awt.Component var29 = var0.add((java.awt.Component)var15);
    var29.firePropertyChange("", 2.0d, 83.657626403857d);
    boolean var34 = var29.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test483");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.Component.BaselineResizeBehavior var17 = var0.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.repaint(1L);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    var25.list();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    java.awt.Rectangle var40 = var25.getBounds(var39);
    var18.setBounds(var40);
    var0.paintImmediately(var40);
    java.beans.VetoableChangeListener[] var43 = var0.getVetoableChangeListeners();
    java.lang.Object var44 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test484");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    boolean var22 = var0.requestFocusInWindow();
    var0.setDebugGraphicsOptions(2);
    var0.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test485");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    var0.repaint(0L);
    boolean var16 = var0.isShowing();
    int var19 = var0.getBaseline(100, 3);
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test486");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    var0.list();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    java.awt.Rectangle var18 = var10.getVisibleRect();
    java.awt.image.BufferedImage var20 = var10.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocusBackward();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    var23.setFocusCycleRoot(true);
    var0.add((java.awt.Component)var10, (java.lang.Object)true);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    boolean var33 = var28.getVerifyInputWhenFocusTarget();
    java.awt.Component var36 = var28.findComponentAt(10, 1);
    boolean var37 = var28.isCursorSet();
    boolean var38 = var28.isFocusTraversalPolicyProvider();
    java.awt.Rectangle var39 = var28.getBounds();
    java.awt.Dimension var40 = var28.getMaximumSize();
    java.awt.Dimension var41 = var0.getSize(var40);
    var0.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test487");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    int var10 = var0.getBaseline(1, 1);
    var0.show(false);
    var0.repaint(100L);
    java.lang.String var15 = var0.getUIClassID();
    float var16 = var0.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test488");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var23 = var17.getMouseListeners();
    int var24 = var17.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var25 = var17.getInputMethodRequests();
    java.awt.Point var26 = var17.getMousePosition();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.setInheritsPopupMenu(false);
    boolean var33 = var27.isDoubleBuffered();
    boolean var34 = var27.isMinimumSizeSet();
    java.awt.Font var35 = var27.getFont();
    var17.setFont(var35);
    java.awt.FontMetrics var37 = var1.getFontMetrics(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var39 = var1.areFocusTraversalKeysSet((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test489");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    int var3 = var2.getRank();
    var2.update();
    boolean var5 = var2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test490");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    boolean var13 = var1.isValidateRoot();
    boolean var14 = var1.isCursorSet();
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    int var16 = var1.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test491");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    int var8 = var0.getPowerLevel();
    var0.setDown(false);
    var0.setLeft(false);
    int var13 = var0.getPowerLevel();
    var0.setUp(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test492");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy((-1), 10);
    int var3 = var2.getRank();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var6 = var2.isDead();
    double var7 = var2.getY();
    int var8 = var2.getR();
    int var9 = var2.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test493");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var0.isMinimumSizeSet();
    java.awt.event.ContainerListener[] var22 = var0.getContainerListeners();
    var0.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test494");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    var0.resetKeyboardActions();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var25 = var19.getMouseListeners();
    int var26 = var19.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var19.paintImmediately(var35);
    var0.setBounds(var35);
    boolean var38 = var0.getVerifyInputWhenFocusTarget();
    boolean var39 = var0.isOptimizedDrawingEnabled();
    boolean var40 = var0.isShowing();
    boolean var41 = var0.isForegroundSet();
    var0.repaint((-1L));
    javax.swing.event.AncestorListener[] var44 = var0.getAncestorListeners();
    var0.setFocusTraversalKeysEnabled(false);
    java.awt.Container var47 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test495");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    var8.enable(true);
    boolean var30 = var8.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    var31.setRequestFocusEnabled(false);
    var31.reshape(100, 0, 100, 0);
    var31.requestFocus();
    var31.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var46 = var31.getLocation();
    var8.setLocation(var46);
    java.awt.image.ColorModel var48 = var8.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test496");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    java.awt.Toolkit var6 = var0.getToolkit();
    var0.firePropertyChange("hi!", 25, 1);
    boolean var11 = var0.requestDefaultFocus();
    var0.setAutoscrolls(true);
    var0.firePropertyChange("SpaceWar.SpacePanel[,499,2,499x500,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test497");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    boolean var7 = var0.isValid();
    var0.move(499, 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test498");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy((-1), 99);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test499");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    boolean var20 = var1.areFocusTraversalKeysSet(2);
    var1.validate();
    boolean var22 = var1.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest9.test500");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    boolean var7 = var0.isFocusOwner();
    boolean var8 = var0.isValidateRoot();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var9.repaint();
    java.awt.im.InputMethodRequests var12 = var9.getInputMethodRequests();
    java.awt.GraphicsConfiguration var13 = var9.getGraphicsConfiguration();
    boolean var15 = var9.requestFocus(false);
    javax.swing.JPopupMenu var16 = var9.getComponentPopupMenu();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    java.awt.Dimension var21 = var17.getPreferredSize();
    boolean var22 = var17.getVerifyInputWhenFocusTarget();
    java.awt.Component var25 = var17.findComponentAt(10, 1);
    boolean var26 = var17.requestDefaultFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var29 = var17.getLocation();
    java.awt.Point var30 = var9.getLocation(var29);
    java.awt.Component var31 = var0.getComponentAt(var29);
    float var32 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);

  }

}
