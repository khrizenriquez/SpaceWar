package randoop;

import junit.framework.*;

public class RandoopTest5 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test1");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    boolean var6 = var0.isDead();
    var0.setFiring(true);
    var0.setRigth(false);
    var0.update();
    var0.setLife(1);
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test2");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    var1.show(false);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    boolean var29 = var21.isPaintingForPrint();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var36 = var30.getMouseListeners();
    int var37 = var30.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var38 = var30.getInputMethodRequests();
    var21.addKeyListener((java.awt.event.KeyListener)var30);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    var40.list();
    float var46 = var40.getAlignmentY();
    boolean var47 = var30.isFocusCycleRoot((java.awt.Container)var40);
    var40.firePropertyChange("", 1L, 1L);
    var40.setVerifyInputWhenFocusTarget(true);
    var40.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var58 = var40.getLocation();
    java.awt.Point var59 = var1.getLocation(var58);
    var1.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test3");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    java.awt.Cursor var33 = var19.getCursor();
    var19.layout();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var41 = var35.getMouseListeners();
    int var42 = var35.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    boolean var47 = var43.isDoubleBuffered();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    var43.show(false);
    java.awt.Rectangle var51 = var43.getVisibleRect();
    var35.paintImmediately(var51);
    boolean var53 = var35.isFocusCycleRoot();
    var35.list();
    boolean var55 = var19.isFocusCycleRoot((java.awt.Container)var35);
    boolean var56 = var19.requestFocusInWindow();
    var19.setFocusTraversalPolicyProvider(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test4");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    javax.swing.InputVerifier var18 = var6.getInputVerifier();
    java.awt.ComponentOrientation var19 = var6.getComponentOrientation();
    var6.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test5");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    var0.setFocusCycleRoot(true);
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", ' ', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test6");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    boolean var7 = var0.isValid();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.image.BufferedImage var24 = var14.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var8.isAncestorOf((java.awt.Component)var14);
    java.awt.GraphicsConfiguration var26 = var14.getGraphicsConfiguration();
    java.awt.Font var27 = var14.getFont();
    var0.setComponentZOrder((java.awt.Component)var14, 0);
    var0.setAutoscrolls(true);
    java.awt.Component var34 = var0.locate(24, 99);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test7");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.setLeft(true);
    var0.setDown(true);
    boolean var11 = var0.isRecovering();
    int var12 = var0.getRequiredPower();
    var0.setLeft(false);
    boolean var15 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test8");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    java.awt.Point var6 = var0.getMousePosition();
    java.lang.String var7 = var0.getUIClassID();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '4');
    boolean var12 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var13.setForeground(var18);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    java.awt.dnd.DropTarget var25 = var20.getDropTarget();
    var20.show(false);
    java.awt.Rectangle var28 = var20.getVisibleRect();
    var13.repaint(var28);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var36 = var30.getMouseListeners();
    java.awt.Dimension var37 = var30.getPreferredSize();
    java.util.Locale var38 = var30.getLocale();
    var13.setLocale(var38);
    var0.setLocale(var38);
    java.awt.Component var41 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "PanelUI"+ "'", var7.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test9");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    boolean var7 = var0.isFocusOwner();
    java.awt.Image var10 = var0.createImage(100, 400);
    java.awt.Dimension var11 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test10");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    boolean var12 = var0.requestFocusInWindow();
    boolean var13 = var0.hasFocus();
    var0.enable(true);
    java.util.Locale var16 = var0.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var18 = var0.getComponent(99);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test11");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    boolean var15 = var0.requestFocusInWindow();
    boolean var16 = var0.isMinimumSizeSet();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.setFocusCycleRoot(true);
    java.awt.Component var23 = var17.getComponentAt(24, 500);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var30 = var24.getMouseListeners();
    int var31 = var24.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var32 = var24.getInputMethodRequests();
    var24.removeNotify();
    var24.enable();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    java.awt.Color var36 = var35.getBackground();
    boolean var39 = var35.inside(0, (-1));
    var35.transferFocusUpCycle();
    java.lang.String var41 = var35.getName();
    boolean var42 = var24.isFocusCycleRoot((java.awt.Container)var35);
    java.awt.Dimension var43 = var24.getMinimumSize();
    var17.setMinimumSize(var43);
    java.awt.Dimension var45 = var0.getSize(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test12");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    var1.grabFocus();
    var1.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test13");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    var0.doLayout();
    javax.swing.border.Border var19 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test14");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    javax.swing.plaf.PanelUI var40 = var20.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    java.awt.Rectangle var56 = var48.getVisibleRect();
    var41.repaint(var56);
    java.awt.FocusTraversalPolicy var58 = var41.getFocusTraversalPolicy();
    var41.resetKeyboardActions();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    boolean var64 = var60.isDoubleBuffered();
    java.awt.dnd.DropTarget var65 = var60.getDropTarget();
    var60.show(false);
    java.awt.Rectangle var68 = var60.getVisibleRect();
    var41.computeVisibleRect(var68);
    javax.swing.ActionMap var70 = var41.getActionMap();
    var20.setActionMap(var70);
    java.awt.Point var72 = var20.getMousePosition();
    int var73 = var11.getComponentZOrder((java.awt.Component)var20);
    java.awt.Point var74 = var20.location();
    boolean var75 = var20.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test15");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    java.awt.FocusTraversalPolicy var26 = var0.getFocusTraversalPolicy();
    java.awt.Component var29 = var0.locate(3, 100);
    var0.removeAll();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    var34.nextFocus();
    var34.updateUI();
    var34.enableInputMethods(true);
    var31.add((java.awt.Component)var32, (java.lang.Object)true);
    java.awt.Image var45 = var32.createImage(1, (-1));
    java.awt.event.MouseListener[] var46 = var32.getMouseListeners();
    java.awt.Color var47 = var32.getBackground();
    boolean var48 = var32.getIgnoreRepaint();
    var32.enable();
    var32.show(false);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    boolean var56 = var52.isDoubleBuffered();
    java.awt.dnd.DropTarget var57 = var52.getDropTarget();
    var52.show(false);
    boolean var60 = var52.isPaintingForPrint();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var67 = var61.getMouseListeners();
    int var68 = var61.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var69 = var61.getInputMethodRequests();
    var52.addKeyListener((java.awt.event.KeyListener)var61);
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.setVisible(false);
    boolean var75 = var71.isDoubleBuffered();
    var71.list();
    float var77 = var71.getAlignmentY();
    boolean var78 = var61.isFocusCycleRoot((java.awt.Container)var71);
    var71.firePropertyChange("", 1L, 1L);
    var71.setVerifyInputWhenFocusTarget(true);
    var71.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var89 = var71.getLocation();
    java.awt.Point var90 = var32.getLocation(var89);
    java.awt.Point var91 = var0.getLocation(var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var93 = var0.areFocusTraversalKeysSet(500);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test16");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var28 = var0.getRegisteredKeyStrokes();
    java.lang.String var29 = var0.getName();
    java.lang.String var30 = var0.getName();
    var0.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test17");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    javax.swing.plaf.PanelUI var3 = var0.getUI();
    var0.setFocusCycleRoot(true);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var12 = var6.getMouseListeners();
    int var13 = var6.getDebugGraphicsOptions();
    boolean var14 = var6.isValid();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.setEnabled(false);
    var15.invalidate();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    var23.updateUI();
    var23.enableInputMethods(true);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    boolean var33 = var31.hasFocus();
    java.awt.Insets var34 = var31.getInsets();
    java.awt.Insets var35 = var23.getInsets(var34);
    boolean var36 = var23.isManagingFocus();
    java.awt.Image var39 = var23.createImage(1, 10);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    var40.setMaximumSize(var50);
    boolean var52 = var40.getVerifyInputWhenFocusTarget();
    int var53 = var40.getX();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    var54.setEnabled(false);
    var23.add((java.awt.Component)var40, (java.lang.Object)false);
    boolean var61 = var23.isForegroundSet();
    java.awt.Component var62 = var15.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var23);
    var23.revalidate();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    var64.setName("");
    java.awt.Toolkit var67 = var64.getToolkit();
    var64.setEnabled(false);
    var64.removeNotify();
    boolean var71 = var64.isDisplayable();
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    java.awt.Color var73 = var72.getBackground();
    var72.repaint();
    var72.setRequestFocusEnabled(false);
    var72.reshape(100, 0, 100, 0);
    var72.requestFocus();
    java.awt.Rectangle var83 = var72.getVisibleRect();
    java.awt.Rectangle var84 = var72.getBounds();
    java.awt.im.InputMethodRequests var85 = var72.getInputMethodRequests();
    boolean var86 = var72.requestFocusInWindow();
    java.awt.Point var88 = var72.getMousePosition(false);
    var72.setDebugGraphicsOptions(1);
    java.awt.Graphics var91 = var72.getGraphics();
    var64.paintAll(var91);
    var23.print(var91);
    var6.paintComponents(var91);
    var0.paintAll(var91);
    boolean var96 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test18");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.firePropertyChange("", (-1), 1);
    boolean var20 = var14.isFocusOwner();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    java.awt.Toolkit var27 = var22.getToolkit();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    var28.setName("");
    int var31 = var28.getX();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var37.setForeground(var42);
    var32.setBackground(var42);
    var28.setBackground(var42);
    var22.setForeground(var42);
    var14.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var42);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var53 = var48.getUI();
    var14.setUI(var53);
    var1.setUI(var53);
    javax.swing.TransferHandler var56 = var1.getTransferHandler();
    int var57 = var1.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test19");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var13 = var0.getToolkit();
    java.awt.Dimension var14 = var0.minimumSize();
    java.awt.Image var17 = var0.createImage((-1), 400);
    var0.setAlignmentY(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test20");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    var0.setDown(false);
    var0.setScore(505);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test21");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    boolean var18 = var10.isPaintingForPrint();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var25 = var19.getMouseListeners();
    int var26 = var19.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var27 = var19.getInputMethodRequests();
    var10.addKeyListener((java.awt.event.KeyListener)var19);
    var19.repaint();
    java.awt.Point var30 = var19.location();
    java.awt.Point var31 = var19.getLocation();
    boolean var32 = var0.contains(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test22");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    var17.setName("");
    var17.transferFocusBackward();
    boolean var26 = var17.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test23");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    var26.list();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    java.awt.image.BufferedImage var42 = var32.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var43 = var26.isAncestorOf((java.awt.Component)var32);
    java.awt.GraphicsConfiguration var44 = var32.getGraphicsConfiguration();
    java.awt.Font var45 = var32.getFont();
    var0.setFont(var45);
    var0.nextFocus();
    java.awt.Point var48 = var0.getLocation();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    java.awt.dnd.DropTarget var54 = var49.getDropTarget();
    var49.show(false);
    boolean var57 = var49.isPaintingForPrint();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var64 = var58.getMouseListeners();
    int var65 = var58.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var66 = var58.getInputMethodRequests();
    var49.addKeyListener((java.awt.event.KeyListener)var58);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    boolean var72 = var68.isDoubleBuffered();
    var68.list();
    float var74 = var68.getAlignmentY();
    boolean var75 = var58.isFocusCycleRoot((java.awt.Container)var68);
    java.awt.Component[] var76 = var58.getComponents();
    boolean var77 = var58.isFocusCycleRoot();
    java.awt.Dimension var78 = var58.getSize();
    var0.setMaximumSize(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test24");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.loseLife();
    boolean var8 = var0.isDead();
    int var9 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test25");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.paintImmediately((-1), 10, 100, 25);
    boolean var16 = var0.isOpaque();
    javax.swing.border.Border var17 = var0.getBorder();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    boolean var27 = var18.requestDefaultFocus();
    java.awt.Insets var28 = var18.getInsets();
    var18.setDoubleBuffered(false);
    java.awt.Toolkit var31 = var18.getToolkit();
    java.awt.Dimension var32 = var18.getMinimumSize();
    java.lang.String var33 = var18.toString();
    var18.disable();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var41 = var35.getUI();
    java.awt.im.InputMethodRequests var42 = var35.getInputMethodRequests();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.updateUI();
    var43.enableInputMethods(true);
    var43.setSize((-1), 1);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    var54.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var35.add((java.awt.Component)var43, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var60 = var43.getComponentOrientation();
    boolean var61 = var43.isMaximumSizeSet();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    boolean var66 = var62.isDoubleBuffered();
    java.awt.dnd.DropTarget var67 = var62.getDropTarget();
    var62.show(false);
    boolean var70 = var62.isPaintingForPrint();
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    float var72 = var71.getAlignmentX();
    var71.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var77 = var71.getMouseListeners();
    int var78 = var71.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var79 = var71.getInputMethodRequests();
    var62.addKeyListener((java.awt.event.KeyListener)var71);
    SpaceWar.SpacePanel var81 = new SpaceWar.SpacePanel();
    float var82 = var81.getAlignmentX();
    var81.setVisible(false);
    boolean var85 = var81.isDoubleBuffered();
    var81.list();
    float var87 = var81.getAlignmentY();
    boolean var88 = var71.isFocusCycleRoot((java.awt.Container)var81);
    boolean var89 = var81.isEnabled();
    java.awt.Dimension var90 = var81.getMaximumSize();
    var43.setMinimumSize(var90);
    var43.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)1, (byte)0);
    boolean var96 = var43.isMaximumSizeSet();
    var0.add((java.awt.Component)var18, (java.lang.Object)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var33,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var33.equals("SpaceWar.SpacePanel[,0,0,0var33,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test26");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    java.awt.Component var9 = var0.getComponentAt(1, (-1));
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    var10.setMaximumSize(var20);
    boolean var22 = var10.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var23 = var10.getAccessibleContext();
    boolean var24 = var10.isDoubleBuffered();
    java.awt.Rectangle var25 = var10.getVisibleRect();
    var0.setBounds(var25);
    java.awt.event.ComponentListener[] var27 = var0.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test27");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    java.awt.FocusTraversalPolicy var26 = var0.getFocusTraversalPolicy();
    java.awt.Component var29 = var0.locate(3, 100);
    boolean var30 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test28");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(594.7973940347722d, 3, 100);
    double var4 = var3.getR();
    double var5 = var3.getX();
    double var6 = var3.getR();
    double var7 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5.0d);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test29");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    java.awt.im.InputContext var21 = var10.getInputContext();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    var22.setName("");
    java.awt.Dimension var25 = var22.minimumSize();
    var10.setPreferredSize(var25);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    boolean var29 = var27.hasFocus();
    java.awt.Insets var30 = var27.getInsets();
    java.awt.Rectangle var31 = var27.bounds();
    java.awt.event.MouseMotionListener[] var32 = var27.getMouseMotionListeners();
    boolean var33 = var27.isMaximumSizeSet();
    java.awt.LayoutManager var34 = var27.getLayout();
    java.awt.Rectangle var35 = var27.getBounds();
    var27.transferFocusBackward();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    boolean var41 = var37.isDoubleBuffered();
    var37.list();
    float var43 = var37.getAlignmentY();
    java.awt.event.ComponentListener[] var44 = var37.getComponentListeners();
    java.awt.Component var45 = var37.getNextFocusableComponent();
    boolean var46 = var37.isManagingFocus();
    javax.swing.border.Border var47 = var37.getBorder();
    java.lang.Object var48 = var37.getTreeLock();
    javax.swing.border.Border var49 = var37.getBorder();
    var37.setEnabled(false);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    java.awt.Dimension var58 = var54.getPreferredSize();
    boolean var59 = var54.getVerifyInputWhenFocusTarget();
    java.awt.Component var62 = var54.findComponentAt(10, 1);
    var52.addKeyListener((java.awt.event.KeyListener)var54);
    var54.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var69 = var54.getColorModel();
    boolean var70 = var54.isFocusTraversalPolicyProvider();
    var54.show(false);
    boolean var73 = var54.isManagingFocus();
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    java.awt.Color var75 = var74.getBackground();
    var74.repaint();
    var74.setRequestFocusEnabled(false);
    var74.reshape(100, 0, 100, 0);
    var74.requestFocus();
    java.awt.Rectangle var85 = var74.getVisibleRect();
    java.awt.Rectangle var86 = var74.getBounds();
    java.awt.im.InputMethodRequests var87 = var74.getInputMethodRequests();
    boolean var88 = var74.requestFocusInWindow();
    java.awt.Point var90 = var74.getMousePosition(false);
    var74.setDebugGraphicsOptions(1);
    java.awt.Graphics var93 = var74.getGraphics();
    var54.paint(var93);
    var37.paintComponents(var93);
    var27.update(var93);
    var10.printComponents(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test30");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    boolean var17 = var13.isDoubleBuffered();
    java.awt.dnd.DropTarget var18 = var13.getDropTarget();
    var13.show(false);
    java.awt.Rectangle var21 = var13.getVisibleRect();
    java.awt.Toolkit var22 = var13.getToolkit();
    java.awt.event.MouseMotionListener[] var23 = var13.getMouseMotionListeners();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    java.awt.Color var29 = var28.getBackground();
    var24.setForeground(var29);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    var24.repaint(var39);
    java.awt.Component.BaselineResizeBehavior var41 = var24.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    var42.repaint(1L);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    var49.list();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    boolean var59 = var55.isDoubleBuffered();
    java.awt.dnd.DropTarget var60 = var55.getDropTarget();
    var55.show(false);
    java.awt.Rectangle var63 = var55.getVisibleRect();
    java.awt.Rectangle var64 = var49.getBounds(var63);
    var42.setBounds(var64);
    var24.paintImmediately(var64);
    var13.setBounds(var64);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    java.awt.Color var73 = var72.getBackground();
    var68.setForeground(var73);
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    boolean var79 = var75.isDoubleBuffered();
    java.awt.dnd.DropTarget var80 = var75.getDropTarget();
    var75.show(false);
    java.awt.Rectangle var83 = var75.getVisibleRect();
    var68.repaint(var83);
    java.awt.Component.BaselineResizeBehavior var85 = var68.getBaselineResizeBehavior();
    var0.add((java.awt.Component)var13, (java.lang.Object)var85);
    float var87 = var0.getAlignmentX();
    boolean var88 = var0.isPaintingTile();
    javax.swing.InputMap var89 = var0.getInputMap();
    var0.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test31");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    java.awt.image.VolatileImage var28 = var0.createVolatileImage(399, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test32");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    java.awt.im.InputMethodRequests var6 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    boolean var19 = var7.getVerifyInputWhenFocusTarget();
    var7.transferFocusUpCycle();
    java.awt.Point var21 = var7.location();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.nextFocus();
    var22.reshape((-1), 1, (-1), 10);
    var22.disable();
    var22.show();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    boolean var44 = var40.isDoubleBuffered();
    java.awt.dnd.DropTarget var45 = var40.getDropTarget();
    var40.show(false);
    java.awt.Rectangle var48 = var40.getVisibleRect();
    java.awt.Rectangle var49 = var34.getBounds(var48);
    javax.swing.JToolTip var50 = var34.createToolTip();
    var34.firePropertyChange("", false, false);
    var34.validate();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    boolean var60 = var56.isDoubleBuffered();
    java.awt.dnd.DropTarget var61 = var56.getDropTarget();
    var56.show(false);
    boolean var64 = var56.isPaintingForPrint();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var71 = var65.getMouseListeners();
    int var72 = var65.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var73 = var65.getInputMethodRequests();
    var56.addKeyListener((java.awt.event.KeyListener)var65);
    var65.repaint();
    java.awt.Point var76 = var65.location();
    java.awt.Component var77 = var34.getComponentAt(var76);
    java.awt.Point var78 = var22.getLocation(var76);
    java.awt.Point var79 = var7.getLocation(var76);
    java.awt.Component var80 = var0.getComponentAt(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test33");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.updateUI();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    java.awt.Toolkit var27 = var22.getToolkit();
    boolean var28 = var22.isFocusable();
    javax.swing.KeyStroke[] var29 = var22.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    java.awt.Dimension var36 = var32.getPreferredSize();
    boolean var37 = var32.getVerifyInputWhenFocusTarget();
    java.awt.Component var40 = var32.findComponentAt(10, 1);
    var30.addKeyListener((java.awt.event.KeyListener)var32);
    var32.repaint(100, (-1), (-1), 1);
    boolean var47 = var22.isAncestorOf((java.awt.Component)var32);
    java.awt.Point var48 = var22.location();
    boolean var49 = var0.contains(var48);
    int var50 = var0.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test34");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    int var50 = var36.getComponentCount();
    boolean var53 = var36.inside(10, 400);
    var36.setAlignmentY(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test35");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    java.lang.String var21 = var0.getUIClassID();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    boolean var28 = var22.isFocusOwner();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    java.awt.Toolkit var35 = var30.getToolkit();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    var36.setName("");
    int var39 = var36.getX();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    var45.setForeground(var50);
    var40.setBackground(var50);
    var36.setBackground(var50);
    var30.setForeground(var50);
    var22.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var50);
    boolean var56 = var22.isEnabled();
    var22.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 1);
    int var61 = var0.getComponentZOrder((java.awt.Component)var22);
    java.awt.dnd.DropTarget var62 = var0.getDropTarget();
    boolean var63 = var0.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PanelUI"+ "'", var21.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test36");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    boolean var13 = var0.isOptimizedDrawingEnabled();
    var0.enableInputMethods(true);
    java.awt.im.InputContext var16 = var0.getInputContext();
    java.awt.event.KeyListener[] var17 = var0.getKeyListeners();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    var18.list();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    java.awt.dnd.DropTarget var29 = var24.getDropTarget();
    var24.show(false);
    java.awt.Rectangle var32 = var24.getVisibleRect();
    java.awt.Rectangle var33 = var18.getBounds(var32);
    javax.swing.JToolTip var34 = var18.createToolTip();
    boolean var35 = var34.getInheritsPopupMenu();
    int var36 = var0.getComponentZOrder((java.awt.Component)var34);
    var34.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var34.firePropertyChange("PanelUI", 0L, 0L);
    int var43 = var34.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test37");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    javax.swing.InputMap var9 = var0.getInputMap(1);
    javax.swing.TransferHandler var10 = var0.getTransferHandler();
    java.awt.event.MouseListener[] var11 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test38");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    java.awt.event.HierarchyListener[] var25 = var0.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test39");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    var0.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.setInheritsPopupMenu(false);
    boolean var20 = var14.isDoubleBuffered();
    boolean var21 = var14.isMinimumSizeSet();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    var22.setMaximumSize(var32);
    boolean var34 = var22.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var35 = var22.getAccessibleContext();
    boolean var36 = var22.isDoubleBuffered();
    java.awt.Rectangle var37 = var22.getVisibleRect();
    var14.setBounds(var37);
    var0.computeVisibleRect(var37);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    var40.setMaximumSize(var50);
    boolean var52 = var40.getVerifyInputWhenFocusTarget();
    int var53 = var40.getX();
    java.awt.Rectangle var54 = var40.bounds();
    var0.remove((java.awt.Component)var40);
    java.awt.Insets var56 = var40.insets();
    var40.setFocusCycleRoot(false);
    var40.firePropertyChange("hi!", 10L, 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test40");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    java.awt.Rectangle var77 = var0.getVisibleRect();
    javax.swing.InputMap var78 = var0.getInputMap();
    var0.reshape(499, 400, 2, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test41");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.transferFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    boolean var35 = var30.getVerifyInputWhenFocusTarget();
    java.awt.Component var38 = var30.findComponentAt(10, 1);
    var28.addKeyListener((java.awt.event.KeyListener)var30);
    java.awt.Dimension var40 = var30.getMinimumSize();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    var41.setRequestFocusEnabled(false);
    var41.reshape(100, 0, 100, 0);
    var41.requestFocus();
    java.awt.Rectangle var52 = var41.getVisibleRect();
    var30.setBounds(var52);
    var0.scrollRectToVisible(var52);
    boolean var55 = var0.isDisplayable();
    var0.revalidate();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.updateUI();
    var60.enableInputMethods(true);
    var57.add((java.awt.Component)var58, (java.lang.Object)true);
    boolean var69 = var57.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var70 = var57.getHierarchyListeners();
    int var71 = var57.getComponentCount();
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    java.awt.Color var73 = var72.getBackground();
    var72.repaint();
    var72.setRequestFocusEnabled(false);
    var72.removeAll();
    var57.setNextFocusableComponent((java.awt.Component)var72);
    java.awt.Insets var79 = var57.insets();
    java.awt.Insets var80 = var0.getInsets(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test42");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    var0.enable(true);
    var0.enable();
    java.awt.Point var6 = var0.location();
    var0.setDebugGraphicsOptions(0);
    boolean var9 = var0.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test43");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var8 = var0.getUI();
    java.util.Set var10 = var0.getFocusTraversalKeys(3);
    var0.requestFocus();
    var0.setAlignmentX(0.0f);
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    var0.repaint();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test44");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    javax.swing.border.Border var27 = var5.getBorder();
    java.awt.Point var28 = var5.getLocation();
    java.awt.Rectangle var29 = var5.getBounds();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    float var48 = var30.getAlignmentX();
    java.awt.image.VolatileImage var51 = var30.createVolatileImage(25, 1);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    boolean var56 = var52.isDoubleBuffered();
    var52.list();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    boolean var62 = var58.isDoubleBuffered();
    java.awt.dnd.DropTarget var63 = var58.getDropTarget();
    var58.show(false);
    java.awt.Rectangle var66 = var58.getVisibleRect();
    java.awt.Rectangle var67 = var52.getBounds(var66);
    javax.swing.JToolTip var68 = var52.createToolTip();
    java.awt.Dimension var69 = var52.minimumSize();
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    var70.setInheritsPopupMenu(false);
    var70.setFocusTraversalPolicyProvider(true);
    java.awt.Container var78 = var70.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    float var80 = var79.getAlignmentX();
    var79.removeNotify();
    SpaceWar.SpacePanel var82 = new SpaceWar.SpacePanel();
    float var83 = var82.getAlignmentX();
    var82.setVisible(false);
    boolean var86 = var82.isDoubleBuffered();
    var82.list();
    float var88 = var82.getAlignmentY();
    java.awt.Insets var89 = var82.getInsets();
    java.awt.Insets var90 = var79.getInsets(var89);
    java.awt.Insets var91 = var70.getInsets(var90);
    java.awt.Insets var92 = var52.getInsets(var90);
    java.awt.Insets var93 = var30.getInsets(var90);
    java.awt.Insets var94 = var5.getInsets(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test45");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion((-14.294084445243069d), 594.7973940347722d, 499, 10);
    boolean var5 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test46");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    var9.removeNotify();
    var9.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var28 = var22.getUI();
    java.awt.im.InputMethodRequests var29 = var22.getInputMethodRequests();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.updateUI();
    var30.enableInputMethods(true);
    var30.setSize((-1), 1);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    var41.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var22.add((java.awt.Component)var30, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    java.awt.Dimension var51 = var47.getPreferredSize();
    java.awt.Toolkit var52 = var47.getToolkit();
    java.awt.Toolkit var53 = var47.getToolkit();
    java.awt.Component var54 = var30.add((java.awt.Component)var47);
    java.awt.dnd.DropTarget var55 = var30.getDropTarget();
    java.awt.Point var56 = var30.location();
    java.awt.Point var57 = var9.getLocation(var56);
    var9.show(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test47");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    var0.enableInputMethods(true);
    java.awt.Dimension var28 = var0.size();
    java.awt.Dimension var29 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test48");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    int var14 = var0.getComponentCount();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    var15.setRequestFocusEnabled(false);
    var15.removeAll();
    var0.setNextFocusableComponent((java.awt.Component)var15);
    java.awt.event.KeyListener[] var22 = var15.getKeyListeners();
    boolean var23 = var15.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test49");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Font var5 = var0.getFont();
    java.awt.Dimension var6 = var0.preferredSize();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    java.beans.VetoableChangeListener[] var17 = var7.getVetoableChangeListeners();
    java.awt.Rectangle var18 = var7.getVisibleRect();
    float var19 = var7.getAlignmentY();
    java.awt.Dimension var20 = var7.minimumSize();
    javax.swing.InputVerifier var21 = var7.getInputVerifier();
    java.awt.Font var22 = var7.getFont();
    java.awt.LayoutManager var23 = var7.getLayout();
    var0.setLayout(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test50");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    javax.swing.JToolTip var50 = var2.createToolTip();
    boolean var51 = var50.isFocusTraversable();
    boolean var52 = var50.isEnabled();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    var53.nextFocus();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    java.awt.Color var63 = var62.getBackground();
    var58.setForeground(var63);
    var53.setBackground(var63);
    java.awt.Component var66 = var53.getNextFocusableComponent();
    float var67 = var53.getAlignmentY();
    var53.setFocusTraversalPolicyProvider(true);
    boolean var70 = var50.isAncestorOf((java.awt.Component)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test51");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    java.awt.Dimension var6 = var0.size();
    boolean var7 = var0.isMinimumSizeSet();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)1, (byte)10);
    int var12 = var0.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test52");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var0.setMaximumSize(var17);
    java.awt.Dimension var19 = var0.preferredSize();
    javax.swing.InputVerifier var20 = var0.getInputVerifier();
    java.awt.event.MouseWheelListener[] var21 = var0.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test53");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    java.awt.Container var42 = var0.getParent();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.reshape((-1), 1, (-1), 10);
    java.util.Set var54 = var43.getFocusTraversalKeys(3);
    java.awt.Point var55 = var43.getLocation();
    boolean var56 = var0.contains(var55);
    var0.setLocation((-1), 25);
    java.lang.String var60 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test54");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    boolean var6 = var0.isDoubleBuffered();
    int var7 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test55");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    int var12 = var0.getHeight();
    javax.swing.InputVerifier var13 = var0.getInputVerifier();
    java.awt.Graphics var14 = var0.getGraphics();
    java.awt.Color var15 = var0.getForeground();
    java.awt.Cursor var16 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test56");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    var19.repaint(1L);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    var26.list();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    java.awt.Rectangle var40 = var32.getVisibleRect();
    java.awt.Rectangle var41 = var26.getBounds(var40);
    var19.setBounds(var41);
    var0.paintImmediately(var41);
    java.beans.PropertyChangeListener[] var45 = var0.getPropertyChangeListeners("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test57");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    java.awt.event.HierarchyBoundsListener[] var23 = var2.getHierarchyBoundsListeners();
    boolean var26 = var2.contains(25, 3);
    java.awt.Point var27 = var2.getMousePosition();
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test58");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    boolean var22 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test59");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    javax.swing.TransferHandler var18 = var0.getTransferHandler();
    java.awt.Component var19 = var0.getNextFocusableComponent();
    java.awt.image.VolatileImage var22 = var0.createVolatileImage(10, (-1));
    var0.setVisible(false);
    boolean var25 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test60");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var0.isCursorSet();
    var0.transferFocusDownCycle();
    java.awt.Insets var27 = var0.getInsets();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    boolean var33 = var28.getVerifyInputWhenFocusTarget();
    java.awt.Component var36 = var28.findComponentAt(10, 1);
    boolean var37 = var28.requestDefaultFocus();
    var28.setVerifyInputWhenFocusTarget(true);
    var28.transferFocusDownCycle();
    java.awt.Dimension var41 = var28.getSize();
    var0.setSize(var41);
    java.awt.image.ColorModel var43 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test61");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    var0.invalidate();
    boolean var15 = var0.isValid();
    boolean var16 = var0.getVerifyInputWhenFocusTarget();
    var0.removeNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test62");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    boolean var12 = var0.requestFocusInWindow();
    boolean var13 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    javax.swing.JToolTip var31 = var15.createToolTip();
    java.awt.Graphics var32 = var15.getGraphics();
    var15.setAutoscrolls(false);
    boolean var35 = var15.requestFocusInWindow();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    var36.reshape((-1), 1, (-1), 10);
    var36.disable();
    java.awt.LayoutManager var47 = var36.getLayout();
    java.awt.Container var48 = var36.getParent();
    boolean var49 = var36.isOptimizedDrawingEnabled();
    java.awt.Font var50 = var36.getFont();
    java.awt.FontMetrics var51 = var15.getFontMetrics(var50);
    javax.swing.InputMap var52 = var15.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputMap(3, var52);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test63");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    java.awt.Image var8 = var0.createImage(10, 100);
    java.awt.Component.BaselineResizeBehavior var9 = var0.getBaselineResizeBehavior();
    boolean var10 = var0.isMinimumSizeSet();
    float var11 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test64");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    boolean var38 = var32.isFocusOwner();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    java.awt.Toolkit var45 = var40.getToolkit();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    var46.setName("");
    int var49 = var46.getX();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    java.awt.Color var60 = var59.getBackground();
    var55.setForeground(var60);
    var50.setBackground(var60);
    var46.setBackground(var60);
    var40.setForeground(var60);
    var32.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var60);
    var14.setBackground(var60);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    java.awt.Color var78 = var77.getBackground();
    var73.setForeground(var78);
    var67.setBackground(var78);
    java.awt.Point var81 = var67.location();
    java.awt.Point var82 = var14.getLocation(var81);
    boolean var83 = var1.contains(var82);
    java.lang.String var84 = var1.getUIClassID();
    java.awt.event.KeyListener[] var85 = var1.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "PanelUI"+ "'", var84.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test65");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 400.17452406437286d, 5.0d);
    java.awt.Container var7 = var0.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test66");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var36 = var30.getUI();
    java.awt.im.InputMethodRequests var37 = var30.getInputMethodRequests();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.setSize((-1), 1);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var30.add((java.awt.Component)var38, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    var55.setInheritsPopupMenu(false);
    boolean var61 = var55.isDoubleBuffered();
    boolean var62 = var55.isMinimumSizeSet();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    java.awt.Dimension var73 = var69.getPreferredSize();
    var63.setMaximumSize(var73);
    boolean var75 = var63.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var76 = var63.getAccessibleContext();
    boolean var77 = var63.isDoubleBuffered();
    java.awt.Rectangle var78 = var63.getVisibleRect();
    var55.setBounds(var78);
    java.awt.Rectangle var80 = var30.getBounds(var78);
    var0.computeVisibleRect(var78);
    java.awt.image.ColorModel var82 = var0.getColorModel();
    boolean var83 = var0.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test67");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    var0.grabFocus();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    boolean var18 = var13.getVerifyInputWhenFocusTarget();
    java.awt.Component var21 = var13.findComponentAt(10, 1);
    boolean var22 = var13.isCursorSet();
    java.lang.Object var23 = var0.getClientProperty((java.lang.Object)var22);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var24.repaint();
    java.awt.im.InputMethodRequests var27 = var24.getInputMethodRequests();
    int var28 = var24.countComponents();
    java.awt.event.ComponentListener[] var29 = var24.getComponentListeners();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.removeNotify();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    var33.list();
    float var39 = var33.getAlignmentY();
    java.awt.Insets var40 = var33.getInsets();
    java.awt.Insets var41 = var30.getInsets(var40);
    java.awt.Insets var42 = var24.getInsets(var41);
    java.awt.event.ComponentListener[] var43 = var24.getComponentListeners();
    java.lang.String var44 = var24.toString();
    var0.addKeyListener((java.awt.event.KeyListener)var24);
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var44.equals("SpaceWar.SpacePanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test68");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet((-1.0d), 399, (-1));

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test69");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    int var24 = var16.getPowerLevel();
    int var25 = var16.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test70");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    boolean var18 = var0.isLightweight();
    var0.setLocation(399, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test71");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    var0.resetKeyboardActions();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var25 = var19.getMouseListeners();
    int var26 = var19.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var19.paintImmediately(var35);
    var0.setBounds(var35);
    boolean var38 = var0.getVerifyInputWhenFocusTarget();
    var0.setFocusTraversalKeysEnabled(false);
    var0.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test72");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    boolean var36 = var0.requestFocus(true);
    var0.reshape((-1), 10, 24, 0);
    java.awt.event.MouseWheelListener[] var42 = var0.getMouseWheelListeners();
    java.awt.FocusTraversalPolicy var43 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var44 = var0.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test73");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    javax.swing.event.AncestorListener[] var6 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test74");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.event.InputMethodListener[] var20 = var11.getInputMethodListeners();
    boolean var23 = var11.contains(2, 3);
    var11.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)1, (short)1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.reshape((-1), 1, (-1), 10);
    var28.disable();
    boolean var39 = var28.isFocusable();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var46 = var40.getUI();
    java.awt.im.InputMethodRequests var47 = var40.getInputMethodRequests();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    var48.nextFocus();
    var48.updateUI();
    var48.enableInputMethods(true);
    var48.setSize((-1), 1);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    var59.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var40.add((java.awt.Component)var48, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var65 = var40.getKeyListeners();
    java.awt.FocusTraversalPolicy var66 = var40.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    var67.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var72 = var67.getToolkit();
    var28.add((java.awt.Component)var40, (java.lang.Object)var67);
    var28.layout();
    boolean var75 = var28.isVisible();
    var28.firePropertyChange("PanelUI", (byte)100, (byte)10);
    javax.swing.ActionMap var80 = var28.getActionMap();
    var11.setActionMap(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test75");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.transferFocusUpCycle();
    var0.setFocusable(false);
    int var14 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test76");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.resetKeyboardActions();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    boolean var10 = var0.getAutoscrolls();
    var0.firePropertyChange("hi!", 0.5f, 100.0f);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=800,height=600],minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 499, 500);
    var0.nextFocus();
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test77");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    boolean var9 = var0.requestFocus(false);
    var0.resetKeyboardActions();
    java.awt.Image var13 = var0.createImage(3, 0);
    boolean var14 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test78");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.firePropertyChange("PanelUI", 10, 10);
    boolean var14 = var0.requestFocusInWindow();
    var0.revalidate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test79");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    java.awt.Point var6 = var0.getMousePosition();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)100, (short)(-1));
    var0.list();
    int var12 = var0.getHeight();
    java.awt.Container var13 = var0.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test80");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    javax.swing.plaf.PanelUI var20 = var0.getUI();
    java.awt.Dimension var21 = var0.getMinimumSize();
    var0.hide();
    boolean var23 = var0.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test81");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    var0.transferFocusUpCycle();
    java.awt.Point var14 = var0.location();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    java.awt.im.InputMethodRequests var18 = var15.getInputMethodRequests();
    var15.setDoubleBuffered(true);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    boolean var23 = var21.hasFocus();
    java.awt.Insets var24 = var21.getInsets();
    java.awt.Insets var25 = var15.getInsets(var24);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    var26.add((java.awt.Component)var27, (java.lang.Object)true);
    java.awt.Image var40 = var27.createImage(1, (-1));
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.updateUI();
    var41.enableInputMethods(true);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    boolean var51 = var49.hasFocus();
    java.awt.Insets var52 = var49.getInsets();
    java.awt.Insets var53 = var41.getInsets(var52);
    java.awt.Insets var54 = var27.getInsets(var52);
    java.awt.Insets var55 = var15.getInsets(var52);
    java.awt.Component var56 = var0.add((java.awt.Component)var15);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    var57.nextFocus();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    java.awt.Color var64 = var63.getBackground();
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    var65.nextFocus();
    var65.updateUI();
    var65.enableInputMethods(true);
    var62.add((java.awt.Component)var63, (java.lang.Object)true);
    java.awt.Dimension var74 = var63.getPreferredSize();
    var57.setMaximumSize(var74);
    int var76 = var0.getComponentZOrder((java.awt.Component)var57);
    int var77 = var57.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test82");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    boolean var26 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    boolean var35 = var27.isPaintingForPrint();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var42 = var36.getMouseListeners();
    int var43 = var36.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var44 = var36.getInputMethodRequests();
    var27.addKeyListener((java.awt.event.KeyListener)var36);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    var46.list();
    float var52 = var46.getAlignmentY();
    boolean var53 = var36.isFocusCycleRoot((java.awt.Container)var46);
    boolean var54 = var46.isEnabled();
    java.awt.Dimension var55 = var46.getMaximumSize();
    var8.setMinimumSize(var55);
    var8.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)1, (byte)0);
    boolean var61 = var8.isMaximumSizeSet();
    var8.setFocusable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test83");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    boolean var36 = var0.requestFocus(true);
    java.awt.Dimension var37 = var0.getMinimumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var39 = var0.areFocusTraversalKeysSet(99);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test84");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    boolean var7 = var3.isDoubleBuffered();
    java.awt.dnd.DropTarget var8 = var3.getDropTarget();
    boolean var9 = var3.isFocusCycleRoot();
    var3.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var20 = var14.getUI();
    var3.add((java.awt.Component)var14, (java.lang.Object)(short)0);
    java.awt.Insets var23 = var14.getInsets();
    java.awt.Insets var24 = var0.getInsets(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    java.awt.Color var27 = var26.getBackground();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    var28.enableInputMethods(true);
    var25.add((java.awt.Component)var26, (java.lang.Object)true);
    boolean var37 = var25.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var38 = var25.getHierarchyListeners();
    var25.repaint(0L);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var47 = var41.getUI();
    java.awt.im.InputMethodRequests var48 = var41.getInputMethodRequests();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    var49.nextFocus();
    var49.updateUI();
    var49.enableInputMethods(true);
    var49.setSize((-1), 1);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    var60.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var41.add((java.awt.Component)var49, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var66 = var49.getComponentOrientation();
    java.beans.VetoableChangeListener[] var67 = var49.getVetoableChangeListeners();
    int var68 = var49.getHeight();
    javax.swing.ActionMap var69 = var49.getActionMap();
    var25.setActionMap(var69);
    var0.setActionMap(var69);
    var0.hide();
    var0.resize(10, 10);
    var0.setAlignmentY(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test85");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    var0.removeAll();
    int var33 = var0.getX();
    var0.transferFocusDownCycle();
    java.awt.Component var37 = var0.locate(3, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test86");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    int var10 = var0.getDebugGraphicsOptions();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    var23.repaint();
    var23.setRequestFocusEnabled(false);
    var23.reshape(100, 0, 100, 0);
    java.awt.Component var33 = var13.add((java.awt.Component)var23);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    var34.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var39 = var34.getUI();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    var40.repaint(1L);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    java.awt.Dimension var57 = var53.getPreferredSize();
    var47.setMaximumSize(var57);
    var40.setPreferredSize(var57);
    var34.setMaximumSize(var57);
    java.awt.Dimension var61 = var23.getSize(var57);
    var0.setMinimumSize(var61);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    boolean var67 = var63.isDoubleBuffered();
    var63.list();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    boolean var73 = var69.isDoubleBuffered();
    java.awt.dnd.DropTarget var74 = var69.getDropTarget();
    var69.show(false);
    java.awt.Rectangle var77 = var69.getVisibleRect();
    java.awt.Rectangle var78 = var63.getBounds(var77);
    javax.swing.JToolTip var79 = var63.createToolTip();
    java.awt.Graphics var80 = var63.getGraphics();
    java.beans.VetoableChangeListener[] var81 = var63.getVetoableChangeListeners();
    var0.addKeyListener((java.awt.event.KeyListener)var63);
    java.awt.event.ContainerListener[] var83 = var0.getContainerListeners();
    var0.enableInputMethods(true);
    boolean var86 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test87");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    java.awt.Dimension var12 = var0.getSize();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.updateUI();
    java.util.Locale var19 = var13.getLocale();
    var0.setLocale(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test88");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var5 = var0.getUI();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    var6.nextFocus();
    var6.repaint(1L);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    java.awt.Dimension var23 = var19.getPreferredSize();
    var13.setMaximumSize(var23);
    var6.setPreferredSize(var23);
    var0.setMaximumSize(var23);
    var0.setAutoscrolls(false);
    java.awt.event.MouseListener[] var29 = var0.getMouseListeners();
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test89");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    var0.setBounds(3, 499, 3, 0);
    float var38 = var0.getAlignmentY();
    var0.resize(99, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test90");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.transferFocusBackward();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.enable(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    boolean var17 = var15.hasFocus();
    java.awt.Insets var18 = var15.getInsets();
    java.awt.Rectangle var19 = var15.bounds();
    var8.repaint(var19);
    java.awt.Component var21 = var0.add("", (java.awt.Component)var8);
    java.awt.Point var22 = var21.getLocation();
    java.util.Locale var23 = var21.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test91");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    int var3 = var0.getY();
    int var4 = var0.getX();
    var0.setLeft(false);
    var0.setLeft(false);
    var0.setLeft(false);
    var0.setLeft(false);
    var0.setLife(10);
    int var15 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 400);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test92");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    java.awt.Color var13 = var12.getBackground();
    var8.setForeground(var13);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    java.awt.Rectangle var23 = var15.getVisibleRect();
    var8.repaint(var23);
    java.awt.FocusTraversalPolicy var25 = var8.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var26 = var8.getInputMethodRequests();
    var8.layout();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    java.awt.Color var39 = var38.getBackground();
    var34.setForeground(var39);
    var28.setBackground(var39);
    var8.setForeground(var39);
    int var43 = var8.getWidth();
    javax.swing.plaf.PanelUI var44 = var8.getUI();
    var0.setUI(var44);
    var0.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    boolean var58 = var54.isDoubleBuffered();
    java.awt.dnd.DropTarget var59 = var54.getDropTarget();
    var54.show(false);
    java.awt.Rectangle var62 = var54.getVisibleRect();
    java.awt.Rectangle var63 = var48.getBounds(var62);
    javax.swing.JToolTip var64 = var48.createToolTip();
    var48.firePropertyChange("", false, false);
    var48.validate();
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    boolean var74 = var70.isDoubleBuffered();
    java.awt.dnd.DropTarget var75 = var70.getDropTarget();
    var70.show(false);
    boolean var78 = var70.isPaintingForPrint();
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    float var80 = var79.getAlignmentX();
    var79.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var85 = var79.getMouseListeners();
    int var86 = var79.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var87 = var79.getInputMethodRequests();
    var70.addKeyListener((java.awt.event.KeyListener)var79);
    var79.repaint();
    java.awt.Point var90 = var79.location();
    java.awt.Component var91 = var48.getComponentAt(var90);
    boolean var92 = var0.contains(var90);
    boolean var93 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test93");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Rectangle var15 = var0.bounds();
    var0.setAutoscrolls(true);
    var0.invalidate();
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test94");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    var9.firePropertyChange("hi!", 'a', '4');
    boolean var39 = var9.getAutoscrolls();
    var9.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test95");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.paintImmediately((-1), 10, 100, 25);
    boolean var16 = var0.isOpaque();
    javax.swing.border.Border var17 = var0.getBorder();
    java.awt.Point var19 = var0.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test96");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getPower();
    var0.loseLife();
    var0.setScore(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test97");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.move((-1), 100);
    var19.validate();
    java.awt.Toolkit var32 = var19.getToolkit();
    var19.disable();
    java.awt.Rectangle var34 = var19.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test98");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    var0.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    java.awt.im.InputMethodRequests var13 = var10.getInputMethodRequests();
    var10.setDoubleBuffered(true);
    var10.show(false);
    var10.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var20.setForeground(var25);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var20.repaint(var35);
    java.awt.FocusTraversalPolicy var37 = var20.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var38 = var20.getInputMethodRequests();
    var20.layout();
    boolean var40 = var20.isFocusTraversalPolicyProvider();
    java.awt.Insets var41 = var20.insets();
    java.awt.Dimension var42 = var20.getMinimumSize();
    java.awt.Dimension var43 = var10.getSize(var42);
    boolean var44 = var0.isAncestorOf((java.awt.Component)var10);
    java.lang.String var45 = var10.getUIClassID();
    var10.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "PanelUI"+ "'", var45.equals("PanelUI"));

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test99");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.removeAll();
    boolean var6 = var0.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test100");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.increasePower(500);
    var0.setFiring(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test101");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    float var18 = var0.getAlignmentX();
    var0.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test102");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(500, 3);
    var2.explode();
    double var4 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test103");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    boolean var3 = var0.isDead();
    var0.setScore(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test104");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.setDown(false);
    boolean var9 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test105");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    var0.setAlignmentY(100.0f);
    boolean var9 = var0.isPaintingTile();
    java.awt.im.InputMethodRequests var10 = var0.getInputMethodRequests();
    boolean var11 = var0.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test106");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    boolean var17 = var0.isDoubleBuffered();
    var0.reshape(0, 3, 25, 3);
    var0.firePropertyChange("PanelUI", 500, (-1));
    var0.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test107");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.removeAll();
    java.awt.Component.BaselineResizeBehavior var7 = var0.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.image.BufferedImage var24 = var14.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var25 = var8.isAncestorOf((java.awt.Component)var14);
    javax.swing.InputVerifier var26 = var14.getInputVerifier();
    java.awt.Dimension var27 = var14.minimumSize();
    var0.addKeyListener((java.awt.event.KeyListener)var14);
    java.awt.Dimension var29 = var14.preferredSize();
    javax.swing.TransferHandler var30 = var14.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test108");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp((-1), 506.9915098063617d, 241.4584513263457d);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test109");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    var5.setOpaque(false);
    java.awt.Point var29 = var5.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test110");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    java.awt.Color var6 = var5.getBackground();
    var5.repaint();
    java.lang.Object var8 = var0.getClientProperty((java.lang.Object)var5);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    boolean var13 = var9.inside(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    var9.setForeground(var19);
    var5.setBackground(var19);
    boolean var25 = var5.inside(1, 25);
    var5.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test111");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    var0.removeAll();
    int var33 = var0.getX();
    boolean var36 = var0.contains(1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test112");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 10);
    var2.hit();
    int var4 = var2.getType();
    int var5 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test113");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    java.awt.Font var9 = var0.getFont();
    java.awt.Container var10 = var0.getTopLevelAncestor();
    java.awt.Component[] var11 = var0.getComponents();
    var0.setInheritsPopupMenu(true);
    boolean var15 = var0.areFocusTraversalKeysSet(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test114");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    boolean var8 = var6.hasFocus();
    java.awt.Insets var9 = var6.getInsets();
    java.awt.Insets var10 = var0.getInsets(var9);
    boolean var11 = var0.getAutoscrolls();
    boolean var12 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test115");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    java.awt.dnd.DropTarget var16 = var11.getDropTarget();
    var11.show(false);
    boolean var19 = var11.isPaintingForPrint();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    boolean var27 = var22.getVerifyInputWhenFocusTarget();
    java.awt.Component var30 = var22.findComponentAt(10, 1);
    var20.addKeyListener((java.awt.event.KeyListener)var22);
    java.awt.Dimension var32 = var22.getMinimumSize();
    var11.setMinimumSize(var32);
    var0.setPreferredSize(var32);
    var0.setFocusable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test116");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    java.awt.event.MouseMotionListener[] var10 = var0.getMouseMotionListeners();
    boolean var11 = var0.isManagingFocus();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    java.awt.Dimension var16 = var12.getPreferredSize();
    java.awt.Toolkit var17 = var12.getToolkit();
    boolean var18 = var12.isFocusable();
    javax.swing.KeyStroke[] var19 = var12.getRegisteredKeyStrokes();
    java.awt.Component var22 = var12.getComponentAt(100, 100);
    java.lang.Object var23 = var12.getTreeLock();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    java.awt.dnd.DropTarget var29 = var24.getDropTarget();
    java.awt.Point var30 = var24.getMousePosition();
    java.lang.String var31 = var24.getUIClassID();
    var12.setNextFocusableComponent((java.awt.Component)var24);
    int var33 = var12.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var34.repaint();
    java.awt.im.InputMethodRequests var37 = var34.getInputMethodRequests();
    var34.list();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    var39.repaint();
    var39.setRequestFocusEnabled(false);
    var39.reshape(100, 0, 100, 0);
    var39.requestFocus();
    java.awt.Rectangle var50 = var39.getVisibleRect();
    java.awt.Rectangle var51 = var39.getBounds();
    java.awt.im.InputMethodRequests var52 = var39.getInputMethodRequests();
    boolean var53 = var39.requestFocusInWindow();
    java.awt.Point var55 = var39.getMousePosition(false);
    var39.setDebugGraphicsOptions(1);
    java.awt.Graphics var58 = var39.getGraphics();
    var34.printComponents(var58);
    var12.update(var58);
    var0.printComponents(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PanelUI"+ "'", var31.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test117");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.getInheritsPopupMenu();
    javax.swing.event.AncestorListener[] var18 = var1.getAncestorListeners();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    java.awt.Color var26 = var25.getBackground();
    var25.repaint();
    var25.setRequestFocusEnabled(false);
    var25.reshape(100, 0, 100, 0);
    var25.requestFocus();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var42 = var36.getUI();
    java.awt.im.InputMethodRequests var43 = var36.getInputMethodRequests();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    var44.updateUI();
    var44.enableInputMethods(true);
    var44.setSize((-1), 1);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    var55.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var36.add((java.awt.Component)var44, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.setName("");
    java.awt.ComponentOrientation var64 = var61.getComponentOrientation();
    var36.applyComponentOrientation(var64);
    var25.setComponentOrientation(var64);
    var19.applyComponentOrientation(var64);
    int var68 = var19.getHeight();
    boolean var71 = var19.inside(3, 2);
    java.beans.PropertyChangeListener[] var72 = var19.getPropertyChangeListeners();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    var73.nextFocus();
    var73.repaint(1L);
    SpaceWar.SpacePanel var80 = new SpaceWar.SpacePanel();
    float var81 = var80.getAlignmentX();
    var80.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var86 = new SpaceWar.SpacePanel();
    float var87 = var86.getAlignmentX();
    var86.setVisible(false);
    java.awt.Dimension var90 = var86.getPreferredSize();
    var80.setMaximumSize(var90);
    var73.setPreferredSize(var90);
    javax.swing.plaf.PanelUI var93 = var73.getUI();
    java.awt.Dimension var94 = var73.getMinimumSize();
    boolean var95 = var73.isFocusable();
    java.awt.Color var96 = var73.getForeground();
    var19.setForeground(var96);
    var1.setForeground(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test118");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.getInheritsPopupMenu();
    boolean var7 = var0.isFocusOwner();
    boolean var8 = var0.isValidateRoot();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var9.repaint();
    java.awt.im.InputMethodRequests var12 = var9.getInputMethodRequests();
    java.awt.GraphicsConfiguration var13 = var9.getGraphicsConfiguration();
    boolean var15 = var9.requestFocus(false);
    javax.swing.JPopupMenu var16 = var9.getComponentPopupMenu();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    java.awt.Dimension var21 = var17.getPreferredSize();
    boolean var22 = var17.getVerifyInputWhenFocusTarget();
    java.awt.Component var25 = var17.findComponentAt(10, 1);
    boolean var26 = var17.requestDefaultFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var29 = var17.getLocation();
    java.awt.Point var30 = var9.getLocation(var29);
    java.awt.Component var31 = var0.getComponentAt(var29);
    var0.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test119");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.beans.PropertyChangeListener[] var8 = var0.getPropertyChangeListeners();
    java.awt.LayoutManager var9 = var0.getLayout();
    var0.show();
    var0.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test120");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    boolean var12 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test121");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    var8.repaint();
    java.awt.im.InputMethodRequests var11 = var8.getInputMethodRequests();
    java.awt.GraphicsConfiguration var12 = var8.getGraphicsConfiguration();
    java.awt.Component var13 = var0.add((java.awt.Component)var8);
    java.lang.String var14 = var0.getName();
    var0.setIgnoreRepaint(false);
    java.awt.Cursor var17 = var0.getCursor();
    boolean var18 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test122");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    var8.repaint();
    java.awt.im.InputMethodRequests var11 = var8.getInputMethodRequests();
    java.awt.GraphicsConfiguration var12 = var8.getGraphicsConfiguration();
    java.awt.Component var13 = var0.add((java.awt.Component)var8);
    boolean var14 = var8.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test123");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    var0.loseLife();
    var0.setScore(10);
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test124");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    var15.setName("");
    int var18 = var15.getX();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    var19.nextFocus();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    java.awt.Color var29 = var28.getBackground();
    var24.setForeground(var29);
    var19.setBackground(var29);
    var15.setBackground(var29);
    var9.setForeground(var29);
    javax.swing.JRootPane var34 = var9.getRootPane();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    var35.setName("");
    var35.enable(true);
    var35.enable();
    java.awt.Point var41 = var35.location();
    var35.repaint(0, 3, (-1), 1);
    var35.setBounds(25, 100, 1, 0);
    java.awt.Insets var52 = var35.getInsets();
    java.awt.peer.ComponentPeer var53 = var35.getPeer();
    javax.swing.KeyStroke[] var54 = var35.getRegisteredKeyStrokes();
    boolean var55 = var35.getAutoscrolls();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    java.awt.Color var57 = var56.getBackground();
    var56.repaint();
    var56.setRequestFocusEnabled(false);
    var56.reshape(100, 0, 100, 0);
    var56.requestFocus();
    java.awt.Rectangle var67 = var56.getVisibleRect();
    java.awt.Rectangle var68 = var56.getBounds();
    java.awt.im.InputMethodRequests var69 = var56.getInputMethodRequests();
    boolean var70 = var56.requestFocusInWindow();
    java.awt.Point var72 = var56.getMousePosition(false);
    var56.setDebugGraphicsOptions(1);
    java.awt.Graphics var75 = var56.getGraphics();
    var35.paintComponents(var75);
    var9.update(var75);
    var0.printComponents(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test125");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    boolean var26 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    boolean var35 = var27.isPaintingForPrint();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var42 = var36.getMouseListeners();
    int var43 = var36.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var44 = var36.getInputMethodRequests();
    var27.addKeyListener((java.awt.event.KeyListener)var36);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    var46.list();
    float var52 = var46.getAlignmentY();
    boolean var53 = var36.isFocusCycleRoot((java.awt.Container)var46);
    boolean var54 = var46.isEnabled();
    java.awt.Dimension var55 = var46.getMaximumSize();
    var8.setMinimumSize(var55);
    var8.disable();
    var8.setOpaque(true);
    boolean var60 = var8.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test126");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    var8.repaint();
    java.awt.im.InputMethodRequests var11 = var8.getInputMethodRequests();
    java.awt.GraphicsConfiguration var12 = var8.getGraphicsConfiguration();
    java.awt.Component var13 = var0.add((java.awt.Component)var8);
    java.lang.String var14 = var0.getName();
    boolean var15 = var0.getInheritsPopupMenu();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var18 = var0.getBaseline(499, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test127");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    var0.transferFocus();
    java.awt.Dimension var28 = var0.preferredSize();
    var0.move(499, 25);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    java.awt.Dimension var36 = var32.getPreferredSize();
    java.awt.Toolkit var37 = var32.getToolkit();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    var38.setName("");
    int var41 = var38.getX();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    var42.nextFocus();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.setVisible(false);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    java.awt.Color var52 = var51.getBackground();
    var47.setForeground(var52);
    var42.setBackground(var52);
    var38.setBackground(var52);
    var32.setForeground(var52);
    javax.swing.ActionMap var57 = var32.getActionMap();
    var0.setActionMap(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test128");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    boolean var77 = var0.isValid();
    int var78 = var0.getWidth();
    java.awt.event.HierarchyListener[] var79 = var0.getHierarchyListeners();
    var0.firePropertyChange("", 'a', '#');
    var0.move(3, 399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test129");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    java.awt.image.BufferedImage var21 = var0.loadImg("PanelUI");
    var0.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    boolean var28 = var24.inside(0, (-1));
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.reshape((-1), 1, (-1), 10);
    var30.disable();
    boolean var41 = var30.isFocusable();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var48 = var42.getUI();
    java.awt.im.InputMethodRequests var49 = var42.getInputMethodRequests();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    var50.updateUI();
    var50.enableInputMethods(true);
    var50.setSize((-1), 1);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    var61.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var42.add((java.awt.Component)var50, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var67 = var42.getKeyListeners();
    java.awt.FocusTraversalPolicy var68 = var42.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var74 = var69.getToolkit();
    var30.add((java.awt.Component)var42, (java.lang.Object)var69);
    var30.layout();
    java.awt.Component var77 = var24.add("", (java.awt.Component)var30);
    java.lang.Object var78 = var0.getClientProperty((java.lang.Object)var77);
    boolean var79 = var0.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test130");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    var15.paintImmediately(100, 25, 2, 2);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    java.awt.Toolkit var35 = var32.getToolkit();
    var32.setEnabled(false);
    var32.removeNotify();
    boolean var39 = var32.isDisplayable();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    java.awt.Color var41 = var40.getBackground();
    var40.repaint();
    var40.setRequestFocusEnabled(false);
    var40.reshape(100, 0, 100, 0);
    var40.requestFocus();
    java.awt.Rectangle var51 = var40.getVisibleRect();
    java.awt.Rectangle var52 = var40.getBounds();
    java.awt.im.InputMethodRequests var53 = var40.getInputMethodRequests();
    boolean var54 = var40.requestFocusInWindow();
    java.awt.Point var56 = var40.getMousePosition(false);
    var40.setDebugGraphicsOptions(1);
    java.awt.Graphics var59 = var40.getGraphics();
    var32.paintAll(var59);
    var15.paintComponents(var59);
    boolean var62 = var15.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test131");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    boolean var17 = var16.getInheritsPopupMenu();
    boolean var18 = var16.isFontSet();
    java.awt.event.MouseListener[] var19 = var16.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test132");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    var7.hide();
    boolean var39 = var7.requestFocusInWindow();
    var7.repaint(500, 10, 25, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test133");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    boolean var14 = var0.inside(400, 0);
    java.awt.event.MouseWheelListener[] var15 = var0.getMouseWheelListeners();
    var0.requestFocus();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    var17.setDoubleBuffered(true);
    var17.setInheritsPopupMenu(false);
    boolean var25 = var17.isFocusTraversalPolicySet();
    var17.transferFocusUpCycle();
    java.awt.image.BufferedImage var28 = var17.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.setInheritsPopupMenu(false);
    boolean var35 = var29.isDoubleBuffered();
    boolean var36 = var29.isMinimumSizeSet();
    java.awt.Font var37 = var29.getFont();
    java.awt.FontMetrics var38 = var17.getFontMetrics(var37);
    var0.setFont(var37);
    var0.move((-1), 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test134");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    var0.setLocation(10, 100);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var28.removeNotify();
    var28.enable();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    boolean var43 = var39.inside(0, (-1));
    var39.transferFocusUpCycle();
    java.lang.String var45 = var39.getName();
    boolean var46 = var28.isFocusCycleRoot((java.awt.Container)var39);
    java.awt.Dimension var47 = var28.getMinimumSize();
    var0.resize(var47);
    var0.setAlignmentX((-1.0f));
    javax.swing.border.Border var51 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test135");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    java.awt.Color var19 = var0.getForeground();
    java.awt.Component[] var20 = var0.getComponents();
    java.awt.FocusTraversalPolicy var21 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test136");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Point var16 = var0.getMousePosition(false);
    var0.setDebugGraphicsOptions(1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var25 = var19.getUI();
    var0.setUI(var25);
    java.awt.event.FocusListener[] var27 = var0.getFocusListeners();
    var0.repaint(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test137");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isMinimumSizeSet();
    java.awt.Point var8 = var0.getMousePosition(true);
    var0.setFocusTraversalPolicyProvider(false);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    java.awt.Dimension var15 = var11.getPreferredSize();
    boolean var16 = var11.getVerifyInputWhenFocusTarget();
    java.awt.Component var19 = var11.findComponentAt(10, 1);
    boolean var20 = var11.requestDefaultFocus();
    java.awt.Insets var21 = var11.getInsets();
    var11.setDoubleBuffered(false);
    java.awt.Toolkit var24 = var11.getToolkit();
    java.awt.Dimension var25 = var11.getMinimumSize();
    java.awt.event.MouseListener[] var26 = var11.getMouseListeners();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    java.awt.Toolkit var32 = var27.getToolkit();
    boolean var33 = var27.isFocusable();
    javax.swing.KeyStroke[] var34 = var27.getRegisteredKeyStrokes();
    java.awt.Component var37 = var27.getComponentAt(100, 100);
    java.lang.Object var38 = var27.getTreeLock();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    java.awt.Point var45 = var39.getMousePosition();
    java.lang.String var46 = var39.getUIClassID();
    var27.setNextFocusableComponent((java.awt.Component)var39);
    int var48 = var27.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    var49.repaint();
    java.awt.im.InputMethodRequests var52 = var49.getInputMethodRequests();
    var49.list();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    java.awt.Color var55 = var54.getBackground();
    var54.repaint();
    var54.setRequestFocusEnabled(false);
    var54.reshape(100, 0, 100, 0);
    var54.requestFocus();
    java.awt.Rectangle var65 = var54.getVisibleRect();
    java.awt.Rectangle var66 = var54.getBounds();
    java.awt.im.InputMethodRequests var67 = var54.getInputMethodRequests();
    boolean var68 = var54.requestFocusInWindow();
    java.awt.Point var70 = var54.getMousePosition(false);
    var54.setDebugGraphicsOptions(1);
    java.awt.Graphics var73 = var54.getGraphics();
    var49.printComponents(var73);
    var27.update(var73);
    var11.paintComponents(var73);
    var0.paintComponents(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PanelUI"+ "'", var46.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test138");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    var2.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 1.0f);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    boolean var32 = var27.getVerifyInputWhenFocusTarget();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.setName("");
    int var36 = var33.getX();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    var37.nextFocus();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var42.setForeground(var47);
    var37.setBackground(var47);
    var33.setBackground(var47);
    var2.add((java.awt.Component)var27, (java.lang.Object)var33);
    var2.firePropertyChange("hi!", 10.0f, 0.5f);
    java.awt.Component[] var56 = var2.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test139");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    var0.setDebugGraphicsOptions(10);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.nextFocus();
    var22.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    var32.setRequestFocusEnabled(false);
    var32.reshape(100, 0, 100, 0);
    java.awt.Component var42 = var22.add((java.awt.Component)var32);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    var43.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var48 = var43.getUI();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    var49.nextFocus();
    var49.repaint(1L);
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.setVisible(false);
    java.awt.Dimension var66 = var62.getPreferredSize();
    var56.setMaximumSize(var66);
    var49.setPreferredSize(var66);
    var43.setMaximumSize(var66);
    java.awt.Dimension var70 = var32.getSize(var66);
    var0.setSize(var70);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    var72.setName("");
    var72.enable(true);
    var72.enable();
    java.awt.Point var78 = var72.location();
    boolean var79 = var0.contains(var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var81 = var0.getFocusTraversalKeys(400);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test140");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.setSize(3, 10);
    java.awt.im.InputMethodRequests var14 = var0.getInputMethodRequests();
    var0.setOpaque(false);
    java.lang.String var17 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test141");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    int var4 = var0.getScore();
    var0.setDown(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test142");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var13 = var0.getToolkit();
    java.lang.String var14 = var0.getUIClassID();
    javax.swing.plaf.PanelUI var15 = var0.getUI();
    boolean var16 = var0.getAutoscrolls();
    float var17 = var0.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    boolean var20 = var18.hasFocus();
    boolean var21 = var18.isPreferredSizeSet();
    var18.firePropertyChange("", (short)1, (short)0);
    boolean var26 = var18.isMaximumSizeSet();
    var18.list();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    java.awt.dnd.DropTarget var33 = var28.getDropTarget();
    var28.show(false);
    java.awt.Rectangle var36 = var28.getVisibleRect();
    java.awt.image.BufferedImage var38 = var28.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var39 = var28.getComponentOrientation();
    var28.transferFocusBackward();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.setFocusCycleRoot(true);
    var18.add((java.awt.Component)var28, (java.lang.Object)true);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    boolean var51 = var46.getVerifyInputWhenFocusTarget();
    java.awt.Component var54 = var46.findComponentAt(10, 1);
    boolean var55 = var46.isCursorSet();
    boolean var56 = var46.isFocusTraversalPolicyProvider();
    java.awt.Rectangle var57 = var46.getBounds();
    java.awt.Dimension var58 = var46.getMaximumSize();
    java.awt.Dimension var59 = var18.getSize(var58);
    var0.setSize(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test143");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getRequiredPower();
    int var7 = var0.getPower();
    int var8 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 400);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test144");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    java.awt.Rectangle var14 = var0.bounds();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    java.awt.im.InputMethodRequests var18 = var15.getInputMethodRequests();
    int var19 = var15.countComponents();
    java.awt.event.ComponentListener[] var20 = var15.getComponentListeners();
    var15.removeNotify();
    javax.swing.InputMap var22 = var15.getInputMap();
    int var23 = var15.getDebugGraphicsOptions();
    var0.addKeyListener((java.awt.event.KeyListener)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var27 = var0.getBaseline(3, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test145");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setForeground(var10);
    var0.setAutoscrolls(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    boolean var23 = var15.isPaintingForPrint();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var30 = var24.getMouseListeners();
    int var31 = var24.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var32 = var24.getInputMethodRequests();
    var15.addKeyListener((java.awt.event.KeyListener)var24);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    float var40 = var34.getAlignmentY();
    boolean var41 = var24.isFocusCycleRoot((java.awt.Container)var34);
    boolean var42 = var34.isEnabled();
    java.awt.Dimension var43 = var34.getMaximumSize();
    var34.disable();
    var34.updateUI();
    var34.setFocusable(false);
    boolean var48 = var34.isDoubleBuffered();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    var49.nextFocus();
    var49.updateUI();
    var49.enableInputMethods(true);
    var49.enableInputMethods(true);
    java.awt.Component.BaselineResizeBehavior var59 = var49.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var66 = var60.getUI();
    java.awt.im.InputMethodRequests var67 = var60.getInputMethodRequests();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    var68.nextFocus();
    var68.updateUI();
    var68.enableInputMethods(true);
    var68.setSize((-1), 1);
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    var79.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var60.add((java.awt.Component)var68, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var85 = new SpaceWar.SpacePanel();
    var85.setName("");
    java.awt.ComponentOrientation var88 = var85.getComponentOrientation();
    var60.applyComponentOrientation(var88);
    var49.setComponentOrientation(var88);
    var34.setComponentOrientation(var88);
    var0.applyComponentOrientation(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test146");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.Component.BaselineResizeBehavior var17 = var0.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.repaint(1L);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    var25.list();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    java.awt.Rectangle var40 = var25.getBounds(var39);
    var18.setBounds(var40);
    var0.paintImmediately(var40);
    java.awt.Dimension var43 = var0.getMaximumSize();
    boolean var44 = var0.isFocusCycleRoot();
    boolean var45 = var0.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test147");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    java.lang.String var11 = var0.getToolTipText();
    var0.repaint();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.reshape((-1), 1, (-1), 10);
    java.util.Set var25 = var14.getFocusTraversalKeys(3);
    javax.swing.event.AncestorListener[] var26 = var14.getAncestorListeners();
    java.awt.Component var27 = var0.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var14);
    java.awt.Font var28 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test148");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.enableInputMethods(true);
    boolean var11 = var0.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test149");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.setLeft(true);
    var0.setDown(true);
    boolean var11 = var0.isRecovering();
    var0.setLeft(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test150");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    var0.setDown(false);
    var0.setRigth(false);
    int var7 = var0.getLives();
    boolean var8 = var0.isDead();
    boolean var9 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test151");


    SpaceWar.Text var4 = new SpaceWar.Text(579.3282808260785d, 467.04063594113916d, (-1L), "SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test152");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var17 = var2.getColorModel();
    boolean var18 = var2.isFocusTraversalPolicyProvider();
    float var19 = var2.getAlignmentX();
    java.awt.image.ColorModel var20 = var2.getColorModel();
    javax.swing.plaf.PanelUI var21 = var2.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test153");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    java.awt.Component var18 = var10.findComponentAt(10, 1);
    var8.addKeyListener((java.awt.event.KeyListener)var10);
    var10.repaint(100, (-1), (-1), 1);
    boolean var25 = var0.isAncestorOf((java.awt.Component)var10);
    var0.nextFocus();
    var0.disable();
    java.awt.Dimension var28 = var0.size();
    var0.list();
    var0.resize(100, 0);
    var0.transferFocusBackward();
    java.awt.Dimension var34 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test154");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    int var5 = var3.getType();
    double var6 = var3.getX();
    boolean var7 = var3.update();
    double var8 = var3.getX();
    double var9 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2.0d);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test155");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1L), (-1L));
    boolean var25 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test156");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    java.awt.im.InputContext var21 = var10.getInputContext();
    var10.enableInputMethods(true);
    java.awt.Dimension var24 = var10.size();
    var10.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test157");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    var0.setRequestFocusEnabled(true);
    int var19 = var0.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test158");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var6.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    java.lang.Object var30 = var22.getClientProperty((java.lang.Object)var27);
    var6.remove((java.awt.Component)var22);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var38 = var32.getMouseMotionListeners();
    java.awt.Dimension var39 = var32.getMinimumSize();
    var6.setMaximumSize(var39);
    var0.setPreferredSize(var39);
    java.awt.Toolkit var42 = var0.getToolkit();
    javax.swing.InputMap var43 = var0.getInputMap();
    boolean var44 = var0.isDoubleBuffered();
    java.awt.Font var45 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test159");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    var18.hide();
    java.awt.event.MouseWheelListener[] var36 = var18.getMouseWheelListeners();
    var18.setLocation((-1), 500);
    var18.nextFocus();
    java.awt.Rectangle var41 = var18.bounds();
    var18.repaint(400, 3, (-1), 0);
    var18.updateUI();
    var18.reshape(24, 499, 3, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test160");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.setFiring(false);
    int var9 = var0.getScore();
    var0.setLeft(true);
    var0.setScore(499);
    var0.setUp(false);
    int var16 = var0.getY();
    var0.setRigth(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 500);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test161");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    java.awt.Graphics var9 = var0.getGraphics();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)(-1), (short)100);
    boolean var14 = var0.isEnabled();
    boolean var15 = var0.isMaximumSizeSet();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var22 = var16.getUI();
    var0.setUI(var22);
    javax.swing.InputMap var24 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test162");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    javax.swing.JToolTip var19 = var1.createToolTip();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    var20.setName("");
    java.awt.Graphics var23 = var20.getGraphics();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    java.awt.Dimension var34 = var30.getPreferredSize();
    var24.setMaximumSize(var34);
    boolean var36 = var24.getVerifyInputWhenFocusTarget();
    int var37 = var24.getX();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    boolean var45 = var40.getVerifyInputWhenFocusTarget();
    java.awt.Component var48 = var40.findComponentAt(10, 1);
    var38.addKeyListener((java.awt.event.KeyListener)var40);
    var40.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    var55.repaint();
    java.awt.im.InputMethodRequests var58 = var55.getInputMethodRequests();
    java.awt.GraphicsConfiguration var59 = var55.getGraphicsConfiguration();
    var40.remove((java.awt.Component)var55);
    java.awt.Font var61 = var55.getFont();
    var24.setFont(var61);
    var20.setFont(var61);
    java.awt.FontMetrics var64 = var1.getFontMetrics(var61);
    java.awt.event.MouseWheelListener[] var65 = var1.getMouseWheelListeners();
    boolean var66 = var1.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test163");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var51 = var14.getInputMap(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test164");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    boolean var26 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    boolean var35 = var27.isPaintingForPrint();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var42 = var36.getMouseListeners();
    int var43 = var36.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var44 = var36.getInputMethodRequests();
    var27.addKeyListener((java.awt.event.KeyListener)var36);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    var46.list();
    float var52 = var46.getAlignmentY();
    boolean var53 = var36.isFocusCycleRoot((java.awt.Container)var46);
    boolean var54 = var46.isEnabled();
    java.awt.Dimension var55 = var46.getMaximumSize();
    var8.setMinimumSize(var55);
    var8.disable();
    int var58 = var8.getComponentCount();
    var8.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test165");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.enable(false);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)false);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var29 = var23.getMouseListeners();
    java.awt.Dimension var30 = var23.getPreferredSize();
    java.util.Locale var31 = var23.getLocale();
    var23.setFocusable(true);
    var23.setSize(3, 10);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    boolean var42 = var37.getVerifyInputWhenFocusTarget();
    java.awt.Dimension var43 = var37.size();
    var23.setSize(var43);
    var0.setPreferredSize(var43);
    javax.swing.JRootPane var46 = var0.getRootPane();
    java.awt.event.MouseMotionListener[] var47 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test166");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    boolean var23 = var0.requestFocus(false);
    javax.swing.JRootPane var24 = var0.getRootPane();
    boolean var25 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test167");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.setLeft(true);
    boolean var9 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test168");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    boolean var38 = var32.isFocusOwner();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    java.awt.Toolkit var45 = var40.getToolkit();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    var46.setName("");
    int var49 = var46.getX();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    var50.nextFocus();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    java.awt.Color var60 = var59.getBackground();
    var55.setForeground(var60);
    var50.setBackground(var60);
    var46.setBackground(var60);
    var40.setForeground(var60);
    var32.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var60);
    var14.setBackground(var60);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    java.awt.Color var78 = var77.getBackground();
    var73.setForeground(var78);
    var67.setBackground(var78);
    java.awt.Point var81 = var67.location();
    java.awt.Point var82 = var14.getLocation(var81);
    boolean var83 = var1.contains(var82);
    boolean var84 = var1.isDisplayable();
    boolean var85 = var1.isFocusTraversalPolicyProvider();
    var1.resize((-1), 3);
    java.awt.Color var89 = var1.getBackground();
    var1.setSize(500, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test169");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    var0.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.setInheritsPopupMenu(false);
    boolean var20 = var14.isDoubleBuffered();
    boolean var21 = var14.isMinimumSizeSet();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    var22.setMaximumSize(var32);
    boolean var34 = var22.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var35 = var22.getAccessibleContext();
    boolean var36 = var22.isDoubleBuffered();
    java.awt.Rectangle var37 = var22.getVisibleRect();
    var14.setBounds(var37);
    var0.computeVisibleRect(var37);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    java.awt.Dimension var50 = var46.getPreferredSize();
    var40.setMaximumSize(var50);
    boolean var52 = var40.getVerifyInputWhenFocusTarget();
    int var53 = var40.getX();
    java.awt.Rectangle var54 = var40.bounds();
    var0.remove((java.awt.Component)var40);
    java.awt.Rectangle var56 = var0.bounds();
    javax.swing.JPopupMenu var57 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test170");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    javax.swing.event.AncestorListener[] var10 = var0.getAncestorListeners();
    var0.resize(10, 0);
    java.awt.Dimension var14 = var0.preferredSize();
    java.awt.im.InputMethodRequests var15 = var0.getInputMethodRequests();
    var0.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test171");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    boolean var12 = var0.requestFocusInWindow();
    boolean var13 = var0.hasFocus();
    var0.enable(true);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var33 = var18.getColorModel();
    boolean var34 = var18.isFocusTraversalPolicyProvider();
    float var35 = var18.getAlignmentX();
    java.awt.event.FocusListener[] var36 = var18.getFocusListeners();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    var37.nextFocus();
    var37.repaint(1L);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    java.awt.Dimension var54 = var50.getPreferredSize();
    var44.setMaximumSize(var54);
    var37.setPreferredSize(var54);
    javax.swing.plaf.PanelUI var57 = var37.getUI();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    var58.nextFocus();
    var58.reshape((-1), 1, (-1), 10);
    var58.disable();
    java.awt.LayoutManager var69 = var58.getLayout();
    java.awt.Container var70 = var58.getParent();
    java.lang.String var71 = var58.getUIClassID();
    SpaceWar.Enemy var74 = new SpaceWar.Enemy(0, 10);
    var37.add((java.awt.Component)var58, (java.lang.Object)10);
    var58.invalidate();
    java.awt.Dimension var77 = var58.size();
    java.awt.Dimension var78 = var18.getSize(var77);
    var0.setPreferredSize(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "PanelUI"+ "'", var71.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test172");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    javax.swing.plaf.PanelUI var20 = var3.getUI();
    var3.setBounds(400, 10, 25, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test173");


    SpaceWar.Text var4 = new SpaceWar.Text(0.0d, 100.0d, 1L, "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var5 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test174");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    javax.swing.event.AncestorListener[] var1 = var0.getAncestorListeners();
    var0.setOpaque(false);
    var0.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test175");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    SpaceWar.Player var19 = new SpaceWar.Player();
    int var20 = var19.getR();
    boolean var21 = var19.isRecovering();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    var22.setRequestFocusEnabled(false);
    var22.setIgnoreRepaint(false);
    java.lang.String var29 = var22.toString();
    var1.putClientProperty((java.lang.Object)var21, (java.lang.Object)var29);
    boolean var31 = var1.isValid();
    java.lang.String var32 = var1.getName();
    var1.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var29.equals("SpaceWar.SpacePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test176");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    java.beans.VetoableChangeListener[] var18 = var0.getVetoableChangeListeners();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test177");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    int var5 = var3.getType();
    boolean var6 = var3.update();
    double var7 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test178");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    int var29 = var19.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test179");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    int var4 = var0.getY();
    int var5 = var0.getR();
    var0.setLeft(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 25);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test180");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(1, 370.2289277239558d, (-20.05877926032409d));

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test181");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    java.awt.Dimension var11 = var7.getPreferredSize();
    boolean var12 = var7.getVerifyInputWhenFocusTarget();
    java.awt.Component var15 = var7.findComponentAt(10, 1);
    var5.addKeyListener((java.awt.event.KeyListener)var7);
    var7.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.awt.im.InputMethodRequests var25 = var22.getInputMethodRequests();
    java.awt.GraphicsConfiguration var26 = var22.getGraphicsConfiguration();
    var7.remove((java.awt.Component)var22);
    java.awt.Font var28 = var22.getFont();
    java.awt.FontMetrics var29 = var0.getFontMetrics(var28);
    var0.resize(3, (-1));
    java.util.Locale var33 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test182");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    var0.doLayout();
    SpaceWar.SpacePanel var78 = new SpaceWar.SpacePanel();
    var78.setName("");
    int var81 = var78.getX();
    SpaceWar.SpacePanel var82 = new SpaceWar.SpacePanel();
    float var83 = var82.getAlignmentX();
    var82.setVisible(false);
    var82.nextFocus();
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    float var88 = var87.getAlignmentX();
    var87.setVisible(false);
    SpaceWar.SpacePanel var91 = new SpaceWar.SpacePanel();
    java.awt.Color var92 = var91.getBackground();
    var87.setForeground(var92);
    var82.setBackground(var92);
    var78.setBackground(var92);
    boolean var96 = var78.isFocusable();
    java.awt.Dimension var97 = var78.minimumSize();
    var0.setMinimumSize(var97);
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test183");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    boolean var13 = var1.isValidateRoot();
    java.awt.image.BufferedImage var15 = var1.loadImg("");
    int var16 = var1.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test184");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    boolean var22 = var0.isManagingFocus();
    var0.transferFocusUpCycle();
    var0.move(500, 505);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test185");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    java.awt.ComponentOrientation var35 = var28.getComponentOrientation();
    java.awt.Point var37 = var28.getMousePosition(true);
    var28.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    boolean var45 = var40.getVerifyInputWhenFocusTarget();
    java.awt.event.MouseWheelListener[] var46 = var40.getMouseWheelListeners();
    java.awt.event.MouseWheelListener[] var47 = var40.getMouseWheelListeners();
    boolean var49 = var40.requestFocus(false);
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    boolean var54 = var50.isDoubleBuffered();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    var55.repaint();
    java.lang.Object var58 = var50.getClientProperty((java.lang.Object)var55);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    java.awt.Color var60 = var59.getBackground();
    boolean var63 = var59.inside(0, (-1));
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    java.awt.Color var69 = var68.getBackground();
    var64.setForeground(var69);
    var59.setForeground(var69);
    var55.setBackground(var69);
    java.awt.Image var75 = var55.createImage(100, 24);
    java.awt.Dimension var76 = var55.getMinimumSize();
    var40.setSize(var76);
    var28.resize(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test186");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    boolean var44 = var42.hasFocus();
    boolean var45 = var42.isPreferredSizeSet();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var46.repaint();
    var46.setRequestFocusEnabled(false);
    int var51 = var42.getComponentZOrder((java.awt.Component)var46);
    boolean var52 = var42.requestDefaultFocus();
    javax.swing.border.Border var53 = var42.getBorder();
    int var54 = var0.getComponentZOrder((java.awt.Component)var42);
    javax.accessibility.AccessibleContext var55 = var42.getAccessibleContext();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.updateUI();
    var56.enableInputMethods(true);
    var56.setSize((-1), 1);
    boolean var67 = var42.isAncestorOf((java.awt.Component)var56);
    var56.list();
    java.awt.Component var71 = var56.locate(3, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test187");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var13 = var0.getAccessibleContext();
    boolean var14 = var0.isDoubleBuffered();
    boolean var15 = var0.getAutoscrolls();
    java.lang.String var16 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "PanelUI"+ "'", var16.equals("PanelUI"));

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test188");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    int var8 = var0.getPowerLevel();
    var0.loseLife();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test189");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    int var7 = var0.getPower();
    int var8 = var0.getX();
    int var9 = var0.getPower();
    var0.setDown(true);
    var0.setLife(100);
    int var14 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 24);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test190");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.loseLife();
    var0.setLeft(true);
    int var9 = var0.getR();
    boolean var10 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test191");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    var0.enable(false);
    var0.enable(true);
    boolean var22 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test192");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    var0.disable();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.reshape((-1), 1, (-1), 10);
    var14.disable();
    boolean var25 = var14.isFocusable();
    int var26 = var14.getHeight();
    javax.swing.InputVerifier var27 = var14.getInputVerifier();
    java.awt.Graphics var28 = var14.getGraphics();
    java.awt.Color var29 = var14.getForeground();
    var0.setBackground(var29);
    java.awt.Graphics var31 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test193");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isMinimumSizeSet();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.awt.image.BufferedImage var9 = var0.loadImg("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test194");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var17 = var2.getColorModel();
    boolean var18 = var2.isFocusTraversalPolicyProvider();
    var2.setVerifyInputWhenFocusTarget(true);
    boolean var21 = var2.getIgnoreRepaint();
    javax.swing.ActionMap var22 = var2.getActionMap();
    java.awt.Toolkit var23 = var2.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test195");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    int var14 = var0.getComponentCount();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    var15.setRequestFocusEnabled(false);
    var15.removeAll();
    var0.setNextFocusableComponent((java.awt.Component)var15);
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test196");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    java.awt.Dimension var25 = var21.getPreferredSize();
    var15.setMaximumSize(var25);
    boolean var27 = var15.getVerifyInputWhenFocusTarget();
    int var28 = var15.getX();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    boolean var36 = var31.getVerifyInputWhenFocusTarget();
    java.awt.Component var39 = var31.findComponentAt(10, 1);
    var29.addKeyListener((java.awt.event.KeyListener)var31);
    var31.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var46.repaint();
    java.awt.im.InputMethodRequests var49 = var46.getInputMethodRequests();
    java.awt.GraphicsConfiguration var50 = var46.getGraphicsConfiguration();
    var31.remove((java.awt.Component)var46);
    java.awt.Font var52 = var46.getFont();
    var15.setFont(var52);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    var54.nextFocus();
    var54.reshape((-1), 1, (-1), 10);
    var54.disable();
    java.awt.LayoutManager var65 = var54.getLayout();
    var15.setLayout(var65);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.setVisible(false);
    var67.nextFocus();
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    float var73 = var72.getAlignmentX();
    var72.setVisible(false);
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    java.awt.Color var77 = var76.getBackground();
    var72.setForeground(var77);
    var67.setBackground(var77);
    java.awt.Component var80 = var67.getNextFocusableComponent();
    float var81 = var67.getAlignmentY();
    java.awt.event.MouseListener[] var82 = var67.getMouseListeners();
    java.awt.Point var83 = var67.location();
    boolean var84 = var15.contains(var83);
    var1.setLocation(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test197");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    boolean var14 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test198");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var18.setForeground(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    java.awt.dnd.DropTarget var30 = var25.getDropTarget();
    var25.show(false);
    java.awt.Rectangle var33 = var25.getVisibleRect();
    var18.repaint(var33);
    java.awt.FocusTraversalPolicy var35 = var18.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var36 = var18.getInputMethodRequests();
    var18.layout();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    java.awt.Color var49 = var48.getBackground();
    var44.setForeground(var49);
    var38.setBackground(var49);
    var18.setForeground(var49);
    int var53 = var18.getWidth();
    javax.swing.plaf.PanelUI var54 = var18.getUI();
    var10.setUI(var54);
    var0.setUI(var54);
    java.awt.event.MouseListener[] var57 = var0.getMouseListeners();
    javax.swing.plaf.PanelUI var58 = var0.getUI();
    var0.transferFocusDownCycle();
    var0.doLayout();
    java.awt.Point var61 = var0.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test199");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    var0.transferFocusUpCycle();
    java.awt.Dimension var6 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test200");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    var0.loseLife();
    var0.setRigth(false);
    var0.setScore(24);
    var0.setLife(1);
    boolean var19 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test201");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    var2.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 1.0f);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    boolean var32 = var27.getVerifyInputWhenFocusTarget();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.setName("");
    int var36 = var33.getX();
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    var37.nextFocus();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var42.setForeground(var47);
    var37.setBackground(var47);
    var33.setBackground(var47);
    var2.add((java.awt.Component)var27, (java.lang.Object)var33);
    var33.transferFocus();
    java.util.Locale var53 = var33.getLocale();
    int var54 = var33.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test202");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    boolean var9 = var0.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    var10.enable(false);
    boolean var17 = var10.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    java.awt.Toolkit var23 = var18.getToolkit();
    boolean var24 = var18.isFocusable();
    javax.swing.KeyStroke[] var25 = var18.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    boolean var33 = var28.getVerifyInputWhenFocusTarget();
    java.awt.Component var36 = var28.findComponentAt(10, 1);
    var26.addKeyListener((java.awt.event.KeyListener)var28);
    var28.repaint(100, (-1), (-1), 1);
    boolean var43 = var18.isAncestorOf((java.awt.Component)var28);
    var10.addKeyListener((java.awt.event.KeyListener)var28);
    java.util.Locale var45 = var28.getLocale();
    var0.setLocale(var45);
    var0.transferFocusBackward();
    boolean var50 = var0.inside(399, 505);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test203");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    javax.swing.plaf.PanelUI var3 = var0.getUI();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    boolean var8 = var4.isDoubleBuffered();
    java.awt.dnd.DropTarget var9 = var4.getDropTarget();
    var4.show(false);
    boolean var12 = var4.isPaintingForPrint();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var19 = var13.getMouseListeners();
    int var20 = var13.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var21 = var13.getInputMethodRequests();
    var4.addKeyListener((java.awt.event.KeyListener)var13);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    var23.list();
    float var29 = var23.getAlignmentY();
    boolean var30 = var13.isFocusCycleRoot((java.awt.Container)var23);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.updateUI();
    java.awt.Component var38 = var13.add("", (java.awt.Component)var32);
    java.awt.ComponentOrientation var39 = var32.getComponentOrientation();
    boolean var40 = var32.isFocusable();
    var0.remove((java.awt.Component)var32);
    java.awt.Insets var42 = var0.insets();
    var0.grabFocus();
    java.awt.GraphicsConfiguration var44 = var0.getGraphicsConfiguration();
    java.awt.event.KeyListener[] var45 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test204");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    var0.setAutoscrolls(true);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)10, (short)1);
    java.lang.String var24 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "PanelUI"+ "'", var24.equals("PanelUI"));

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test205");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    int var2 = var0.getPowerLevel();
    var0.setLeft(false);
    int var5 = var0.getScore();
    int var6 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test206");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    boolean var14 = var8.isFocusable();
    javax.swing.KeyStroke[] var15 = var8.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    boolean var23 = var18.getVerifyInputWhenFocusTarget();
    java.awt.Component var26 = var18.findComponentAt(10, 1);
    var16.addKeyListener((java.awt.event.KeyListener)var18);
    var18.repaint(100, (-1), (-1), 1);
    boolean var33 = var8.isAncestorOf((java.awt.Component)var18);
    var0.addKeyListener((java.awt.event.KeyListener)var18);
    var18.hide();
    java.awt.event.MouseWheelListener[] var36 = var18.getMouseWheelListeners();
    var18.setBounds(24, 400, (-1), 2);
    var18.move(100, 3);
    boolean var45 = var18.getIgnoreRepaint();
    javax.swing.border.Border var46 = var18.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test207");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    boolean var6 = var0.isFocusOwner();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    java.awt.Dimension var12 = var8.getPreferredSize();
    java.awt.Toolkit var13 = var8.getToolkit();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.setName("");
    int var17 = var14.getX();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var23.setForeground(var28);
    var18.setBackground(var28);
    var14.setBackground(var28);
    var8.setForeground(var28);
    var0.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var28);
    boolean var34 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test208");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.setFiring(false);
    int var9 = var0.getScore();
    int var10 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 500);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test209");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    boolean var10 = var8.hasFocus();
    java.awt.Insets var11 = var8.getInsets();
    java.awt.Insets var12 = var0.getInsets(var11);
    boolean var13 = var0.isManagingFocus();
    java.awt.Image var16 = var0.createImage(1, 10);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    java.awt.Dimension var27 = var23.getPreferredSize();
    var17.setMaximumSize(var27);
    boolean var29 = var17.getVerifyInputWhenFocusTarget();
    int var30 = var17.getX();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    var31.setEnabled(false);
    var0.add((java.awt.Component)var17, (java.lang.Object)false);
    var0.setAlignmentX(1.0f);
    var0.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test210");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.image.ColorModel var9 = var0.getColorModel();
    java.awt.Dimension var10 = var0.getPreferredSize();
    boolean var11 = var0.isCursorSet();
    java.awt.Point var12 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test211");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    javax.accessibility.AccessibleContext var14 = var0.getAccessibleContext();
    java.awt.event.InputMethodListener[] var15 = var0.getInputMethodListeners();
    var0.setAlignmentX(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test212");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    boolean var9 = var0.requestFocus(false);
    var0.resetKeyboardActions();
    var0.setAutoscrolls(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test213");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var13 = var0.getAccessibleContext();
    boolean var14 = var0.isDoubleBuffered();
    java.awt.event.MouseMotionListener[] var15 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test214");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    java.awt.im.InputMethodRequests var20 = var17.getInputMethodRequests();
    java.awt.GraphicsConfiguration var21 = var17.getGraphicsConfiguration();
    var2.remove((java.awt.Component)var17);
    java.awt.Font var23 = var17.getFont();
    boolean var25 = var17.requestFocus(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var32 = var26.getUI();
    java.awt.im.InputMethodRequests var33 = var26.getInputMethodRequests();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    var34.nextFocus();
    var34.updateUI();
    var34.enableInputMethods(true);
    var34.setSize((-1), 1);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    var45.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var26.add((java.awt.Component)var34, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var51 = var34.getComponentOrientation();
    java.beans.VetoableChangeListener[] var52 = var34.getVetoableChangeListeners();
    java.awt.Rectangle var53 = var34.bounds();
    var17.setNextFocusableComponent((java.awt.Component)var34);
    var17.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test215");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    boolean var2 = var0.isRecovering();
    int var3 = var0.getRequiredPower();
    boolean var4 = var0.isDead();
    var0.loseLife();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test216");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.paintImmediately((-1), 10, 100, 25);
    boolean var16 = var0.isOpaque();
    java.awt.Color var17 = var0.getForeground();
    var0.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test217");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 19.998476951563912d, 495.44236387443226d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test218");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    var0.setRigth(false);
    int var8 = var0.getY();
    var0.update();
    var0.increasePower(400);
    var0.setFiring(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 500);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test219");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    int var10 = var0.getDebugGraphicsOptions();
    var0.enableInputMethods(true);
    java.awt.Component var13 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test220");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    var1.grabFocus();
    javax.swing.JToolTip var18 = var1.createToolTip();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.enable(false);
    boolean var26 = var19.getFocusTraversalKeysEnabled();
    var19.setToolTipText("PanelUI");
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    java.awt.dnd.DropTarget var34 = var29.getDropTarget();
    var29.show(false);
    boolean var37 = var29.isPaintingForPrint();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var44 = var38.getMouseListeners();
    int var45 = var38.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var46 = var38.getInputMethodRequests();
    var29.addKeyListener((java.awt.event.KeyListener)var38);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    var48.list();
    float var54 = var48.getAlignmentY();
    boolean var55 = var38.isFocusCycleRoot((java.awt.Container)var48);
    var48.firePropertyChange("", 1L, 1L);
    var48.setVerifyInputWhenFocusTarget(true);
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    var62.setName("");
    java.awt.Dimension var65 = var62.minimumSize();
    boolean var66 = var62.isDoubleBuffered();
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    java.awt.Dimension var73 = var69.getPreferredSize();
    boolean var74 = var69.getVerifyInputWhenFocusTarget();
    java.awt.Component var77 = var69.findComponentAt(10, 1);
    var67.addKeyListener((java.awt.event.KeyListener)var69);
    var69.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var84 = new SpaceWar.SpacePanel();
    java.awt.Color var85 = var84.getBackground();
    var84.repaint();
    java.awt.im.InputMethodRequests var87 = var84.getInputMethodRequests();
    java.awt.GraphicsConfiguration var88 = var84.getGraphicsConfiguration();
    var69.remove((java.awt.Component)var84);
    java.awt.Font var90 = var84.getFont();
    java.awt.FontMetrics var91 = var62.getFontMetrics(var90);
    java.awt.FontMetrics var92 = var48.getFontMetrics(var90);
    var19.setFont(var90);
    java.awt.FontMetrics var94 = var18.getFontMetrics(var90);
    var18.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test221");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    boolean var14 = var1.isFocusable();
    java.awt.event.ComponentListener[] var15 = var1.getComponentListeners();
    java.awt.event.HierarchyListener[] var16 = var1.getHierarchyListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var18 = var1.getFocusTraversalKeys(505);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test222");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    java.awt.Point var6 = var0.getMousePosition();
    java.lang.String var7 = var0.getUIClassID();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '4');
    boolean var12 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var13.setForeground(var18);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    java.awt.dnd.DropTarget var25 = var20.getDropTarget();
    var20.show(false);
    java.awt.Rectangle var28 = var20.getVisibleRect();
    var13.repaint(var28);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var36 = var30.getMouseListeners();
    java.awt.Dimension var37 = var30.getPreferredSize();
    java.util.Locale var38 = var30.getLocale();
    var13.setLocale(var38);
    var0.setLocale(var38);
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100.0f, 1.0f);
    java.awt.im.InputMethodRequests var45 = var0.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "PanelUI"+ "'", var7.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test223");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    int var5 = var3.getType();
    double var6 = var3.getX();
    double var7 = var3.getR();
    double var8 = var3.getY();
    double var9 = var3.getX();
    double var10 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test224");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    boolean var14 = var0.getIgnoreRepaint();
    java.awt.Component var17 = var0.locate(1, 25);
    boolean var18 = var0.isLightweight();
    boolean var21 = var0.inside(0, 0);
    int var22 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test225");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    boolean var9 = var0.getIgnoreRepaint();
    var0.repaint((-1), 400, (-1), 0);
    var0.doLayout();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    var16.setName("");
    java.awt.Toolkit var19 = var16.getToolkit();
    var16.setEnabled(false);
    var16.removeNotify();
    boolean var23 = var16.isDisplayable();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var24.repaint();
    var24.setRequestFocusEnabled(false);
    var24.reshape(100, 0, 100, 0);
    var24.requestFocus();
    java.awt.Rectangle var35 = var24.getVisibleRect();
    java.awt.Rectangle var36 = var24.getBounds();
    java.awt.im.InputMethodRequests var37 = var24.getInputMethodRequests();
    boolean var38 = var24.requestFocusInWindow();
    java.awt.Point var40 = var24.getMousePosition(false);
    var24.setDebugGraphicsOptions(1);
    java.awt.Graphics var43 = var24.getGraphics();
    var16.paintAll(var43);
    var0.print(var43);
    var0.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test226");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.setFocusCycleRoot(true);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var10 = var4.getMouseListeners();
    java.awt.Dimension var11 = var4.getPreferredSize();
    java.util.Locale var12 = var4.getLocale();
    var4.setFocusable(true);
    java.lang.String var15 = var4.getToolTipText();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    java.awt.Color var27 = var26.getBackground();
    var22.setForeground(var27);
    var16.setBackground(var27);
    java.awt.Point var30 = var16.location();
    var4.setLocation(var30);
    var0.setLocation(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test227");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    var0.setVerifyInputWhenFocusTarget(true);
    java.awt.event.HierarchyListener[] var40 = var0.getHierarchyListeners();
    java.awt.Font var41 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test228");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '4');
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]", 1.0f, 10.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(505);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test229");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.setToolTipText("");
    var0.enable();
    java.awt.GraphicsConfiguration var12 = var0.getGraphicsConfiguration();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var13.setForeground(var18);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    boolean var24 = var20.isDoubleBuffered();
    java.awt.dnd.DropTarget var25 = var20.getDropTarget();
    var20.show(false);
    java.awt.Rectangle var28 = var20.getVisibleRect();
    var13.repaint(var28);
    java.awt.FocusTraversalPolicy var30 = var13.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    boolean var37 = var31.isFocusOwner();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    java.awt.Toolkit var44 = var39.getToolkit();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    var45.setName("");
    int var48 = var45.getX();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    var49.nextFocus();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    var54.setForeground(var59);
    var49.setBackground(var59);
    var45.setBackground(var59);
    var39.setForeground(var59);
    var31.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var59);
    var13.setBackground(var59);
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    boolean var70 = var66.isDoubleBuffered();
    java.awt.dnd.DropTarget var71 = var66.getDropTarget();
    var66.show(false);
    boolean var74 = var66.isPaintingForPrint();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    float var78 = var77.getAlignmentX();
    var77.setVisible(false);
    java.awt.Dimension var81 = var77.getPreferredSize();
    boolean var82 = var77.getVerifyInputWhenFocusTarget();
    java.awt.Component var85 = var77.findComponentAt(10, 1);
    var75.addKeyListener((java.awt.event.KeyListener)var77);
    java.awt.Dimension var87 = var77.getMinimumSize();
    var66.setMinimumSize(var87);
    java.awt.Dimension var89 = var13.getSize(var87);
    boolean var90 = var13.isValid();
    int var91 = var13.getWidth();
    float var92 = var13.getAlignmentY();
    boolean var93 = var13.getIgnoreRepaint();
    java.awt.Point var94 = var13.location();
    java.awt.Point var95 = var0.getLocation(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test230");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    var0.setVerifyInputWhenFocusTarget(false);
    boolean var12 = var0.isPaintingForPrint();
    boolean var13 = var0.getIgnoreRepaint();
    java.awt.FocusTraversalPolicy var14 = var0.getFocusTraversalPolicy();
    var0.resize(100, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test231");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    boolean var6 = var0.isDead();
    var0.setFiring(true);
    var0.setRigth(false);
    var0.setLeft(true);
    boolean var13 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test232");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    double var5 = var3.getY();
    boolean var6 = var3.update();
    double var7 = var3.getR();
    int var8 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test233");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test234");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    var0.setRigth(false);
    int var8 = var0.getPower();
    boolean var9 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test235");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.layout();
    java.awt.peer.ComponentPeer var11 = var0.getPeer();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var18 = var12.getUI();
    java.awt.im.InputMethodRequests var19 = var12.getInputMethodRequests();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var20.setSize((-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    var31.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var12.add((java.awt.Component)var20, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var37 = var20.getComponentOrientation();
    java.beans.VetoableChangeListener[] var38 = var20.getVetoableChangeListeners();
    int var39 = var20.countComponents();
    boolean var40 = var20.isFocusOwner();
    var20.enable(false);
    java.awt.Insets var43 = var20.getInsets();
    java.awt.Insets var44 = var0.getInsets(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test236");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    java.util.Locale var8 = var0.getLocale();
    var0.setFocusable(true);
    var0.paintImmediately((-1), 10, 100, 25);
    var0.hide();
    java.awt.event.InputMethodListener[] var17 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test237");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    javax.swing.TransferHandler var26 = var0.getTransferHandler();
    boolean var27 = var0.isPaintingForPrint();
    int var28 = var0.getComponentCount();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    var29.enableInputMethods(true);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.reshape((-1), 1, (-1), 10);
    var39.disable();
    var39.show();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    var51.list();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    java.awt.dnd.DropTarget var62 = var57.getDropTarget();
    var57.show(false);
    java.awt.Rectangle var65 = var57.getVisibleRect();
    java.awt.Rectangle var66 = var51.getBounds(var65);
    javax.swing.JToolTip var67 = var51.createToolTip();
    var51.firePropertyChange("", false, false);
    var51.validate();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    boolean var77 = var73.isDoubleBuffered();
    java.awt.dnd.DropTarget var78 = var73.getDropTarget();
    var73.show(false);
    boolean var81 = var73.isPaintingForPrint();
    SpaceWar.SpacePanel var82 = new SpaceWar.SpacePanel();
    float var83 = var82.getAlignmentX();
    var82.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var88 = var82.getMouseListeners();
    int var89 = var82.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var90 = var82.getInputMethodRequests();
    var73.addKeyListener((java.awt.event.KeyListener)var82);
    var82.repaint();
    java.awt.Point var93 = var82.location();
    java.awt.Component var94 = var51.getComponentAt(var93);
    java.awt.Point var95 = var39.getLocation(var93);
    java.awt.Point var96 = var29.getLocation(var93);
    java.awt.Point var97 = var0.getLocation(var96);
    boolean var99 = var0.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test238");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var16 = var0.isRequestFocusEnabled();
    javax.swing.ActionMap var17 = var0.getActionMap();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    var18.setName("");
    int var21 = var18.getX();
    java.lang.String var22 = var18.getToolTipText();
    var18.nextFocus();
    int var24 = var0.getComponentZOrder((java.awt.Component)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test239");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(499, 100.0d, 3.0d);
    double var4 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0d);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test240");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var0.isDisplayable();
    boolean var20 = var0.isOpaque();
    var0.setEnabled(false);
    boolean var24 = var0.areFocusTraversalKeysSet(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test241");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    java.lang.Object var11 = var0.getTreeLock();
    var0.setAlignmentY(0.0f);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', ' ');
    boolean var18 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test242");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    boolean var26 = var8.isMaximumSizeSet();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    boolean var35 = var27.isPaintingForPrint();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var42 = var36.getMouseListeners();
    int var43 = var36.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var44 = var36.getInputMethodRequests();
    var27.addKeyListener((java.awt.event.KeyListener)var36);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    boolean var50 = var46.isDoubleBuffered();
    var46.list();
    float var52 = var46.getAlignmentY();
    boolean var53 = var36.isFocusCycleRoot((java.awt.Container)var46);
    boolean var54 = var46.isEnabled();
    java.awt.Dimension var55 = var46.getMaximumSize();
    var8.setMinimumSize(var55);
    var8.disable();
    var8.setOpaque(true);
    java.awt.event.MouseListener[] var60 = var8.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test243");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test244");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    var0.transferFocusUpCycle();
    java.awt.Container var6 = var0.getParent();
    boolean var7 = var0.isMaximumSizeSet();
    java.awt.event.InputMethodListener[] var8 = var0.getInputMethodListeners();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    java.awt.Dimension var10 = var0.size();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    boolean var13 = var11.hasFocus();
    java.awt.Insets var14 = var11.getInsets();
    java.awt.Rectangle var15 = var11.bounds();
    java.awt.event.MouseMotionListener[] var16 = var11.getMouseMotionListeners();
    boolean var17 = var11.isMaximumSizeSet();
    java.awt.LayoutManager var18 = var11.getLayout();
    java.awt.Rectangle var19 = var11.getBounds();
    var11.transferFocusBackward();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    var21.list();
    float var27 = var21.getAlignmentY();
    java.awt.event.ComponentListener[] var28 = var21.getComponentListeners();
    java.awt.Component var29 = var21.getNextFocusableComponent();
    boolean var30 = var21.isManagingFocus();
    javax.swing.border.Border var31 = var21.getBorder();
    java.lang.Object var32 = var21.getTreeLock();
    javax.swing.border.Border var33 = var21.getBorder();
    var21.setEnabled(false);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    boolean var43 = var38.getVerifyInputWhenFocusTarget();
    java.awt.Component var46 = var38.findComponentAt(10, 1);
    var36.addKeyListener((java.awt.event.KeyListener)var38);
    var38.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var53 = var38.getColorModel();
    boolean var54 = var38.isFocusTraversalPolicyProvider();
    var38.show(false);
    boolean var57 = var38.isManagingFocus();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    var58.repaint();
    var58.setRequestFocusEnabled(false);
    var58.reshape(100, 0, 100, 0);
    var58.requestFocus();
    java.awt.Rectangle var69 = var58.getVisibleRect();
    java.awt.Rectangle var70 = var58.getBounds();
    java.awt.im.InputMethodRequests var71 = var58.getInputMethodRequests();
    boolean var72 = var58.requestFocusInWindow();
    java.awt.Point var74 = var58.getMousePosition(false);
    var58.setDebugGraphicsOptions(1);
    java.awt.Graphics var77 = var58.getGraphics();
    var38.paint(var77);
    var21.paintComponents(var77);
    var11.update(var77);
    var0.printAll(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test245");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    var0.firePropertyChange("", 0.5f, 100.0f);
    var0.enable(false);
    int var13 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.repaint(1L);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    var21.setMaximumSize(var31);
    var14.setPreferredSize(var31);
    java.awt.Container var34 = var14.getFocusCycleRootAncestor();
    java.awt.image.ColorModel var35 = var14.getColorModel();
    int var36 = var14.getComponentCount();
    java.awt.Component var37 = var0.add((java.awt.Component)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var39 = var0.getComponent(505);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test246");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    java.lang.String var9 = var0.getToolTipText();
    java.awt.Component[] var10 = var0.getComponents();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    java.awt.Dimension var15 = var11.getPreferredSize();
    boolean var16 = var11.getVerifyInputWhenFocusTarget();
    java.awt.Component var19 = var11.findComponentAt(10, 1);
    boolean var20 = var11.requestDefaultFocus();
    java.awt.Insets var21 = var11.getInsets();
    var11.setDoubleBuffered(false);
    java.awt.Toolkit var24 = var11.getToolkit();
    java.awt.Dimension var25 = var11.getMinimumSize();
    java.awt.event.MouseListener[] var26 = var11.getMouseListeners();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    java.awt.Toolkit var32 = var27.getToolkit();
    boolean var33 = var27.isFocusable();
    javax.swing.KeyStroke[] var34 = var27.getRegisteredKeyStrokes();
    java.awt.Component var37 = var27.getComponentAt(100, 100);
    java.lang.Object var38 = var27.getTreeLock();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    java.awt.Point var45 = var39.getMousePosition();
    java.lang.String var46 = var39.getUIClassID();
    var27.setNextFocusableComponent((java.awt.Component)var39);
    int var48 = var27.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    java.awt.Color var50 = var49.getBackground();
    var49.repaint();
    java.awt.im.InputMethodRequests var52 = var49.getInputMethodRequests();
    var49.list();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    java.awt.Color var55 = var54.getBackground();
    var54.repaint();
    var54.setRequestFocusEnabled(false);
    var54.reshape(100, 0, 100, 0);
    var54.requestFocus();
    java.awt.Rectangle var65 = var54.getVisibleRect();
    java.awt.Rectangle var66 = var54.getBounds();
    java.awt.im.InputMethodRequests var67 = var54.getInputMethodRequests();
    boolean var68 = var54.requestFocusInWindow();
    java.awt.Point var70 = var54.getMousePosition(false);
    var54.setDebugGraphicsOptions(1);
    java.awt.Graphics var73 = var54.getGraphics();
    var49.printComponents(var73);
    var27.update(var73);
    var11.paintComponents(var73);
    var0.paintComponents(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PanelUI"+ "'", var46.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test247");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    boolean var15 = var11.isDoubleBuffered();
    var11.list();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    java.awt.Rectangle var26 = var11.getBounds(var25);
    javax.swing.JToolTip var27 = var11.createToolTip();
    java.awt.Graphics var28 = var11.getGraphics();
    var11.setAutoscrolls(false);
    boolean var31 = var11.requestFocusInWindow();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    java.awt.Color var34 = var33.getBackground();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    var35.nextFocus();
    var35.updateUI();
    var35.enableInputMethods(true);
    var32.add((java.awt.Component)var33, (java.lang.Object)true);
    java.awt.Image var46 = var33.createImage(1, (-1));
    java.awt.event.MouseListener[] var47 = var33.getMouseListeners();
    java.awt.Color var48 = var33.getBackground();
    boolean var49 = var33.getIgnoreRepaint();
    var33.enable();
    javax.swing.JToolTip var51 = var33.createToolTip();
    java.awt.Rectangle var52 = var51.bounds();
    var51.setBounds(3, 25, 24, 499);
    var51.enableInputMethods(true);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    var60.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var65 = var60.getUI();
    boolean var66 = var60.isDisplayable();
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.removeNotify();
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    boolean var74 = var70.isDoubleBuffered();
    var70.list();
    float var76 = var70.getAlignmentY();
    java.awt.Insets var77 = var70.getInsets();
    java.awt.Insets var78 = var67.getInsets(var77);
    java.awt.Insets var79 = var60.getInsets(var78);
    java.awt.Insets var80 = var51.getInsets(var79);
    java.awt.Insets var81 = var11.getInsets(var79);
    java.awt.Insets var82 = var0.getInsets(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test248");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    java.util.Locale var7 = var0.getLocale();
    javax.swing.TransferHandler var8 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test249");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    boolean var17 = var16.getInheritsPopupMenu();
    var16.layout();
    var16.invalidate();
    java.awt.Cursor var20 = var16.getCursor();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.requestFocus();
    boolean var27 = var21.isBackgroundSet();
    var16.remove((java.awt.Component)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test250");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    javax.swing.InputMap var18 = var1.getInputMap();
    var1.addNotify();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    java.awt.Dimension var24 = var20.getPreferredSize();
    boolean var25 = var20.getVerifyInputWhenFocusTarget();
    boolean var26 = var20.isShowing();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    boolean var39 = var27.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var40 = var27.getAccessibleContext();
    boolean var41 = var27.isDoubleBuffered();
    boolean var42 = var27.getAutoscrolls();
    var27.repaint(10L, (-1), 25, (-1), 100);
    var27.updateUI();
    boolean var50 = var27.requestDefaultFocus();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.reshape((-1), 1, (-1), 10);
    var56.disable();
    boolean var67 = var56.isFocusable();
    int var68 = var56.getHeight();
    var51.setNextFocusableComponent((java.awt.Component)var56);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    var70.nextFocus();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    SpaceWar.SpacePanel var79 = new SpaceWar.SpacePanel();
    java.awt.Color var80 = var79.getBackground();
    var75.setForeground(var80);
    var70.setBackground(var80);
    java.awt.Component var83 = var70.getNextFocusableComponent();
    float var84 = var70.getAlignmentY();
    java.awt.event.MouseListener[] var85 = var70.getMouseListeners();
    java.awt.Point var86 = var70.location();
    java.awt.Point var87 = var51.getLocation(var86);
    java.awt.Point var88 = var27.getLocation(var86);
    java.awt.Component var89 = var20.findComponentAt(var88);
    java.awt.Component var90 = var1.getComponentAt(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test251");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    var5.setOpaque(false);
    float var29 = var5.getAlignmentX();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.nextFocus();
    var30.repaint(1L);
    var30.firePropertyChange("", (short)(-1), (short)(-1));
    java.awt.Component var43 = var30.getComponentAt(0, 100);
    var30.nextFocus();
    java.awt.image.VolatileImage var47 = var30.createVolatileImage(500, 400);
    boolean var48 = var5.isFocusCycleRoot((java.awt.Container)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test252");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    boolean var13 = var0.isFontSet();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var20 = var14.getUI();
    java.awt.im.InputMethodRequests var21 = var14.getInputMethodRequests();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    var22.nextFocus();
    var22.updateUI();
    var22.enableInputMethods(true);
    var22.setSize((-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    var33.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var14.add((java.awt.Component)var22, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var39 = var22.getComponentOrientation();
    java.beans.VetoableChangeListener[] var40 = var22.getVetoableChangeListeners();
    int var41 = var22.getHeight();
    var22.enable(true);
    boolean var44 = var22.isFocusTraversalPolicyProvider();
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var45.repaint();
    var45.setRequestFocusEnabled(false);
    var45.reshape(100, 0, 100, 0);
    var45.requestFocus();
    var45.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var60 = var45.getLocation();
    var22.setLocation(var60);
    boolean var62 = var22.isManagingFocus();
    int var63 = var0.getComponentZOrder((java.awt.Component)var22);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.setVisible(false);
    java.awt.Dimension var70 = var66.getPreferredSize();
    boolean var71 = var66.getVerifyInputWhenFocusTarget();
    java.awt.Component var74 = var66.findComponentAt(10, 1);
    var64.addKeyListener((java.awt.event.KeyListener)var66);
    java.awt.Dimension var76 = var66.getMinimumSize();
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    java.awt.Color var78 = var77.getBackground();
    var77.repaint();
    var77.setRequestFocusEnabled(false);
    var77.reshape(100, 0, 100, 0);
    var77.requestFocus();
    java.awt.Rectangle var88 = var77.getVisibleRect();
    var66.setBounds(var88);
    var22.computeVisibleRect(var88);
    java.lang.String var91 = var22.getToolTipText();
    java.awt.event.KeyListener[] var92 = var22.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test253");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    boolean var13 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var24.repaint();
    var24.setRequestFocusEnabled(false);
    var24.reshape(100, 0, 100, 0);
    java.awt.Component var34 = var14.add((java.awt.Component)var24);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    var35.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var40 = var35.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.repaint(1L);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    java.awt.Dimension var58 = var54.getPreferredSize();
    var48.setMaximumSize(var58);
    var41.setPreferredSize(var58);
    var35.setMaximumSize(var58);
    java.awt.Dimension var62 = var24.getSize(var58);
    var0.setSize(var62);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    var64.enable(false);
    var0.removeKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Rectangle var72 = var64.bounds();
    var64.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test254");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    int var10 = var0.getDebugGraphicsOptions();
    var0.enableInputMethods(true);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.nextFocus();
    var13.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    var23.repaint();
    var23.setRequestFocusEnabled(false);
    var23.reshape(100, 0, 100, 0);
    java.awt.Component var33 = var13.add((java.awt.Component)var23);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    var34.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var39 = var34.getUI();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    var40.repaint(1L);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    var47.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    java.awt.Dimension var57 = var53.getPreferredSize();
    var47.setMaximumSize(var57);
    var40.setPreferredSize(var57);
    var34.setMaximumSize(var57);
    java.awt.Dimension var61 = var23.getSize(var57);
    var0.setMinimumSize(var61);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    boolean var67 = var63.isDoubleBuffered();
    var63.list();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    float var70 = var69.getAlignmentX();
    var69.setVisible(false);
    boolean var73 = var69.isDoubleBuffered();
    java.awt.dnd.DropTarget var74 = var69.getDropTarget();
    var69.show(false);
    java.awt.Rectangle var77 = var69.getVisibleRect();
    java.awt.Rectangle var78 = var63.getBounds(var77);
    javax.swing.JToolTip var79 = var63.createToolTip();
    java.awt.Graphics var80 = var63.getGraphics();
    java.beans.VetoableChangeListener[] var81 = var63.getVetoableChangeListeners();
    var0.addKeyListener((java.awt.event.KeyListener)var63);
    java.awt.event.ContainerListener[] var83 = var0.getContainerListeners();
    var0.enableInputMethods(true);
    float var86 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.5f);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test255");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.removeNotify();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    var9.list();
    float var15 = var9.getAlignmentY();
    java.awt.Insets var16 = var9.getInsets();
    java.awt.Insets var17 = var6.getInsets(var16);
    java.awt.Insets var18 = var0.getInsets(var17);
    javax.swing.JPopupMenu var19 = var0.getComponentPopupMenu();
    java.awt.image.BufferedImage var21 = var0.loadImg("PanelUI");
    java.awt.image.VolatileImage var24 = var0.createVolatileImage((-1), 400);
    java.awt.Point var26 = var0.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test256");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    var0.doLayout();
    boolean var78 = var0.getVerifyInputWhenFocusTarget();
    javax.swing.KeyStroke[] var79 = var0.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test257");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    var0.firePropertyChange("", (short)(-1), (short)(-1));
    java.awt.Component var13 = var0.getComponentAt(0, 100);
    var0.nextFocus();
    java.awt.Color var15 = var0.getForeground();
    boolean var16 = var0.isPreferredSizeSet();
    java.awt.Dimension var17 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test258");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    var0.disable();
    java.awt.FocusTraversalPolicy var8 = var0.getFocusTraversalPolicy();
    var0.invalidate();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test259");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    var0.setAlignmentY((-1.0f));
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    boolean var26 = var24.hasFocus();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.reshape((-1), 1, (-1), 10);
    var27.disable();
    java.awt.LayoutManager var38 = var27.getLayout();
    var27.setVisible(false);
    var24.remove((java.awt.Component)var27);
    java.awt.Dimension var42 = var27.getSize();
    var0.setSize(var42);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    float var46 = var45.getAlignmentX();
    var45.setVisible(false);
    boolean var49 = var45.isDoubleBuffered();
    java.awt.dnd.DropTarget var50 = var45.getDropTarget();
    var45.show(false);
    java.awt.Rectangle var53 = var45.getVisibleRect();
    java.awt.image.BufferedImage var55 = var45.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var56 = var45.getComponentOrientation();
    boolean var57 = var45.isPaintingTile();
    boolean var58 = var45.isOptimizedDrawingEnabled();
    javax.swing.TransferHandler var59 = var45.getTransferHandler();
    javax.swing.InputMap var60 = var45.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputMap(25, var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test260");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.setFocusTraversalKeysEnabled(false);
    java.awt.Component var23 = var0.getNextFocusableComponent();
    java.awt.Cursor var24 = var0.getCursor();
    javax.swing.JToolTip var25 = var0.createToolTip();
    var0.layout();
    var0.firePropertyChange("", ' ', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test261");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    boolean var10 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test262");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var18 = var12.getUI();
    java.awt.im.InputMethodRequests var19 = var12.getInputMethodRequests();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var20.setSize((-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    var31.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var12.add((java.awt.Component)var20, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var37 = var12.getKeyListeners();
    java.awt.FocusTraversalPolicy var38 = var12.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    var39.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var44 = var39.getToolkit();
    var0.add((java.awt.Component)var12, (java.lang.Object)var39);
    var0.layout();
    boolean var47 = var0.isVisible();
    var0.firePropertyChange("PanelUI", (byte)100, (byte)10);
    java.awt.Cursor var52 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test263");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    boolean var27 = var19.isEnabled();
    java.awt.Dimension var28 = var19.getMaximumSize();
    var19.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var19.updateUI();
    var19.nextFocus();
    var19.move(500, 0);
    var19.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test264");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    boolean var6 = var0.isShowing();
    boolean var7 = var0.isBackgroundSet();
    java.awt.im.InputContext var8 = var0.getInputContext();
    var0.firePropertyChange("hi!", (short)100, (short)1);
    boolean var13 = var0.isFocusable();
    java.awt.Component.BaselineResizeBehavior var14 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test265");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var37 = var19.getLocation();
    int var38 = var19.getDebugGraphicsOptions();
    java.awt.FocusTraversalPolicy var39 = var19.getFocusTraversalPolicy();
    java.awt.event.KeyListener[] var40 = var19.getKeyListeners();
    var19.firePropertyChange("SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)0, (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test266");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    var11.nextFocus();
    var11.updateUI();
    var11.enableInputMethods(true);
    var8.add((java.awt.Component)var9, (java.lang.Object)true);
    var8.move(24, 500);
    boolean var23 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    float var24 = var8.getAlignmentY();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    var25.list();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    java.awt.image.BufferedImage var41 = var31.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var42 = var25.isAncestorOf((java.awt.Component)var31);
    float var43 = var25.getAlignmentX();
    java.awt.image.VolatileImage var46 = var25.createVolatileImage(25, 1);
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    var47.setName("");
    java.awt.ComponentOrientation var50 = var47.getComponentOrientation();
    var25.remove((java.awt.Component)var47);
    java.awt.Dimension var52 = var47.minimumSize();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    var53.setInheritsPopupMenu(false);
    var53.setFocusTraversalPolicyProvider(true);
    boolean var63 = var53.inside(25, 3);
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    boolean var68 = var64.isDoubleBuffered();
    java.awt.dnd.DropTarget var69 = var64.getDropTarget();
    var64.show(false);
    boolean var72 = var64.isPaintingForPrint();
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    SpaceWar.SpacePanel var75 = new SpaceWar.SpacePanel();
    float var76 = var75.getAlignmentX();
    var75.setVisible(false);
    java.awt.Dimension var79 = var75.getPreferredSize();
    boolean var80 = var75.getVerifyInputWhenFocusTarget();
    java.awt.Component var83 = var75.findComponentAt(10, 1);
    var73.addKeyListener((java.awt.event.KeyListener)var75);
    java.awt.Dimension var85 = var75.getMinimumSize();
    var64.setMinimumSize(var85);
    var53.setPreferredSize(var85);
    boolean var89 = var53.requestFocus(true);
    var53.reshape((-1), 10, 24, 0);
    java.awt.event.MouseWheelListener[] var95 = var53.getMouseWheelListeners();
    java.awt.FocusTraversalPolicy var96 = var53.getFocusTraversalPolicy();
    var47.setFocusTraversalPolicy(var96);
    var8.setFocusTraversalPolicy(var96);
    var0.setFocusTraversalPolicy(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test267");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setDoubleBuffered(true);
    var0.repaint(0, 500, 2, 24);
    java.awt.Cursor var11 = var0.getCursor();
    var0.setOpaque(false);
    java.awt.Font var14 = var0.getFont();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var21 = var15.getMouseListeners();
    int var22 = var15.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var23 = var15.getInputMethodRequests();
    var15.removeNotify();
    var15.enable();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    java.awt.Color var27 = var26.getBackground();
    boolean var30 = var26.inside(0, (-1));
    var26.transferFocusUpCycle();
    java.lang.String var32 = var26.getName();
    boolean var33 = var15.isFocusCycleRoot((java.awt.Container)var26);
    boolean var34 = var15.isOptimizedDrawingEnabled();
    var0.addKeyListener((java.awt.event.KeyListener)var15);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var42 = var36.getUI();
    java.awt.im.InputMethodRequests var43 = var36.getInputMethodRequests();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    var44.updateUI();
    var44.enableInputMethods(true);
    var44.setSize((-1), 1);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    var55.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var36.add((java.awt.Component)var44, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    java.awt.Dimension var65 = var61.getPreferredSize();
    java.awt.Toolkit var66 = var61.getToolkit();
    java.awt.Toolkit var67 = var61.getToolkit();
    java.awt.Component var68 = var44.add((java.awt.Component)var61);
    var44.setDebugGraphicsOptions(0);
    var44.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    boolean var77 = var73.isDoubleBuffered();
    var73.list();
    float var79 = var73.getAlignmentY();
    java.awt.Insets var80 = var73.getInsets();
    SpaceWar.SpacePanel var81 = new SpaceWar.SpacePanel();
    float var82 = var81.getAlignmentX();
    var81.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    float var88 = var87.getAlignmentX();
    var87.setVisible(false);
    java.awt.Dimension var91 = var87.getPreferredSize();
    var81.setMaximumSize(var91);
    java.awt.Dimension var93 = var73.getSize(var91);
    var44.setPreferredSize(var93);
    java.awt.event.MouseWheelListener[] var95 = var44.getMouseWheelListeners();
    var0.removeKeyListener((java.awt.event.KeyListener)var44);
    boolean var97 = var44.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test268");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(284.06998599257884d, (-8.529389630162045d), 3, 0);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test269");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    java.awt.Dimension var7 = var0.getPreferredSize();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var18.repaint();
    var18.setRequestFocusEnabled(false);
    var18.reshape(100, 0, 100, 0);
    java.awt.Component var28 = var8.add((java.awt.Component)var18);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    var29.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var34 = var29.getUI();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    var35.nextFocus();
    var35.repaint(1L);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    java.awt.Dimension var52 = var48.getPreferredSize();
    var42.setMaximumSize(var52);
    var35.setPreferredSize(var52);
    var29.setMaximumSize(var52);
    java.awt.Dimension var56 = var18.getSize(var52);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    java.awt.dnd.DropTarget var62 = var57.getDropTarget();
    var57.show(false);
    boolean var65 = var57.isPaintingForPrint();
    SpaceWar.SpacePanel var66 = new SpaceWar.SpacePanel();
    float var67 = var66.getAlignmentX();
    var66.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var72 = var66.getMouseListeners();
    int var73 = var66.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var74 = var66.getInputMethodRequests();
    var57.addKeyListener((java.awt.event.KeyListener)var66);
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    float var77 = var76.getAlignmentX();
    var76.setVisible(false);
    boolean var80 = var76.isDoubleBuffered();
    var76.list();
    float var82 = var76.getAlignmentY();
    boolean var83 = var66.isFocusCycleRoot((java.awt.Container)var76);
    var18.setNextFocusableComponent((java.awt.Component)var76);
    var76.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0.0f, 0.5f);
    var76.show(false);
    var0.addKeyListener((java.awt.event.KeyListener)var76);
    int var94 = var0.getBaseline(2, 1);
    java.awt.Dimension var95 = var0.preferredSize();
    java.awt.Cursor var96 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test270");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    boolean var14 = var1.isFocusable();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    java.awt.Dimension var19 = var15.getPreferredSize();
    boolean var20 = var15.getVerifyInputWhenFocusTarget();
    java.awt.Component var23 = var15.findComponentAt(10, 1);
    boolean var24 = var15.isCursorSet();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    java.awt.Point var33 = var25.location();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    var34.nextFocus();
    var34.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    var44.repaint();
    var44.setRequestFocusEnabled(false);
    var44.reshape(100, 0, 100, 0);
    java.awt.Component var54 = var34.add((java.awt.Component)var44);
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    var55.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var60 = var55.getUI();
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    var61.nextFocus();
    var61.repaint(1L);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.setVisible(false);
    java.awt.Dimension var78 = var74.getPreferredSize();
    var68.setMaximumSize(var78);
    var61.setPreferredSize(var78);
    var55.setMaximumSize(var78);
    java.awt.Dimension var82 = var44.getSize(var78);
    var25.setMaximumSize(var78);
    var15.setMinimumSize(var78);
    var1.setSize(var78);
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)1, (short)(-1));
    var1.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test271");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    javax.swing.plaf.PanelUI var3 = var0.getUI();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    boolean var8 = var4.isDoubleBuffered();
    java.awt.dnd.DropTarget var9 = var4.getDropTarget();
    var4.show(false);
    boolean var12 = var4.isPaintingForPrint();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var19 = var13.getMouseListeners();
    int var20 = var13.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var21 = var13.getInputMethodRequests();
    var4.addKeyListener((java.awt.event.KeyListener)var13);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    var23.list();
    float var29 = var23.getAlignmentY();
    boolean var30 = var13.isFocusCycleRoot((java.awt.Container)var23);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    var32.nextFocus();
    var32.updateUI();
    java.awt.Component var38 = var13.add("", (java.awt.Component)var32);
    java.awt.ComponentOrientation var39 = var32.getComponentOrientation();
    boolean var40 = var32.isFocusable();
    var0.remove((java.awt.Component)var32);
    var0.hide();
    var0.revalidate();
    javax.swing.event.AncestorListener[] var44 = var0.getAncestorListeners();
    var0.transferFocusDownCycle();
    java.awt.Container var46 = var0.getParent();
    java.awt.Dimension var47 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test272");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setForeground(var10);
    var0.setAutoscrolls(false);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    boolean var23 = var15.isPaintingForPrint();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var30 = var24.getMouseListeners();
    int var31 = var24.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var32 = var24.getInputMethodRequests();
    var15.addKeyListener((java.awt.event.KeyListener)var24);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    var34.list();
    float var40 = var34.getAlignmentY();
    boolean var41 = var24.isFocusCycleRoot((java.awt.Container)var34);
    var34.firePropertyChange("", 1L, 1L);
    var34.setVerifyInputWhenFocusTarget(true);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    java.awt.Dimension var51 = var48.minimumSize();
    boolean var52 = var48.isDoubleBuffered();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    float var56 = var55.getAlignmentX();
    var55.setVisible(false);
    java.awt.Dimension var59 = var55.getPreferredSize();
    boolean var60 = var55.getVerifyInputWhenFocusTarget();
    java.awt.Component var63 = var55.findComponentAt(10, 1);
    var53.addKeyListener((java.awt.event.KeyListener)var55);
    var55.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    java.awt.Color var71 = var70.getBackground();
    var70.repaint();
    java.awt.im.InputMethodRequests var73 = var70.getInputMethodRequests();
    java.awt.GraphicsConfiguration var74 = var70.getGraphicsConfiguration();
    var55.remove((java.awt.Component)var70);
    java.awt.Font var76 = var70.getFont();
    java.awt.FontMetrics var77 = var48.getFontMetrics(var76);
    java.awt.FontMetrics var78 = var34.getFontMetrics(var76);
    var0.setFont(var76);
    var0.revalidate();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", ' ', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test273");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    boolean var8 = var0.isFocusTraversalPolicySet();
    var0.transferFocusUpCycle();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    boolean var14 = var10.isDoubleBuffered();
    java.awt.dnd.DropTarget var15 = var10.getDropTarget();
    var10.show(false);
    java.awt.Rectangle var18 = var10.getVisibleRect();
    java.awt.image.BufferedImage var20 = var10.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    java.awt.Component var22 = var0.add((java.awt.Component)var10);
    var0.enable();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.updateUI();
    var24.enableInputMethods(true);
    java.awt.Point var33 = var24.getMousePosition(false);
    java.awt.Component.BaselineResizeBehavior var34 = var24.getBaselineResizeBehavior();
    java.awt.Dimension var35 = var24.getPreferredSize();
    var24.show();
    java.lang.Object var37 = var0.getClientProperty((java.lang.Object)var24);
    java.awt.Image var40 = var24.createImage(3, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test274");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    java.lang.String var16 = var8.toString();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    java.awt.image.BufferedImage var27 = var17.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var28 = var17.getComponentOrientation();
    boolean var29 = var17.isPaintingTile();
    boolean var30 = var17.isOptimizedDrawingEnabled();
    int var31 = var8.getComponentZOrder((java.awt.Component)var17);
    javax.swing.InputMap var32 = var17.getInputMap();
    java.awt.Font var33 = var17.getFont();
    java.awt.FontMetrics var34 = var0.getFontMetrics(var33);
    var0.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var16,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var16.equals("SpaceWar.SpacePanel[,0,0,0var16,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test275");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var4.repaint();
    var4.setRequestFocusEnabled(false);
    int var9 = var0.getComponentZOrder((java.awt.Component)var4);
    java.awt.GraphicsConfiguration var10 = var4.getGraphicsConfiguration();
    java.lang.String var11 = var4.getUIClassID();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    var12.setMaximumSize(var22);
    boolean var24 = var12.getVerifyInputWhenFocusTarget();
    boolean var25 = var12.isFontSet();
    boolean var26 = var12.getIgnoreRepaint();
    java.awt.Component var29 = var12.locate(1, 25);
    java.awt.Dimension var30 = var12.getMinimumSize();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    java.awt.dnd.DropTarget var36 = var31.getDropTarget();
    var31.show(false);
    java.awt.Rectangle var39 = var31.getVisibleRect();
    boolean var40 = var31.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    boolean var45 = var41.isDoubleBuffered();
    var41.enable(false);
    boolean var48 = var41.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    java.awt.Toolkit var54 = var49.getToolkit();
    boolean var55 = var49.isFocusable();
    javax.swing.KeyStroke[] var56 = var49.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    java.awt.Dimension var63 = var59.getPreferredSize();
    boolean var64 = var59.getVerifyInputWhenFocusTarget();
    java.awt.Component var67 = var59.findComponentAt(10, 1);
    var57.addKeyListener((java.awt.event.KeyListener)var59);
    var59.repaint(100, (-1), (-1), 1);
    boolean var74 = var49.isAncestorOf((java.awt.Component)var59);
    var41.addKeyListener((java.awt.event.KeyListener)var59);
    java.util.Locale var76 = var59.getLocale();
    var31.setLocale(var76);
    javax.swing.JComponent.setDefaultLocale(var76);
    var12.setLocale(var76);
    var4.setLocale(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test276");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Dimension var17 = var0.minimumSize();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.setInheritsPopupMenu(false);
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Container var26 = var18.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.removeNotify();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    float var36 = var30.getAlignmentY();
    java.awt.Insets var37 = var30.getInsets();
    java.awt.Insets var38 = var27.getInsets(var37);
    java.awt.Insets var39 = var18.getInsets(var38);
    java.awt.Insets var40 = var0.getInsets(var38);
    var0.setFocusCycleRoot(true);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    java.awt.Color var44 = var43.getBackground();
    var43.repaint();
    java.awt.im.InputMethodRequests var46 = var43.getInputMethodRequests();
    int var47 = var43.countComponents();
    java.awt.Dimension var48 = var43.getSize();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var54 = var49.getUI();
    java.awt.Color var55 = var49.getBackground();
    var43.setBackground(var55);
    var0.setForeground(var55);
    var0.setAlignmentY(0.5f);
    var0.list();
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test277");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    boolean var12 = var0.getAutoscrolls();
    java.awt.Graphics var13 = var0.getGraphics();
    java.awt.Dimension var14 = var0.getMaximumSize();
    boolean var15 = var0.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test278");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var33 = var27.getMouseMotionListeners();
    java.awt.Dimension var34 = var27.getMinimumSize();
    var1.setMaximumSize(var34);
    java.awt.Font var36 = var1.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test279");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isFocusTraversalPolicyProvider();
    java.awt.Insets var21 = var0.insets();
    java.awt.Dimension var22 = var0.getMinimumSize();
    javax.accessibility.AccessibleContext var23 = var0.getAccessibleContext();
    java.awt.image.BufferedImage var25 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test280");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    java.awt.Point var18 = var12.getMousePosition();
    java.lang.String var19 = var12.getUIClassID();
    var0.setNextFocusableComponent((java.awt.Component)var12);
    var12.firePropertyChange("SpaceWar.SpacePanel[,10,10,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)1, (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "PanelUI"+ "'", var19.equals("PanelUI"));

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test281");


    SpaceWar.Text var4 = new SpaceWar.Text(509.27513824562607d, 365.5281187817767d, (-1L), "SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test282");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    var8.enable(true);
    java.lang.Object var30 = var8.getTreeLock();
    float var31 = var8.getAlignmentY();
    java.awt.Component.BaselineResizeBehavior var32 = var8.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test283");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.removeNotify();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.Component.BaselineResizeBehavior var4 = var0.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var17 = var6.getComponentOrientation();
    var6.show(false);
    java.awt.Component var20 = var0.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (java.awt.Component)var6);
    var6.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test284");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(2, 99);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test285");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.Dimension var5 = var0.getSize();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    var6.nextFocus();
    var6.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    var16.repaint();
    var16.setRequestFocusEnabled(false);
    var16.reshape(100, 0, 100, 0);
    java.awt.Component var26 = var6.add((java.awt.Component)var16);
    boolean var27 = var16.isEnabled();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.setInheritsPopupMenu(false);
    var28.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    var36.list();
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    boolean var46 = var42.isDoubleBuffered();
    java.awt.dnd.DropTarget var47 = var42.getDropTarget();
    var42.show(false);
    java.awt.Rectangle var50 = var42.getVisibleRect();
    java.awt.Rectangle var51 = var36.getBounds(var50);
    javax.swing.JToolTip var52 = var36.createToolTip();
    var28.removeKeyListener((java.awt.event.KeyListener)var36);
    javax.swing.TransferHandler var54 = var28.getTransferHandler();
    var28.transferFocus();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    java.awt.Dimension var62 = var58.getPreferredSize();
    boolean var63 = var58.getVerifyInputWhenFocusTarget();
    java.awt.Component var66 = var58.findComponentAt(10, 1);
    var56.addKeyListener((java.awt.event.KeyListener)var58);
    java.awt.Dimension var68 = var58.getMinimumSize();
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    java.awt.Color var70 = var69.getBackground();
    var69.repaint();
    var69.setRequestFocusEnabled(false);
    var69.reshape(100, 0, 100, 0);
    var69.requestFocus();
    java.awt.Rectangle var80 = var69.getVisibleRect();
    var58.setBounds(var80);
    var28.scrollRectToVisible(var80);
    var16.setBounds(var80);
    var0.setBounds(var80);
    boolean var85 = var0.isShowing();
    var0.setDebugGraphicsOptions(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test286");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    boolean var24 = var18.isFocusOwner();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    java.awt.Dimension var30 = var26.getPreferredSize();
    java.awt.Toolkit var31 = var26.getToolkit();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    var32.setName("");
    int var35 = var32.getX();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    var36.nextFocus();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    var36.setBackground(var46);
    var32.setBackground(var46);
    var26.setForeground(var46);
    var18.putClientProperty((java.lang.Object)(byte)100, (java.lang.Object)var46);
    var0.setBackground(var46);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    var53.show(false);
    boolean var61 = var53.isPaintingForPrint();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    SpaceWar.SpacePanel var64 = new SpaceWar.SpacePanel();
    float var65 = var64.getAlignmentX();
    var64.setVisible(false);
    java.awt.Dimension var68 = var64.getPreferredSize();
    boolean var69 = var64.getVerifyInputWhenFocusTarget();
    java.awt.Component var72 = var64.findComponentAt(10, 1);
    var62.addKeyListener((java.awt.event.KeyListener)var64);
    java.awt.Dimension var74 = var64.getMinimumSize();
    var53.setMinimumSize(var74);
    java.awt.Dimension var76 = var0.getSize(var74);
    boolean var77 = var0.isValid();
    int var78 = var0.getWidth();
    float var79 = var0.getAlignmentY();
    boolean var80 = var0.getIgnoreRepaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var81 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test287");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(495.44236387443226d, 25, 0);
    double var4 = var3.getR();
    boolean var5 = var3.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test288");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    java.awt.event.FocusListener[] var32 = var0.getFocusListeners();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 399, 10);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    java.awt.Color var38 = var37.getBackground();
    boolean var41 = var37.inside(0, (-1));
    var37.transferFocusUpCycle();
    java.awt.Toolkit var43 = var37.getToolkit();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    var44.repaint();
    var44.setRequestFocusEnabled(false);
    var44.setIgnoreRepaint(false);
    java.lang.String var51 = var44.toString();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var58 = var52.getUI();
    java.awt.im.InputMethodRequests var59 = var52.getInputMethodRequests();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.updateUI();
    var60.enableInputMethods(true);
    var60.setSize((-1), 1);
    SpaceWar.SpacePanel var71 = new SpaceWar.SpacePanel();
    var71.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var52.add((java.awt.Component)var60, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var77 = var60.getComponentOrientation();
    var44.setComponentOrientation(var77);
    var37.setComponentOrientation(var77);
    var0.applyComponentOrientation(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var51.equals("SpaceWar.SpacePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test289");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    int var27 = var8.getHeight();
    var8.enable(true);
    java.awt.Component var30 = var8.getNextFocusableComponent();
    java.awt.Point var31 = var8.getMousePosition();
    java.awt.LayoutManager var32 = var8.getLayout();
    var8.setLocation(500, 10);
    var8.reshape(25, 399, 3, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test290");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.move(100, 10);
    java.awt.Graphics var16 = var1.getGraphics();
    boolean var17 = var1.getInheritsPopupMenu();
    java.awt.Color var18 = var1.getForeground();
    java.awt.Dimension var19 = var1.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test291");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.MouseMotionListener[] var5 = var0.getMouseMotionListeners();
    java.awt.Dimension var6 = var0.size();
    boolean var7 = var0.isMinimumSizeSet();
    boolean var8 = var0.getIgnoreRepaint();
    var0.repaint();
    var0.hide();
    java.awt.FocusTraversalPolicy var11 = var0.getFocusTraversalPolicy();
    java.awt.image.ColorModel var12 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test292");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    java.awt.dnd.DropTarget var27 = var22.getDropTarget();
    var22.show(false);
    boolean var30 = var22.isPaintingForPrint();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var37 = var31.getMouseListeners();
    int var38 = var31.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var39 = var31.getInputMethodRequests();
    var22.addKeyListener((java.awt.event.KeyListener)var31);
    var31.repaint();
    java.awt.Point var42 = var31.location();
    java.awt.Component var43 = var0.getComponentAt(var42);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    java.awt.Color var45 = var44.getBackground();
    var44.repaint();
    java.awt.im.InputMethodRequests var47 = var44.getInputMethodRequests();
    var44.setDoubleBuffered(true);
    var44.show(false);
    var44.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.setVisible(false);
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    java.awt.Color var59 = var58.getBackground();
    var54.setForeground(var59);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    float var62 = var61.getAlignmentX();
    var61.setVisible(false);
    boolean var65 = var61.isDoubleBuffered();
    java.awt.dnd.DropTarget var66 = var61.getDropTarget();
    var61.show(false);
    java.awt.Rectangle var69 = var61.getVisibleRect();
    var54.repaint(var69);
    java.awt.FocusTraversalPolicy var71 = var54.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var72 = var54.getInputMethodRequests();
    var54.layout();
    boolean var74 = var54.isFocusTraversalPolicyProvider();
    java.awt.Insets var75 = var54.insets();
    java.awt.Dimension var76 = var54.getMinimumSize();
    java.awt.Dimension var77 = var44.getSize(var76);
    var0.setSize(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test293");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.image.BufferedImage var10 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var11 = var0.getComponentOrientation();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    var12.nextFocus();
    var12.reshape((-1), 1, (-1), 10);
    var12.disable();
    java.awt.LayoutManager var23 = var12.getLayout();
    var12.setVisible(false);
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    var26.setInheritsPopupMenu(false);
    boolean var32 = var26.isDoubleBuffered();
    boolean var33 = var26.isMinimumSizeSet();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    java.awt.Dimension var44 = var40.getPreferredSize();
    var34.setMaximumSize(var44);
    boolean var46 = var34.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var47 = var34.getAccessibleContext();
    boolean var48 = var34.isDoubleBuffered();
    java.awt.Rectangle var49 = var34.getVisibleRect();
    var26.setBounds(var49);
    var12.computeVisibleRect(var49);
    javax.swing.ActionMap var52 = var12.getActionMap();
    var0.setActionMap(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test294");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.transferFocusBackward();
    boolean var7 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test295");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    var1.enable();
    var1.setIgnoreRepaint(true);
    var1.setFocusable(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.remove(3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test296");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(10, 1);
    int var3 = var2.getRank();
    int var4 = var2.getType();
    int var5 = var2.getR();
    java.awt.image.BufferedImage var7 = var2.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test297");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    var1.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100.0d, 1.0d);
    var1.setLocation(24, 3);
    boolean var23 = var1.hasFocus();
    java.awt.event.MouseWheelListener[] var24 = var1.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test298");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    int var6 = var0.getX();
    var0.setDown(false);
    int var9 = var0.getRequiredPower();
    int var10 = var0.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 25);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test299");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    boolean var7 = var3.isDoubleBuffered();
    java.awt.dnd.DropTarget var8 = var3.getDropTarget();
    boolean var9 = var3.isFocusCycleRoot();
    var3.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var20 = var14.getUI();
    var3.add((java.awt.Component)var14, (java.lang.Object)(short)0);
    java.awt.Insets var23 = var14.getInsets();
    java.awt.Insets var24 = var0.getInsets(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    java.awt.Color var27 = var26.getBackground();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    var28.enableInputMethods(true);
    var25.add((java.awt.Component)var26, (java.lang.Object)true);
    boolean var37 = var25.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var38 = var25.getHierarchyListeners();
    var25.repaint(0L);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var47 = var41.getUI();
    java.awt.im.InputMethodRequests var48 = var41.getInputMethodRequests();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    var49.nextFocus();
    var49.updateUI();
    var49.enableInputMethods(true);
    var49.setSize((-1), 1);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    var60.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var41.add((java.awt.Component)var49, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var66 = var49.getComponentOrientation();
    java.beans.VetoableChangeListener[] var67 = var49.getVetoableChangeListeners();
    int var68 = var49.getHeight();
    javax.swing.ActionMap var69 = var49.getActionMap();
    var25.setActionMap(var69);
    var0.setActionMap(var69);
    java.awt.Dimension var72 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test300");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    var0.setAlignmentY((-1.0f));
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    boolean var26 = var24.hasFocus();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.reshape((-1), 1, (-1), 10);
    var27.disable();
    java.awt.LayoutManager var38 = var27.getLayout();
    var27.setVisible(false);
    var24.remove((java.awt.Component)var27);
    java.awt.Dimension var42 = var27.getSize();
    var0.setSize(var42);
    var0.setRequestFocusEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test301");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    var0.repaint(3, 1, 25, 0);
    java.awt.Color var31 = var0.getForeground();
    var0.setFocusCycleRoot(true);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    java.awt.Dimension var38 = var34.getPreferredSize();
    boolean var39 = var34.getVerifyInputWhenFocusTarget();
    java.awt.Component var42 = var34.findComponentAt(10, 1);
    boolean var43 = var34.requestDefaultFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    boolean var46 = var34.isPaintingForPrint();
    boolean var47 = var34.getIgnoreRepaint();
    java.awt.FocusTraversalPolicy var48 = var34.getFocusTraversalPolicy();
    var34.setRequestFocusEnabled(true);
    java.awt.Rectangle var51 = var34.getBounds();
    var0.repaint(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test302");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.event.InputMethodListener[] var20 = var11.getInputMethodListeners();
    java.awt.Toolkit var21 = var11.getToolkit();
    var11.setSize(24, 2);
    var11.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test303");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    var0.update();
    java.awt.image.BufferedImage var6 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var7 = var0.getX();
    var0.setLife(10);
    int var10 = var0.getRequiredPower();
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test304");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    boolean var9 = var0.isFocusable();
    java.awt.event.MouseMotionListener[] var10 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test305");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Toolkit var13 = var0.getToolkit();
    boolean var14 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test306");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    boolean var8 = var0.isRequestFocusEnabled();
    boolean var9 = var0.isFocusTraversalPolicySet();
    boolean var10 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test307");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    boolean var7 = var0.isMinimumSizeSet();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    var8.setMaximumSize(var18);
    boolean var20 = var8.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var21 = var8.getAccessibleContext();
    boolean var22 = var8.isDoubleBuffered();
    java.awt.Rectangle var23 = var8.getVisibleRect();
    var0.setBounds(var23);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var31 = var25.getVisibleRect();
    java.awt.Rectangle var32 = var0.getBounds(var31);
    java.awt.Container var33 = var0.getParent();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test308");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    java.awt.GraphicsConfiguration var18 = var6.getGraphicsConfiguration();
    java.awt.Font var19 = var6.getFont();
    javax.swing.InputMap var20 = var6.getInputMap();
    java.awt.event.MouseMotionListener[] var21 = var6.getMouseMotionListeners();
    var6.firePropertyChange("SpaceWar.SpacePanel[,-1,100,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=265,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test309");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    boolean var9 = var0.isManagingFocus();
    javax.swing.border.Border var10 = var0.getBorder();
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    var12.setName("");
    var12.enable(true);
    var12.enable();
    java.awt.Point var18 = var12.location();
    var12.repaint(0, 3, (-1), 1);
    var12.setBounds(25, 100, 1, 0);
    var0.addKeyListener((java.awt.event.KeyListener)var12);
    java.beans.PropertyChangeListener[] var30 = var12.getPropertyChangeListeners();
    javax.swing.JRootPane var31 = var12.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test310");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    java.awt.Dimension var18 = var14.getPreferredSize();
    boolean var19 = var14.getVerifyInputWhenFocusTarget();
    java.awt.Component var22 = var14.findComponentAt(10, 1);
    var12.addKeyListener((java.awt.event.KeyListener)var14);
    var14.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var29 = var14.getColorModel();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    boolean var34 = var30.isDoubleBuffered();
    var30.list();
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    float var37 = var36.getAlignmentX();
    var36.setVisible(false);
    boolean var40 = var36.isDoubleBuffered();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    var36.show(false);
    java.awt.Rectangle var44 = var36.getVisibleRect();
    java.awt.image.BufferedImage var46 = var36.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var47 = var30.isAncestorOf((java.awt.Component)var36);
    javax.swing.InputVerifier var48 = var36.getInputVerifier();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var36);
    javax.swing.JToolTip var50 = var2.createToolTip();
    java.awt.Graphics var51 = var50.getGraphics();
    boolean var52 = var50.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test311");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.lang.String var8 = var0.toString();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    java.awt.dnd.DropTarget var14 = var9.getDropTarget();
    var9.show(false);
    java.awt.Rectangle var17 = var9.getVisibleRect();
    java.awt.image.BufferedImage var19 = var9.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    boolean var21 = var9.isPaintingTile();
    boolean var22 = var9.isOptimizedDrawingEnabled();
    int var23 = var0.getComponentZOrder((java.awt.Component)var9);
    javax.swing.InputMap var24 = var9.getInputMap();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    boolean var29 = var25.isDoubleBuffered();
    java.awt.dnd.DropTarget var30 = var25.getDropTarget();
    var25.show(false);
    boolean var33 = var25.isPaintingForPrint();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var40 = var34.getMouseListeners();
    int var41 = var34.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var42 = var34.getInputMethodRequests();
    var25.addKeyListener((java.awt.event.KeyListener)var34);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    boolean var48 = var44.isDoubleBuffered();
    var44.list();
    float var50 = var44.getAlignmentY();
    boolean var51 = var34.isFocusCycleRoot((java.awt.Container)var44);
    boolean var52 = var44.isEnabled();
    java.awt.Dimension var53 = var44.getMaximumSize();
    var44.setName("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var44.updateUI();
    boolean var57 = var44.isOptimizedDrawingEnabled();
    boolean var58 = var9.isFocusCycleRoot((java.awt.Container)var44);
    boolean var59 = var9.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var8.equals("SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test312");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    var0.setInheritsPopupMenu(true);
    boolean var18 = var0.inside(0, 500);
    var0.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test313");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var13 = var0.getAccessibleContext();
    boolean var14 = var0.isDoubleBuffered();
    boolean var15 = var0.getAutoscrolls();
    var0.repaint(10L, (-1), 25, (-1), 100);
    var0.updateUI();
    boolean var23 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    boolean var26 = var24.hasFocus();
    boolean var27 = var24.isPreferredSizeSet();
    var24.firePropertyChange("", (short)1, (short)0);
    boolean var32 = var24.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var33 = var24.getPeer();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var42.setForeground(var47);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    boolean var53 = var49.isDoubleBuffered();
    java.awt.dnd.DropTarget var54 = var49.getDropTarget();
    var49.show(false);
    java.awt.Rectangle var57 = var49.getVisibleRect();
    var42.repaint(var57);
    java.awt.FocusTraversalPolicy var59 = var42.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var60 = var42.getInputMethodRequests();
    var42.layout();
    SpaceWar.SpacePanel var62 = new SpaceWar.SpacePanel();
    float var63 = var62.getAlignmentX();
    var62.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    java.awt.Color var73 = var72.getBackground();
    var68.setForeground(var73);
    var62.setBackground(var73);
    var42.setForeground(var73);
    int var77 = var42.getWidth();
    javax.swing.plaf.PanelUI var78 = var42.getUI();
    var34.setUI(var78);
    var24.setUI(var78);
    var0.remove((java.awt.Component)var24);
    java.awt.Point var82 = var0.location();
    SpaceWar.SpacePanel var83 = new SpaceWar.SpacePanel();
    java.awt.Color var84 = var83.getBackground();
    var83.repaint();
    java.awt.im.InputMethodRequests var86 = var83.getInputMethodRequests();
    var83.setDoubleBuffered(true);
    var83.show(false);
    var83.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 24);
    boolean var95 = var83.getAutoscrolls();
    java.awt.Graphics var96 = var83.getGraphics();
    java.awt.Dimension var97 = var83.getMaximumSize();
    var0.setMaximumSize(var97);
    boolean var99 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test314");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    var0.list();
    java.awt.Rectangle var10 = var0.getBounds();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.event.MouseMotionListener[] var13 = var0.getMouseMotionListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var0.areFocusTraversalKeysSet(505);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test315");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Graphics var3 = var0.getGraphics();
    java.awt.event.MouseMotionListener[] var4 = var0.getMouseMotionListeners();
    boolean var5 = var0.getIgnoreRepaint();
    var0.transferFocusBackward();
    var0.enable();
    java.awt.Container var8 = var0.getTopLevelAncestor();
    var0.invalidate();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    java.lang.String var18 = var10.toString();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    java.awt.Rectangle var27 = var19.getVisibleRect();
    java.awt.image.BufferedImage var29 = var19.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var30 = var19.getComponentOrientation();
    boolean var31 = var19.isPaintingTile();
    boolean var32 = var19.isOptimizedDrawingEnabled();
    int var33 = var10.getComponentZOrder((java.awt.Component)var19);
    javax.swing.InputMap var34 = var19.getInputMap();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    boolean var37 = var35.hasFocus();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.reshape((-1), 1, (-1), 10);
    var38.disable();
    java.awt.LayoutManager var49 = var38.getLayout();
    var38.setVisible(false);
    var35.remove((java.awt.Component)var38);
    java.beans.VetoableChangeListener[] var53 = var35.getVetoableChangeListeners();
    var0.putClientProperty((java.lang.Object)var34, (java.lang.Object)var35);
    java.awt.event.HierarchyBoundsListener[] var55 = var0.getHierarchyBoundsListeners();
    var0.setToolTipText("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    java.awt.Dimension var64 = var60.getPreferredSize();
    boolean var65 = var60.getVerifyInputWhenFocusTarget();
    java.awt.Component var68 = var60.findComponentAt(10, 1);
    var58.addKeyListener((java.awt.event.KeyListener)var60);
    boolean var70 = var60.getFocusTraversalKeysEnabled();
    var60.requestFocus();
    java.lang.Object var72 = var0.getClientProperty((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var18,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var18.equals("SpaceWar.SpacePanel[,0,0,0var18,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test316");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Dimension var9 = var0.getMaximumSize();
    var0.firePropertyChange("", 24, 1);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var14.add((java.awt.Component)var15, (java.lang.Object)true);
    java.awt.Image var28 = var15.createImage(1, (-1));
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    boolean var39 = var37.hasFocus();
    java.awt.Insets var40 = var37.getInsets();
    java.awt.Insets var41 = var29.getInsets(var40);
    java.awt.Insets var42 = var15.getInsets(var40);
    java.awt.Point var43 = var15.getMousePosition();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var50 = var44.getUI();
    java.awt.im.InputMethodRequests var51 = var44.getInputMethodRequests();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    var52.updateUI();
    var52.enableInputMethods(true);
    var52.setSize((-1), 1);
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    var63.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var44.add((java.awt.Component)var52, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var69 = var44.getKeyListeners();
    java.awt.FocusTraversalPolicy var70 = var44.getFocusTraversalPolicy();
    java.awt.Component var73 = var44.locate(3, 100);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    float var75 = var74.getAlignmentX();
    var74.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var80 = var74.getMouseListeners();
    java.awt.Dimension var81 = var74.getPreferredSize();
    java.util.Locale var82 = var74.getLocale();
    var74.setFocusable(true);
    var74.setSize(3, 10);
    SpaceWar.SpacePanel var88 = new SpaceWar.SpacePanel();
    float var89 = var88.getAlignmentX();
    var88.setVisible(false);
    java.awt.Dimension var92 = var88.getPreferredSize();
    boolean var93 = var88.getVerifyInputWhenFocusTarget();
    java.awt.Dimension var94 = var88.size();
    var74.setSize(var94);
    var44.setMinimumSize(var94);
    java.awt.Dimension var97 = var15.getSize(var94);
    var0.setMinimumSize(var94);
    java.awt.dnd.DropTarget var99 = var0.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test317");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.nextFocus();
    var27.updateUI();
    var27.enableInputMethods(true);
    java.lang.String var35 = var27.toString();
    java.awt.FocusTraversalPolicy var36 = var27.getFocusTraversalPolicy();
    var15.removeKeyListener((java.awt.event.KeyListener)var27);
    var15.show(false);
    java.awt.Container var40 = var15.getTopLevelAncestor();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    java.awt.im.InputMethodRequests var44 = var41.getInputMethodRequests();
    var41.setDoubleBuffered(true);
    var41.setInheritsPopupMenu(false);
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    var49.setName("");
    java.awt.Graphics var52 = var49.getGraphics();
    java.awt.event.MouseMotionListener[] var53 = var49.getMouseMotionListeners();
    boolean var54 = var49.getIgnoreRepaint();
    var49.transferFocusBackward();
    java.awt.Cursor var56 = var49.getCursor();
    var41.setCursor(var56);
    var15.setCursor(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var35.equals("SpaceWar.SpacePanel[,0,0,0var35,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test318");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var9.isShowing();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    java.awt.Component var23 = var9.getComponentAt(505, 500);
    java.lang.String var24 = var9.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "PanelUI"+ "'", var24.equals("PanelUI"));

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test319");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    javax.swing.TransferHandler var32 = var0.getTransferHandler();
    boolean var33 = var0.isForegroundSet();
    java.awt.event.ContainerListener[] var34 = var0.getContainerListeners();
    var0.setFocusable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test320");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    boolean var20 = var0.isFocusTraversalPolicyProvider();
    java.awt.Insets var21 = var0.insets();
    java.awt.Dimension var22 = var0.getMinimumSize();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test321");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.resetKeyboardActions();
    float var9 = var0.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test322");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.show(false);
    var0.setAlignmentY(100.0f);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    java.awt.Color var15 = var14.getBackground();
    var10.setForeground(var15);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    java.awt.dnd.DropTarget var22 = var17.getDropTarget();
    var17.show(false);
    java.awt.Rectangle var25 = var17.getVisibleRect();
    var10.repaint(var25);
    java.awt.FocusTraversalPolicy var27 = var10.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var28 = var10.getInputMethodRequests();
    var10.layout();
    boolean var30 = var10.isFocusTraversalPolicyProvider();
    java.awt.Insets var31 = var10.insets();
    java.awt.Dimension var32 = var10.getMinimumSize();
    java.awt.Dimension var33 = var0.getSize(var32);
    var0.enable();
    var0.enable();
    boolean var36 = var0.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test323");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var10.repaint();
    var10.setRequestFocusEnabled(false);
    var10.reshape(100, 0, 100, 0);
    java.awt.Component var20 = var0.add((java.awt.Component)var10);
    boolean var21 = var10.isEnabled();
    javax.swing.ActionMap var22 = var10.getActionMap();
    var10.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test324");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    int var14 = var0.getComponentCount();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    var15.setRequestFocusEnabled(false);
    var15.removeAll();
    var0.setNextFocusableComponent((java.awt.Component)var15);
    java.awt.Dimension var22 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test325");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    boolean var14 = var1.isFocusable();
    java.awt.event.ComponentListener[] var15 = var1.getComponentListeners();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    var16.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var21 = var16.getUI();
    java.awt.Color var22 = var16.getBackground();
    var16.removeAll();
    var16.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)(-1), (short)100);
    java.awt.GraphicsConfiguration var28 = var16.getGraphicsConfiguration();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    boolean var36 = var31.getVerifyInputWhenFocusTarget();
    java.awt.Component var39 = var31.findComponentAt(10, 1);
    var29.addKeyListener((java.awt.event.KeyListener)var31);
    var31.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var46 = var31.getColorModel();
    boolean var47 = var31.isFocusTraversalPolicyProvider();
    var31.show(false);
    boolean var50 = var31.isManagingFocus();
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    java.awt.Color var52 = var51.getBackground();
    var51.repaint();
    var51.setRequestFocusEnabled(false);
    var51.reshape(100, 0, 100, 0);
    var51.requestFocus();
    java.awt.Rectangle var62 = var51.getVisibleRect();
    java.awt.Rectangle var63 = var51.getBounds();
    java.awt.im.InputMethodRequests var64 = var51.getInputMethodRequests();
    boolean var65 = var51.requestFocusInWindow();
    java.awt.Point var67 = var51.getMousePosition(false);
    var51.setDebugGraphicsOptions(1);
    java.awt.Graphics var70 = var51.getGraphics();
    var31.paint(var70);
    var16.paintAll(var70);
    var1.paintAll(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test326");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    var0.removeNotify();
    var0.enable();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    boolean var15 = var11.inside(0, (-1));
    var11.transferFocusUpCycle();
    java.lang.String var17 = var11.getName();
    boolean var18 = var0.isFocusCycleRoot((java.awt.Container)var11);
    java.awt.Dimension var19 = var0.getMinimumSize();
    boolean var20 = var0.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.setInheritsPopupMenu(false);
    var21.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    boolean var33 = var29.isDoubleBuffered();
    var29.list();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    boolean var39 = var35.isDoubleBuffered();
    java.awt.dnd.DropTarget var40 = var35.getDropTarget();
    var35.show(false);
    java.awt.Rectangle var43 = var35.getVisibleRect();
    java.awt.Rectangle var44 = var29.getBounds(var43);
    javax.swing.JToolTip var45 = var29.createToolTip();
    var21.removeKeyListener((java.awt.event.KeyListener)var29);
    var21.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var49 = var21.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.setVisible(false);
    java.awt.Dimension var54 = var50.getPreferredSize();
    java.awt.Toolkit var55 = var50.getToolkit();
    boolean var56 = var50.isFocusable();
    javax.swing.KeyStroke[] var57 = var50.getRegisteredKeyStrokes();
    java.awt.Component var60 = var50.getComponentAt(100, 100);
    java.lang.Object var61 = var50.getTreeLock();
    boolean var64 = var50.inside(400, 0);
    java.awt.event.MouseWheelListener[] var65 = var50.getMouseWheelListeners();
    var50.enableInputMethods(true);
    boolean var68 = var21.isAncestorOf((java.awt.Component)var50);
    boolean var69 = var21.isEnabled();
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    java.awt.Dimension var74 = var70.getPreferredSize();
    boolean var75 = var70.getVerifyInputWhenFocusTarget();
    java.awt.Component var78 = var70.findComponentAt(10, 1);
    boolean var79 = var70.requestDefaultFocus();
    var70.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var82 = var70.getLocation();
    boolean var83 = var21.contains(var82);
    var21.repaint(1, 2, 2, 500);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var90 = var0.add((java.awt.Component)var21, 505);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test327");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var17.repaint();
    var17.setRequestFocusEnabled(false);
    var17.reshape(100, 0, 100, 0);
    var17.requestFocus();
    java.awt.Rectangle var28 = var17.getVisibleRect();
    java.awt.Rectangle var29 = var17.getBounds();
    java.awt.im.InputMethodRequests var30 = var17.getInputMethodRequests();
    boolean var31 = var17.requestFocusInWindow();
    java.lang.Object var32 = var2.getClientProperty((java.lang.Object)var17);
    var2.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 0L, 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test328");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    var0.validate();
    boolean var22 = var0.isEnabled();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    java.awt.Rectangle var31 = var23.getVisibleRect();
    javax.swing.KeyStroke[] var32 = var23.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    java.awt.dnd.DropTarget var38 = var33.getDropTarget();
    boolean var39 = var33.isFocusCycleRoot();
    var33.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var50 = var44.getUI();
    var33.add((java.awt.Component)var44, (java.lang.Object)(short)0);
    java.awt.event.InputMethodListener[] var53 = var44.getInputMethodListeners();
    var0.putClientProperty((java.lang.Object)var32, (java.lang.Object)var44);
    var0.setRequestFocusEnabled(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var58 = var0.getInputMap(400);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test329");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    var0.setDebugGraphicsOptions(10);
    boolean var22 = var0.isFocusCycleRoot();
    boolean var23 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test330");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    java.awt.Component[] var13 = var1.getComponents();
    var1.repaint(25, 25, 100, 1);
    javax.swing.KeyStroke[] var19 = var1.getRegisteredKeyStrokes();
    var1.validate();
    boolean var21 = var1.isForegroundSet();
    boolean var22 = var1.isMinimumSizeSet();
    boolean var23 = var1.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test331");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    var0.loseLife();
    var0.setRigth(false);
    int var15 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test332");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.increasePower(500);
    int var6 = var0.getPower();
    var0.setScore(499);
    var0.setUp(false);
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 499);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test333");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setUp(true);
    java.awt.image.BufferedImage var5 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var6 = var0.getPower();
    boolean var7 = var0.isRecovering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test334");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    var0.update();
    java.awt.image.BufferedImage var6 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    int var7 = var0.getX();
    var0.setLife(10);
    int var10 = var0.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 25);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test335");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.setRigth(true);
    var0.update();
    var0.setDown(false);
    java.awt.image.BufferedImage var10 = var0.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setUp(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test336");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    int var12 = var0.getHeight();
    javax.swing.InputVerifier var13 = var0.getInputVerifier();
    java.awt.Component var14 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test337");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.Component var9 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test338");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    java.awt.event.MouseWheelListener[] var20 = var3.getMouseWheelListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    java.awt.Color var22 = var21.getBackground();
    var21.repaint();
    var21.setRequestFocusEnabled(false);
    var21.reshape(100, 0, 100, 0);
    var21.requestFocus();
    java.awt.Rectangle var32 = var21.getVisibleRect();
    java.awt.Rectangle var33 = var21.getBounds();
    java.awt.im.InputMethodRequests var34 = var21.getInputMethodRequests();
    boolean var35 = var21.requestFocusInWindow();
    java.awt.Point var37 = var21.getMousePosition(false);
    var21.setDebugGraphicsOptions(1);
    java.awt.Graphics var40 = var21.getGraphics();
    var3.printAll(var40);
    var3.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test339");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.event.MouseWheelListener[] var16 = var0.getMouseWheelListeners();
    var0.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test340");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    java.awt.Toolkit var43 = var38.getToolkit();
    boolean var44 = var38.isFocusable();
    javax.swing.KeyStroke[] var45 = var38.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    java.awt.Dimension var52 = var48.getPreferredSize();
    boolean var53 = var48.getVerifyInputWhenFocusTarget();
    java.awt.Component var56 = var48.findComponentAt(10, 1);
    var46.addKeyListener((java.awt.event.KeyListener)var48);
    var48.repaint(100, (-1), (-1), 1);
    boolean var63 = var38.isAncestorOf((java.awt.Component)var48);
    var38.setFocusable(false);
    boolean var66 = var7.isAncestorOf((java.awt.Component)var38);
    boolean var67 = var7.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    boolean var72 = var68.isDoubleBuffered();
    var68.list();
    float var74 = var68.getAlignmentY();
    boolean var75 = var68.isOpaque();
    var68.nextFocus();
    java.awt.Component var77 = var68.getNextFocusableComponent();
    var7.remove((java.awt.Component)var68);
    var7.setSize(10, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test341");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.hasFocus();
    java.awt.event.MouseWheelListener[] var20 = var3.getMouseWheelListeners();
    boolean var21 = var3.isFocusTraversalPolicySet();
    var3.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test342");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    java.awt.Dimension var22 = var18.getPreferredSize();
    var12.setMaximumSize(var22);
    boolean var24 = var12.getVerifyInputWhenFocusTarget();
    int var25 = var12.getX();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    java.awt.Dimension var32 = var28.getPreferredSize();
    boolean var33 = var28.getVerifyInputWhenFocusTarget();
    java.awt.Component var36 = var28.findComponentAt(10, 1);
    var26.addKeyListener((java.awt.event.KeyListener)var28);
    var28.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    java.awt.Color var44 = var43.getBackground();
    var43.repaint();
    java.awt.im.InputMethodRequests var46 = var43.getInputMethodRequests();
    java.awt.GraphicsConfiguration var47 = var43.getGraphicsConfiguration();
    var28.remove((java.awt.Component)var43);
    java.awt.Font var49 = var43.getFont();
    var12.setFont(var49);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    var51.nextFocus();
    var51.reshape((-1), 1, (-1), 10);
    var51.disable();
    java.awt.LayoutManager var62 = var51.getLayout();
    var12.setLayout(var62);
    var0.setLayout(var62);
    java.awt.Point var66 = var0.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test343");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var24 = var18.getMouseListeners();
    int var25 = var18.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var18.paintImmediately(var34);
    java.awt.Rectangle var36 = var18.getBounds();
    var0.scrollRectToVisible(var36);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    java.awt.Color var39 = var38.getBackground();
    var38.repaint();
    var38.setRequestFocusEnabled(false);
    var38.setIgnoreRepaint(false);
    boolean var45 = var38.requestFocusInWindow();
    float var46 = var38.getAlignmentY();
    java.awt.LayoutManager var47 = var38.getLayout();
    var0.setLayout(var47);
    float var49 = var0.getAlignmentY();
    java.awt.Dimension var50 = var0.minimumSize();
    java.lang.String var51 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test344");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    boolean var18 = var3.hasFocus();
    java.lang.String var19 = var3.toString();
    var3.reshape((-1), 505, 500, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var19.equals("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test345");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.hide();
    var2.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test346");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.setFiring(false);
    int var9 = var0.getScore();
    var0.setLeft(true);
    var0.setDown(true);
    var0.update();
    int var15 = var0.getY();
    var0.setLeft(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 505);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test347");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    boolean var8 = var6.hasFocus();
    java.awt.Insets var9 = var6.getInsets();
    java.awt.Insets var10 = var0.getInsets(var9);
    java.awt.Rectangle var11 = var0.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test348");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    int var7 = var0.getWidth();
    int var8 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test349");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var24 = var18.getMouseListeners();
    int var25 = var18.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    boolean var30 = var26.isDoubleBuffered();
    java.awt.dnd.DropTarget var31 = var26.getDropTarget();
    var26.show(false);
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var18.paintImmediately(var34);
    java.awt.Rectangle var36 = var18.getBounds();
    var0.scrollRectToVisible(var36);
    var0.requestFocus();
    var0.move(2, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test350");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    var0.repaint(0L);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var22 = var16.getUI();
    java.awt.im.InputMethodRequests var23 = var16.getInputMethodRequests();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.updateUI();
    var24.enableInputMethods(true);
    var24.setSize((-1), 1);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    var35.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var16.add((java.awt.Component)var24, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var41 = var24.getComponentOrientation();
    java.beans.VetoableChangeListener[] var42 = var24.getVetoableChangeListeners();
    int var43 = var24.getHeight();
    javax.swing.ActionMap var44 = var24.getActionMap();
    var0.setActionMap(var44);
    java.awt.Point var47 = var0.getMousePosition(false);
    boolean var48 = var0.isPaintingForPrint();
    var0.setInheritsPopupMenu(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test351");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    boolean var17 = var0.isDoubleBuffered();
    var0.reshape(0, 3, 25, 3);
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    boolean var27 = var23.isDoubleBuffered();
    java.awt.dnd.DropTarget var28 = var23.getDropTarget();
    var23.show(false);
    boolean var31 = var23.isPaintingForPrint();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var38 = var32.getMouseListeners();
    int var39 = var32.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var40 = var32.getInputMethodRequests();
    var23.addKeyListener((java.awt.event.KeyListener)var32);
    boolean var42 = var23.isDisplayable();
    java.awt.Point var43 = var23.getLocation();
    java.awt.Component var44 = var0.findComponentAt(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test352");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    java.awt.Dimension var3 = var0.minimumSize();
    boolean var4 = var0.isDoubleBuffered();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    java.awt.dnd.DropTarget var17 = var12.getDropTarget();
    var12.show(false);
    java.awt.Rectangle var20 = var12.getVisibleRect();
    var5.repaint(var20);
    java.awt.FocusTraversalPolicy var22 = var5.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var23 = var5.getInputMethodRequests();
    var5.layout();
    boolean var25 = var5.isFocusTraversalPolicyProvider();
    java.awt.Component var26 = var0.add((java.awt.Component)var5);
    javax.swing.border.Border var27 = var5.getBorder();
    java.awt.Point var28 = var5.getLocation();
    java.awt.Rectangle var29 = var5.getBounds();
    java.beans.PropertyChangeListener[] var30 = var5.getPropertyChangeListeners();
    boolean var31 = var5.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test353");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var6.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    java.awt.Color var28 = var27.getBackground();
    var27.repaint();
    java.lang.Object var30 = var22.getClientProperty((java.lang.Object)var27);
    var6.remove((java.awt.Component)var22);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var38 = var32.getMouseMotionListeners();
    java.awt.Dimension var39 = var32.getMinimumSize();
    var6.setMaximumSize(var39);
    var0.setPreferredSize(var39);
    java.awt.Toolkit var42 = var0.getToolkit();
    java.awt.Point var43 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test354");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    int var9 = var0.getHeight();
    var0.reshape(505, 400, 400, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test355");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    var16.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    var16.remove((java.awt.Component)var31);
    java.awt.Font var37 = var31.getFont();
    var0.setFont(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.reshape((-1), 1, (-1), 10);
    var39.disable();
    java.awt.LayoutManager var50 = var39.getLayout();
    var0.setLayout(var50);
    java.awt.image.ColorModel var52 = var0.getColorModel();
    boolean var53 = var0.isPaintingTile();
    int var54 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test356");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    var0.addKeyListener((java.awt.event.KeyListener)var10);
    var0.setRequestFocusEnabled(true);
    boolean var19 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test357");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    java.awt.dnd.DropTarget var27 = var8.getDropTarget();
    var8.repaint(3, 499, 400, 1);
    java.awt.Toolkit var33 = var8.getToolkit();
    var8.setFocusCycleRoot(true);
    java.util.Locale var36 = var8.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test358");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Image var14 = var1.createImage(1, (-1));
    java.awt.event.MouseListener[] var15 = var1.getMouseListeners();
    java.awt.Color var16 = var1.getBackground();
    boolean var17 = var1.getIgnoreRepaint();
    var1.enable();
    javax.swing.JToolTip var19 = var1.createToolTip();
    int var20 = var1.getY();
    boolean var21 = var1.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test359");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    java.awt.event.MouseWheelListener[] var6 = var0.getMouseWheelListeners();
    var0.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test360");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    var21.setName("");
    java.awt.ComponentOrientation var24 = var21.getComponentOrientation();
    var21.firePropertyChange("PanelUI", 1.0f, 0.5f);
    int var29 = var0.getComponentZOrder((java.awt.Component)var21);
    boolean var31 = var0.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    java.awt.im.InputMethodRequests var35 = var32.getInputMethodRequests();
    int var36 = var32.countComponents();
    java.awt.event.ComponentListener[] var37 = var32.getComponentListeners();
    var32.removeNotify();
    javax.swing.InputMap var39 = var32.getInputMap();
    int var40 = var32.getDebugGraphicsOptions();
    java.awt.Graphics var41 = var32.getGraphics();
    var32.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (short)(-1), (short)100);
    boolean var46 = var32.isEnabled();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    var47.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var52 = var47.getUI();
    boolean var53 = var47.isDisplayable();
    SpaceWar.SpacePanel var54 = new SpaceWar.SpacePanel();
    float var55 = var54.getAlignmentX();
    var54.removeNotify();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    var57.list();
    float var63 = var57.getAlignmentY();
    java.awt.Insets var64 = var57.getInsets();
    java.awt.Insets var65 = var54.getInsets(var64);
    java.awt.Insets var66 = var47.getInsets(var65);
    java.awt.Insets var67 = var32.getInsets(var66);
    java.awt.Dimension var68 = var32.size();
    var0.setSize(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test361");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    var0.setAutoscrolls(false);
    boolean var20 = var0.requestFocusInWindow();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    var21.nextFocus();
    var21.reshape((-1), 1, (-1), 10);
    var21.disable();
    java.awt.LayoutManager var32 = var21.getLayout();
    java.awt.Container var33 = var21.getParent();
    boolean var34 = var21.isOptimizedDrawingEnabled();
    java.awt.Font var35 = var21.getFont();
    java.awt.FontMetrics var36 = var0.getFontMetrics(var35);
    javax.swing.InputMap var37 = var0.getInputMap();
    java.awt.Toolkit var38 = var0.getToolkit();
    javax.swing.InputMap var39 = var0.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test362");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.removeNotify();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.Component.BaselineResizeBehavior var4 = var0.getBaselineResizeBehavior();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test363");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    var0.reshape(10, 100, 3, 3);
    var0.setVerifyInputWhenFocusTarget(false);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.reshape((-1), 1, (-1), 10);
    var33.disable();
    java.awt.LayoutManager var44 = var33.getLayout();
    boolean var47 = var33.contains((-1), 0);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    var48.nextFocus();
    var48.updateUI();
    var48.enableInputMethods(true);
    var48.setSize((-1), 1);
    java.awt.Component var59 = var33.add((java.awt.Component)var48);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.updateUI();
    var60.enableInputMethods(true);
    java.lang.String var68 = var60.toString();
    java.awt.FocusTraversalPolicy var69 = var60.getFocusTraversalPolicy();
    var48.removeKeyListener((java.awt.event.KeyListener)var60);
    var48.show(false);
    java.awt.Container var73 = var48.getTopLevelAncestor();
    java.awt.LayoutManager var74 = var48.getLayout();
    var0.setNextFocusableComponent((java.awt.Component)var48);
    boolean var76 = var0.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var68,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var68.equals("SpaceWar.SpacePanel[,0,0,0var68,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test364");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    javax.swing.JPopupMenu var27 = var19.getComponentPopupMenu();
    var19.move((-1), 100);
    var19.validate();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    java.awt.Color var37 = var36.getBackground();
    var32.setForeground(var37);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    var39.show(false);
    java.awt.Rectangle var47 = var39.getVisibleRect();
    var32.repaint(var47);
    java.awt.FocusTraversalPolicy var49 = var32.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var50 = new SpaceWar.SpacePanel();
    float var51 = var50.getAlignmentX();
    var50.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var56 = var50.getUI();
    java.awt.im.InputMethodRequests var57 = var50.getInputMethodRequests();
    SpaceWar.SpacePanel var58 = new SpaceWar.SpacePanel();
    float var59 = var58.getAlignmentX();
    var58.setVisible(false);
    var58.nextFocus();
    var58.updateUI();
    var58.enableInputMethods(true);
    var58.setSize((-1), 1);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    var69.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var50.add((java.awt.Component)var58, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var75 = var58.getComponentOrientation();
    java.beans.VetoableChangeListener[] var76 = var58.getVetoableChangeListeners();
    int var77 = var58.getHeight();
    javax.swing.ActionMap var78 = var58.getActionMap();
    var32.setActionMap(var78);
    var19.setActionMap(var78);
    javax.swing.InputMap var81 = var19.getInputMap();
    java.awt.GraphicsConfiguration var82 = var19.getGraphicsConfiguration();
    javax.swing.JToolTip var83 = var19.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test365");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Container var20 = var0.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    var21.list();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    java.awt.Rectangle var36 = var21.getBounds(var35);
    javax.swing.JToolTip var37 = var21.createToolTip();
    var21.firePropertyChange("", false, false);
    var21.validate();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    boolean var47 = var43.isDoubleBuffered();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    var43.show(false);
    boolean var51 = var43.isPaintingForPrint();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var58 = var52.getMouseListeners();
    int var59 = var52.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var60 = var52.getInputMethodRequests();
    var43.addKeyListener((java.awt.event.KeyListener)var52);
    var52.repaint();
    java.awt.Point var63 = var52.location();
    java.awt.Component var64 = var21.getComponentAt(var63);
    var0.setLocation(var63);
    java.beans.VetoableChangeListener[] var66 = var0.getVetoableChangeListeners();
    var0.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test366");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    boolean var19 = var9.isShowing();
    boolean var20 = var9.isOpaque();
    var9.grabFocus();
    boolean var22 = var9.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test367");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var18 = var12.getUI();
    java.awt.im.InputMethodRequests var19 = var12.getInputMethodRequests();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var20.setSize((-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    var31.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var12.add((java.awt.Component)var20, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var37 = var12.getKeyListeners();
    java.awt.FocusTraversalPolicy var38 = var12.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    var39.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var44 = var39.getToolkit();
    var0.add((java.awt.Component)var12, (java.lang.Object)var39);
    java.awt.GraphicsConfiguration var46 = var0.getGraphicsConfiguration();
    boolean var47 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test368");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    var2.repaint(100, (-1), (-1), 1);
    java.awt.image.ColorModel var17 = var2.getColorModel();
    java.awt.event.MouseWheelListener[] var18 = var2.getMouseWheelListeners();
    var2.repaint();
    int var20 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test369");


    SpaceWar.Text var4 = new SpaceWar.Text(506.9915098063617d, 75.48643960578549d, 0L, "SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=1.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var5 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test370");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    var0.setLife(100);
    var0.setDown(false);
    var0.setFiring(true);
    var0.increasePower(400);
    int var12 = var0.getLives();
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 100);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test371");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    boolean var20 = var11.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test372");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.setFiring(false);
    int var9 = var0.getScore();
    var0.setLeft(true);
    var0.setScore(499);
    var0.setUp(false);
    int var16 = var0.getX();
    int var17 = var0.getLives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test373");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    var9.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 1.0f);
    boolean var23 = var9.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test374");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    java.awt.ComponentOrientation var14 = var0.getComponentOrientation();
    java.awt.Dimension var15 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test375");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    boolean var15 = var0.requestFocusInWindow();
    var0.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test376");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    java.awt.Toolkit var43 = var38.getToolkit();
    boolean var44 = var38.isFocusable();
    javax.swing.KeyStroke[] var45 = var38.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    java.awt.Dimension var52 = var48.getPreferredSize();
    boolean var53 = var48.getVerifyInputWhenFocusTarget();
    java.awt.Component var56 = var48.findComponentAt(10, 1);
    var46.addKeyListener((java.awt.event.KeyListener)var48);
    var48.repaint(100, (-1), (-1), 1);
    boolean var63 = var38.isAncestorOf((java.awt.Component)var48);
    var38.setFocusable(false);
    boolean var66 = var7.isAncestorOf((java.awt.Component)var38);
    boolean var67 = var7.isFocusTraversalPolicySet();
    SpaceWar.SpacePanel var68 = new SpaceWar.SpacePanel();
    float var69 = var68.getAlignmentX();
    var68.setVisible(false);
    boolean var72 = var68.isDoubleBuffered();
    var68.list();
    float var74 = var68.getAlignmentY();
    boolean var75 = var68.isOpaque();
    var68.nextFocus();
    java.awt.Component var77 = var68.getNextFocusableComponent();
    var7.remove((java.awt.Component)var68);
    int var79 = var7.getHeight();
    boolean var80 = var7.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test377");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    var0.setDown(false);
    boolean var5 = var0.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test378");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    var0.setName("");
    int var3 = var0.getX();
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    float var5 = var4.getAlignmentX();
    var4.setVisible(false);
    var4.nextFocus();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    java.awt.Color var14 = var13.getBackground();
    var9.setForeground(var14);
    var4.setBackground(var14);
    var0.setBackground(var14);
    boolean var18 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.setName("");
    int var22 = var19.getX();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.nextFocus();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    var23.setBackground(var33);
    var19.setBackground(var33);
    var0.setBackground(var33);
    java.awt.Container var38 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test379");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Cursor var12 = var0.getCursor();
    java.awt.Dimension var13 = var0.getMinimumSize();
    var0.setEnabled(true);
    boolean var16 = var0.isFocusCycleRoot();
    javax.swing.InputVerifier var17 = var0.getInputVerifier();
    javax.swing.InputMap var19 = var0.getInputMap(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test380");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1), 10);
    var0.setLocation(10, 100);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var28.removeNotify();
    var28.enable();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    boolean var43 = var39.inside(0, (-1));
    var39.transferFocusUpCycle();
    java.lang.String var45 = var39.getName();
    boolean var46 = var28.isFocusCycleRoot((java.awt.Container)var39);
    java.awt.Dimension var47 = var28.getMinimumSize();
    var0.resize(var47);
    var0.setAlignmentX((-1.0f));
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    var52.reshape((-1), 1, (-1), 10);
    var52.disable();
    java.awt.LayoutManager var63 = var52.getLayout();
    java.awt.Container var64 = var52.getParent();
    boolean var65 = var52.isOptimizedDrawingEnabled();
    var52.grabFocus();
    int var67 = var52.getHeight();
    java.util.Set var69 = var52.getFocusTraversalKeys(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(100, var69);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test381");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    var0.reshape(10, 100, 3, 3);
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    java.awt.Component.BaselineResizeBehavior var32 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test382");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Rectangle var13 = var0.bounds();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.reshape((-1), 1, (-1), 10);
    var14.disable();
    java.awt.LayoutManager var25 = var14.getLayout();
    boolean var28 = var14.contains((-1), 0);
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    var29.nextFocus();
    var29.updateUI();
    var29.enableInputMethods(true);
    var29.setSize((-1), 1);
    java.awt.Component var40 = var14.add((java.awt.Component)var29);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    var41.nextFocus();
    var41.updateUI();
    var41.enableInputMethods(true);
    java.lang.String var49 = var41.toString();
    java.awt.FocusTraversalPolicy var50 = var41.getFocusTraversalPolicy();
    var29.removeKeyListener((java.awt.event.KeyListener)var41);
    var29.show(false);
    java.awt.Container var54 = var29.getTopLevelAncestor();
    java.awt.LayoutManager var55 = var29.getLayout();
    var0.setLayout(var55);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    var57.list();
    SpaceWar.SpacePanel var63 = new SpaceWar.SpacePanel();
    float var64 = var63.getAlignmentX();
    var63.setVisible(false);
    boolean var67 = var63.isDoubleBuffered();
    java.awt.dnd.DropTarget var68 = var63.getDropTarget();
    var63.show(false);
    java.awt.Rectangle var71 = var63.getVisibleRect();
    java.awt.image.BufferedImage var73 = var63.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var74 = var57.isAncestorOf((java.awt.Component)var63);
    javax.swing.InputVerifier var75 = var63.getInputVerifier();
    java.awt.Dimension var76 = var63.minimumSize();
    var0.setMinimumSize(var76);
    var0.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var49,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var49.equals("SpaceWar.SpacePanel[,0,0,0var49,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test383");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    boolean var3 = var2.isDead();
    var2.hit();
    double var5 = var2.getX();
    int var6 = var2.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 339.8923933063379d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test384");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setUp(false);
    int var4 = var0.getLives();
    var0.setScore(0);
    int var7 = var0.getPowerLevel();
    boolean var8 = var0.isRecovering();
    var0.setDown(false);
    java.awt.image.BufferedImage var12 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test385");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    int var2 = var0.getRequiredPower();
    var0.setDown(false);
    var0.setRigth(false);
    var0.setRigth(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test386");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    java.awt.Rectangle var11 = var0.getVisibleRect();
    java.awt.Rectangle var12 = var0.getBounds();
    java.awt.im.InputMethodRequests var13 = var0.getInputMethodRequests();
    boolean var14 = var0.requestFocusInWindow();
    java.awt.Point var16 = var0.getMousePosition(false);
    var0.setDebugGraphicsOptions(1);
    java.awt.Graphics var19 = var0.getGraphics();
    boolean var20 = var0.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test387");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    java.awt.Toolkit var13 = var0.getToolkit();
    java.awt.Dimension var14 = var0.getMinimumSize();
    java.lang.String var15 = var0.toString();
    var0.disable();
    java.awt.Rectangle var17 = var0.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var15,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var15.equals("SpaceWar.SpacePanel[,0,0,0var15,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test388");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var18 = var12.getUI();
    java.awt.im.InputMethodRequests var19 = var12.getInputMethodRequests();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.updateUI();
    var20.enableInputMethods(true);
    var20.setSize((-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    var31.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var12.add((java.awt.Component)var20, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var37 = var12.getKeyListeners();
    java.awt.FocusTraversalPolicy var38 = var12.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    var39.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    java.awt.Toolkit var44 = var39.getToolkit();
    var0.add((java.awt.Component)var12, (java.lang.Object)var39);
    var12.transferFocusDownCycle();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    java.awt.Color var48 = var47.getBackground();
    var47.repaint();
    java.awt.im.InputMethodRequests var50 = var47.getInputMethodRequests();
    var47.setDoubleBuffered(true);
    var47.setInheritsPopupMenu(false);
    javax.swing.InputMap var55 = var47.getInputMap();
    var47.doLayout();
    java.awt.LayoutManager var57 = var47.getLayout();
    var12.setLayout(var57);
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    var59.setInheritsPopupMenu(false);
    var59.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.setVisible(false);
    var67.nextFocus();
    var67.updateUI();
    var67.enableInputMethods(true);
    java.lang.String var75 = var67.toString();
    SpaceWar.SpacePanel var76 = new SpaceWar.SpacePanel();
    float var77 = var76.getAlignmentX();
    var76.setVisible(false);
    boolean var80 = var76.isDoubleBuffered();
    java.awt.dnd.DropTarget var81 = var76.getDropTarget();
    var76.show(false);
    java.awt.Rectangle var84 = var76.getVisibleRect();
    java.awt.image.BufferedImage var86 = var76.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var87 = var76.getComponentOrientation();
    boolean var88 = var76.isPaintingTile();
    boolean var89 = var76.isOptimizedDrawingEnabled();
    int var90 = var67.getComponentZOrder((java.awt.Component)var76);
    javax.swing.InputMap var91 = var76.getInputMap();
    java.awt.Font var92 = var76.getFont();
    java.awt.FontMetrics var93 = var59.getFontMetrics(var92);
    var12.setFont(var92);
    java.awt.Component[] var95 = var12.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var75,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var75.equals("SpaceWar.SpacePanel[,0,0,0var75,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test389");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    javax.swing.event.AncestorListener[] var1 = var0.getAncestorListeners();
    var0.setOpaque(false);
    var0.setEnabled(false);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var12 = var6.getUI();
    java.awt.im.InputMethodRequests var13 = var6.getInputMethodRequests();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    var14.nextFocus();
    var14.updateUI();
    var14.enableInputMethods(true);
    var14.setSize((-1), 1);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    var25.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var6.add((java.awt.Component)var14, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var31 = var14.getComponentOrientation();
    java.beans.VetoableChangeListener[] var32 = var14.getVetoableChangeListeners();
    int var33 = var14.getHeight();
    var14.enable(true);
    java.awt.Component var36 = var14.getNextFocusableComponent();
    java.awt.Point var37 = var14.getMousePosition();
    java.awt.LayoutManager var38 = var14.getLayout();
    var0.setLayout(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test390");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var16 = var0.isRequestFocusEnabled();
    javax.swing.ActionMap var17 = var0.getActionMap();
    boolean var18 = var0.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test391");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.setAutoscrolls(false);
    java.awt.event.InputMethodListener[] var27 = var0.getInputMethodListeners();
    var0.paintImmediately(0, 2, 400, 3);
    var0.firePropertyChange("hi!", 19.998476951563912d, 282.8681995802876d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test392");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    var3.repaint();
    boolean var20 = var3.isRequestFocusEnabled();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    java.awt.Dimension var31 = var27.getPreferredSize();
    var21.setMaximumSize(var31);
    boolean var33 = var21.getVerifyInputWhenFocusTarget();
    var21.transferFocusUpCycle();
    java.awt.Point var35 = var21.location();
    java.awt.Component var36 = var3.getComponentAt(var35);
    java.awt.dnd.DropTarget var37 = var3.getDropTarget();
    var3.transferFocusDownCycle();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    java.awt.Color var40 = var39.getBackground();
    var39.repaint();
    java.awt.im.InputMethodRequests var42 = var39.getInputMethodRequests();
    int var43 = var39.countComponents();
    java.awt.event.ComponentListener[] var44 = var39.getComponentListeners();
    var39.removeNotify();
    javax.swing.InputMap var46 = var39.getInputMap();
    int var47 = var39.getDebugGraphicsOptions();
    java.awt.Rectangle var48 = var39.getBounds();
    var3.setBounds(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test393");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var5.add((java.awt.Component)var6, (java.lang.Object)true);
    java.awt.Dimension var17 = var6.getPreferredSize();
    var0.setMaximumSize(var17);
    var0.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test394");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    float var18 = var0.getAlignmentY();
    java.awt.peer.ComponentPeer var19 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test395");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getR();
    var0.setRigth(false);
    int var4 = var0.getY();
    var0.increasePower(499);
    java.awt.image.BufferedImage var8 = var0.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var9 = var0.isRecovering();
    int var10 = var0.getPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 498);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test396");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    javax.swing.InputMap var8 = var0.getInputMap();
    var0.doLayout();
    var0.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test397");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    var7.setMaximumSize(var17);
    var0.setPreferredSize(var17);
    java.awt.Container var20 = var0.getFocusCycleRootAncestor();
    boolean var21 = var0.isDoubleBuffered();
    java.beans.PropertyChangeListener[] var22 = var0.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test398");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    var0.setInheritsPopupMenu(false);
    javax.swing.plaf.PanelUI var8 = var0.getUI();
    java.util.Set var10 = var0.getFocusTraversalKeys(3);
    var0.requestFocus();
    var0.setLocation(0, 24);
    boolean var17 = var0.inside(24, 3);
    java.awt.Dimension var18 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test399");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    java.awt.Color var18 = var17.getBackground();
    var13.setForeground(var18);
    var8.setBackground(var18);
    var0.setBackground(var18);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    var22.list();
    var22.setAutoscrolls(false);
    var0.removeKeyListener((java.awt.event.KeyListener)var22);
    java.awt.event.MouseListener[] var31 = var22.getMouseListeners();
    java.awt.LayoutManager var32 = var22.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test400");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var12 = var0.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var13 = var0.getHierarchyListeners();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var14.setForeground(var19);
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    var14.repaint(var29);
    java.awt.FocusTraversalPolicy var31 = var14.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var32 = var14.getInputMethodRequests();
    var14.layout();
    boolean var34 = var14.isFocusTraversalPolicyProvider();
    java.lang.Object var35 = var0.getClientProperty((java.lang.Object)var34);
    java.awt.Dimension var36 = var0.getSize();
    boolean var37 = var0.isFocusTraversable();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    var38.nextFocus();
    var38.updateUI();
    var38.enableInputMethods(true);
    var38.resetKeyboardActions();
    var0.removeKeyListener((java.awt.event.KeyListener)var38);
    java.util.Locale var48 = var38.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test401");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    java.awt.Rectangle var14 = var0.bounds();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    var15.repaint();
    java.awt.im.InputMethodRequests var18 = var15.getInputMethodRequests();
    int var19 = var15.countComponents();
    java.awt.event.ComponentListener[] var20 = var15.getComponentListeners();
    var15.removeNotify();
    javax.swing.InputMap var22 = var15.getInputMap();
    int var23 = var15.getDebugGraphicsOptions();
    var0.addKeyListener((java.awt.event.KeyListener)var15);
    java.awt.Color var25 = var15.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test402");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    var0.transferFocusUpCycle();
    java.awt.Container var6 = var0.getParent();
    boolean var7 = var0.isMaximumSizeSet();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    var11.nextFocus();
    var11.updateUI();
    var11.enableInputMethods(true);
    var8.add((java.awt.Component)var9, (java.lang.Object)true);
    boolean var21 = var9.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    boolean var26 = var22.isDoubleBuffered();
    java.awt.dnd.DropTarget var27 = var22.getDropTarget();
    var22.show(false);
    java.awt.Rectangle var30 = var22.getVisibleRect();
    var9.setBounds(var30);
    var0.setBounds(var30);
    int var33 = var0.getHeight();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 559.7240852144217d, 509.27513824562607d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test403");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    boolean var27 = var19.isPaintingForPrint();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var19.addKeyListener((java.awt.event.KeyListener)var28);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    var38.list();
    float var44 = var38.getAlignmentY();
    boolean var45 = var28.isFocusCycleRoot((java.awt.Container)var38);
    boolean var46 = var38.isEnabled();
    java.awt.Dimension var47 = var38.getMaximumSize();
    var38.setFocusCycleRoot(false);
    java.awt.event.ComponentListener[] var50 = var38.getComponentListeners();
    boolean var51 = var38.isFocusCycleRoot();
    var38.show();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    var53.list();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    boolean var63 = var59.isDoubleBuffered();
    java.awt.dnd.DropTarget var64 = var59.getDropTarget();
    var59.show(false);
    java.awt.Rectangle var67 = var59.getVisibleRect();
    java.awt.Rectangle var68 = var53.getBounds(var67);
    javax.swing.JToolTip var69 = var53.createToolTip();
    var53.firePropertyChange("", false, false);
    var53.revalidate();
    int var75 = var53.getComponentCount();
    var0.add((java.awt.Component)var38, (java.lang.Object)var75);
    var0.setBounds(3, 100, 100, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var82 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test404");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    SpaceWar.SpacePanel var37 = new SpaceWar.SpacePanel();
    float var38 = var37.getAlignmentX();
    var37.setVisible(false);
    java.awt.Dimension var41 = var37.getPreferredSize();
    boolean var42 = var37.getVerifyInputWhenFocusTarget();
    java.awt.Component var45 = var37.findComponentAt(10, 1);
    boolean var46 = var37.requestDefaultFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var49 = var37.getLocation();
    java.awt.Point var50 = var0.getLocation(var49);
    var0.enable(false);
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test405");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var2.hit();
    var2.hit();
    var2.hit();
    var2.hit();
    boolean var10 = var2.isDead();
    boolean var11 = var2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test406");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setFiring(true);
    boolean var4 = var0.isDead();
    var0.setFiring(false);
    var0.setDown(true);
    int var9 = var0.getScore();
    int var10 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 500);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test407");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.setDoubleBuffered(true);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    boolean var8 = var6.hasFocus();
    java.awt.Insets var9 = var6.getInsets();
    java.awt.Insets var10 = var0.getInsets(var9);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    java.awt.Color var12 = var11.getBackground();
    var11.repaint();
    java.awt.im.InputMethodRequests var14 = var11.getInputMethodRequests();
    var11.setDoubleBuffered(true);
    var11.setInheritsPopupMenu(false);
    boolean var19 = var11.isFocusTraversalPolicySet();
    var11.transferFocusUpCycle();
    java.awt.image.BufferedImage var22 = var11.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    float var24 = var23.getAlignmentX();
    var23.setVisible(false);
    var23.setInheritsPopupMenu(false);
    boolean var29 = var23.isDoubleBuffered();
    boolean var30 = var23.isMinimumSizeSet();
    java.awt.Font var31 = var23.getFont();
    java.awt.FontMetrics var32 = var11.getFontMetrics(var31);
    java.awt.FontMetrics var33 = var0.getFontMetrics(var31);
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    java.awt.Color var35 = var34.getBackground();
    var34.repaint();
    java.awt.im.InputMethodRequests var37 = var34.getInputMethodRequests();
    int var38 = var34.countComponents();
    java.awt.Dimension var39 = var34.getSize();
    var0.setMinimumSize(var39);
    java.awt.Graphics var41 = var0.getGraphics();
    boolean var42 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test408");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    var0.show();
    SpaceWar.SpacePanel var12 = new SpaceWar.SpacePanel();
    float var13 = var12.getAlignmentX();
    var12.setVisible(false);
    boolean var16 = var12.isDoubleBuffered();
    var12.list();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    java.awt.dnd.DropTarget var23 = var18.getDropTarget();
    var18.show(false);
    java.awt.Rectangle var26 = var18.getVisibleRect();
    java.awt.Rectangle var27 = var12.getBounds(var26);
    javax.swing.JToolTip var28 = var12.createToolTip();
    var12.firePropertyChange("", false, false);
    var12.validate();
    SpaceWar.SpacePanel var34 = new SpaceWar.SpacePanel();
    float var35 = var34.getAlignmentX();
    var34.setVisible(false);
    boolean var38 = var34.isDoubleBuffered();
    java.awt.dnd.DropTarget var39 = var34.getDropTarget();
    var34.show(false);
    boolean var42 = var34.isPaintingForPrint();
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var49 = var43.getMouseListeners();
    int var50 = var43.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var51 = var43.getInputMethodRequests();
    var34.addKeyListener((java.awt.event.KeyListener)var43);
    var43.repaint();
    java.awt.Point var54 = var43.location();
    java.awt.Component var55 = var12.getComponentAt(var54);
    java.awt.Point var56 = var0.getLocation(var54);
    var0.setAlignmentY(0.5f);
    boolean var59 = var0.getVerifyInputWhenFocusTarget();
    boolean var60 = var0.isBackgroundSet();
    java.awt.Point var61 = var0.location();
    java.awt.Point var63 = var0.getMousePosition(false);
    boolean var64 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test409");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    float var18 = var0.getAlignmentY();
    boolean var19 = var0.getInheritsPopupMenu();
    var0.firePropertyChange("SpaceWar.SpacePanel[,10,10,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (byte)0, (byte)10);
    float var24 = var0.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test410");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.update();
    int var5 = var0.getY();
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 500);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test411");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    java.awt.image.BufferedImage var5 = var2.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var2.hit();
    double var7 = var2.getX();
    double var8 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 470.4772832256448d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test412");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    java.awt.Graphics var17 = var0.getGraphics();
    java.beans.VetoableChangeListener[] var18 = var0.getVetoableChangeListeners();
    boolean var19 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test413");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    boolean var9 = var0.getIgnoreRepaint();
    java.awt.Component[] var10 = var0.getComponents();
    java.awt.Color var11 = var0.getBackground();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test414");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.Graphics var5 = var0.getGraphics();
    boolean var6 = var0.hasFocus();
    boolean var7 = var0.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test415");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    java.awt.GraphicsConfiguration var4 = var0.getGraphicsConfiguration();
    boolean var6 = var0.requestFocus(false);
    javax.swing.JPopupMenu var7 = var0.getComponentPopupMenu();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    java.awt.Dimension var25 = var8.minimumSize();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    var26.setInheritsPopupMenu(false);
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Container var34 = var26.getFocusCycleRootAncestor();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.removeNotify();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    var38.list();
    float var44 = var38.getAlignmentY();
    java.awt.Insets var45 = var38.getInsets();
    java.awt.Insets var46 = var35.getInsets(var45);
    java.awt.Insets var47 = var26.getInsets(var46);
    java.awt.Insets var48 = var8.getInsets(var46);
    var8.hide();
    java.awt.Component var51 = var0.add((java.awt.Component)var8, (-1));
    var8.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test416");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    java.awt.Color var11 = var10.getBackground();
    var6.setForeground(var11);
    var0.setBackground(var11);
    var0.grabFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    boolean var21 = var15.isFocusCycleRoot();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var23 = new SpaceWar.SpacePanel();
    java.awt.Color var24 = var23.getBackground();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var22.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.Dimension var34 = var23.getPreferredSize();
    var15.setSize(var34);
    var0.setMaximumSize(var34);
    java.awt.image.BufferedImage var38 = var0.loadImg("hi!");
    var0.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test417");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    boolean var3 = var0.isPreferredSizeSet();
    var0.firePropertyChange("", (short)1, (short)0);
    boolean var8 = var0.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    var0.firePropertyChange("hi!", (-1), 499);
    boolean var14 = var0.isValidateRoot();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    java.awt.dnd.DropTarget var20 = var15.getDropTarget();
    var15.show(false);
    java.awt.Rectangle var23 = var15.getVisibleRect();
    java.awt.Toolkit var24 = var15.getToolkit();
    java.awt.event.MouseMotionListener[] var25 = var15.getMouseMotionListeners();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    float var27 = var26.getAlignmentX();
    var26.setVisible(false);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    java.awt.Color var31 = var30.getBackground();
    var26.setForeground(var31);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    java.awt.dnd.DropTarget var38 = var33.getDropTarget();
    var33.show(false);
    java.awt.Rectangle var41 = var33.getVisibleRect();
    var26.repaint(var41);
    java.awt.Component.BaselineResizeBehavior var43 = var26.getBaselineResizeBehavior();
    SpaceWar.SpacePanel var44 = new SpaceWar.SpacePanel();
    float var45 = var44.getAlignmentX();
    var44.setVisible(false);
    var44.nextFocus();
    var44.repaint(1L);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    var51.list();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    boolean var61 = var57.isDoubleBuffered();
    java.awt.dnd.DropTarget var62 = var57.getDropTarget();
    var57.show(false);
    java.awt.Rectangle var65 = var57.getVisibleRect();
    java.awt.Rectangle var66 = var51.getBounds(var65);
    var44.setBounds(var66);
    var26.paintImmediately(var66);
    var15.setBounds(var66);
    SpaceWar.SpacePanel var70 = new SpaceWar.SpacePanel();
    float var71 = var70.getAlignmentX();
    var70.setVisible(false);
    SpaceWar.SpacePanel var74 = new SpaceWar.SpacePanel();
    java.awt.Color var75 = var74.getBackground();
    var70.setForeground(var75);
    SpaceWar.SpacePanel var77 = new SpaceWar.SpacePanel();
    float var78 = var77.getAlignmentX();
    var77.setVisible(false);
    boolean var81 = var77.isDoubleBuffered();
    java.awt.dnd.DropTarget var82 = var77.getDropTarget();
    var77.show(false);
    java.awt.Rectangle var85 = var77.getVisibleRect();
    var70.repaint(var85);
    SpaceWar.SpacePanel var87 = new SpaceWar.SpacePanel();
    float var88 = var87.getAlignmentX();
    var87.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var93 = var87.getMouseListeners();
    java.awt.Dimension var94 = var87.getPreferredSize();
    java.util.Locale var95 = var87.getLocale();
    var70.setLocale(var95);
    javax.swing.JComponent.setDefaultLocale(var95);
    var0.add((java.awt.Component)var15, (java.lang.Object)var95);
    javax.swing.plaf.PanelUI var99 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test418");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    java.awt.Color var7 = var6.getBackground();
    var6.repaint();
    var6.setRequestFocusEnabled(false);
    var6.reshape(100, 0, 100, 0);
    var6.requestFocus();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var23 = var17.getUI();
    java.awt.im.InputMethodRequests var24 = var17.getInputMethodRequests();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.nextFocus();
    var25.updateUI();
    var25.enableInputMethods(true);
    var25.setSize((-1), 1);
    SpaceWar.SpacePanel var36 = new SpaceWar.SpacePanel();
    var36.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var17.add((java.awt.Component)var25, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    var42.setName("");
    java.awt.ComponentOrientation var45 = var42.getComponentOrientation();
    var17.applyComponentOrientation(var45);
    var6.setComponentOrientation(var45);
    var0.applyComponentOrientation(var45);
    boolean var49 = var0.isPaintingForPrint();
    boolean var50 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test419");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    javax.swing.TransferHandler var18 = var0.getTransferHandler();
    javax.swing.JToolTip var19 = var0.createToolTip();
    boolean var20 = var19.isValidateRoot();
    java.awt.Container var21 = var19.getParent();
    var19.setAlignmentX(1.0f);
    var19.firePropertyChange("hi!", 99, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test420");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    boolean var6 = var0.isShowing();
    boolean var7 = var0.isBackgroundSet();
    java.awt.im.InputContext var8 = var0.getInputContext();
    var0.firePropertyChange("hi!", (short)100, (short)1);
    boolean var13 = var0.isFocusable();
    java.awt.event.InputMethodListener[] var14 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test421");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    int var18 = var0.getHeight();
    var0.setLocation(2, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test422");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.requestFocus();
    boolean var6 = var0.isBackgroundSet();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    var7.setRequestFocusEnabled(false);
    var7.reshape(100, 0, 100, 0);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.setInheritsPopupMenu(false);
    boolean var23 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    var24.nextFocus();
    var24.reshape((-1), 1, (-1), 10);
    var24.disable();
    java.awt.LayoutManager var35 = var24.getLayout();
    var17.setLayout(var35);
    var0.add((java.awt.Component)var7, (java.lang.Object)var35);
    var7.hide();
    var7.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 241.4584513263457d, 323.62099822147866d);
    java.beans.PropertyChangeListener[] var44 = var7.getPropertyChangeListeners("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test423");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    java.awt.Color var9 = var8.getBackground();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    var10.updateUI();
    var10.enableInputMethods(true);
    var7.add((java.awt.Component)var8, (java.lang.Object)true);
    java.awt.Dimension var19 = var8.getPreferredSize();
    var0.setSize(var19);
    var0.updateUI();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    float var23 = var22.getAlignmentX();
    var22.setVisible(false);
    java.awt.Dimension var26 = var22.getPreferredSize();
    java.awt.Toolkit var27 = var22.getToolkit();
    boolean var28 = var22.isFocusable();
    javax.swing.KeyStroke[] var29 = var22.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    java.awt.Dimension var36 = var32.getPreferredSize();
    boolean var37 = var32.getVerifyInputWhenFocusTarget();
    java.awt.Component var40 = var32.findComponentAt(10, 1);
    var30.addKeyListener((java.awt.event.KeyListener)var32);
    var32.repaint(100, (-1), (-1), 1);
    boolean var47 = var22.isAncestorOf((java.awt.Component)var32);
    java.awt.Point var48 = var22.location();
    boolean var49 = var0.contains(var48);
    java.awt.Point var50 = var0.getMousePosition();
    java.awt.event.HierarchyBoundsListener[] var51 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test424");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    javax.swing.InputVerifier var85 = var0.getInputVerifier();
    var0.enable();
    int var87 = var0.getY();
    java.lang.String var88 = var0.getName();
    java.awt.Component var89 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test425");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    var0.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test426");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.repaint(1L);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    var7.nextFocus();
    var7.updateUI();
    var7.enableInputMethods(true);
    var7.enableInputMethods(true);
    var0.addKeyListener((java.awt.event.KeyListener)var7);
    java.awt.event.MouseMotionListener[] var18 = var0.getMouseMotionListeners();
    java.awt.Dimension var19 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test427");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.removeNotify();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.Component.BaselineResizeBehavior var4 = var0.getBaselineResizeBehavior();
    var0.setOpaque(true);
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.awt.Component[] var8 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test428");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    boolean var11 = var0.isFocusable();
    int var12 = var0.getHeight();
    javax.swing.InputVerifier var13 = var0.getInputVerifier();
    var0.doLayout();
    var0.transferFocus();
    var0.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test429");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    java.awt.Insets var20 = var11.getInsets();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var27 = var21.getMouseListeners();
    java.awt.Dimension var28 = var21.getPreferredSize();
    java.util.Locale var29 = var21.getLocale();
    var21.setFocusable(true);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var32.repaint();
    var32.setRequestFocusEnabled(false);
    var32.setIgnoreRepaint(false);
    java.lang.String var39 = var32.toString();
    java.awt.Color var40 = var32.getBackground();
    var11.putClientProperty((java.lang.Object)var21, (java.lang.Object)var32);
    var21.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var39.equals("SpaceWar.SpacePanel[,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test430");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    var8.list();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    var14.setVisible(false);
    boolean var18 = var14.isDoubleBuffered();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    var14.show(false);
    java.awt.Rectangle var22 = var14.getVisibleRect();
    java.awt.Rectangle var23 = var8.getBounds(var22);
    javax.swing.JToolTip var24 = var8.createToolTip();
    var0.removeKeyListener((java.awt.event.KeyListener)var8);
    var0.setFocusTraversalKeysEnabled(true);
    javax.swing.KeyStroke[] var28 = var0.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var29 = new SpaceWar.SpacePanel();
    float var30 = var29.getAlignmentX();
    var29.setVisible(false);
    java.awt.Dimension var33 = var29.getPreferredSize();
    java.awt.Toolkit var34 = var29.getToolkit();
    boolean var35 = var29.isFocusable();
    javax.swing.KeyStroke[] var36 = var29.getRegisteredKeyStrokes();
    java.awt.Component var39 = var29.getComponentAt(100, 100);
    java.lang.Object var40 = var29.getTreeLock();
    boolean var43 = var29.inside(400, 0);
    java.awt.event.MouseWheelListener[] var44 = var29.getMouseWheelListeners();
    var29.enableInputMethods(true);
    boolean var47 = var0.isAncestorOf((java.awt.Component)var29);
    javax.swing.InputVerifier var48 = var0.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test431");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    java.awt.Cursor var12 = var0.getCursor();
    java.awt.Dimension var13 = var0.getMinimumSize();
    var0.setEnabled(true);
    boolean var16 = var0.isFocusCycleRoot();
    java.awt.Font var17 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test432");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    boolean var7 = var0.requestFocusInWindow();
    float var8 = var0.getAlignmentY();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var9.repaint();
    java.awt.im.InputMethodRequests var12 = var9.getInputMethodRequests();
    int var13 = var9.countComponents();
    java.awt.event.ComponentListener[] var14 = var9.getComponentListeners();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.removeNotify();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    boolean var22 = var18.isDoubleBuffered();
    var18.list();
    float var24 = var18.getAlignmentY();
    java.awt.Insets var25 = var18.getInsets();
    java.awt.Insets var26 = var15.getInsets(var25);
    java.awt.Insets var27 = var9.getInsets(var26);
    javax.swing.JPopupMenu var28 = var9.getComponentPopupMenu();
    java.awt.image.BufferedImage var30 = var9.loadImg("PanelUI");
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    var31.nextFocus();
    var31.updateUI();
    var31.enableInputMethods(true);
    int var39 = var31.getY();
    boolean var40 = var31.isDisplayable();
    var0.add((java.awt.Component)var9, (java.lang.Object)var31);
    boolean var42 = var0.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test433");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    java.awt.Container var12 = var0.getParent();
    java.lang.String var13 = var0.getUIClassID();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var16 = var0.isRequestFocusEnabled();
    javax.swing.ActionMap var17 = var0.getActionMap();
    java.lang.Object var18 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test434");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    int var4 = var3.getType();
    double var5 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test435");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    boolean var2 = var0.hasFocus();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.reshape((-1), 1, (-1), 10);
    var3.disable();
    java.awt.LayoutManager var14 = var3.getLayout();
    var3.setVisible(false);
    var0.remove((java.awt.Component)var3);
    var3.repaint();
    boolean var19 = var3.isLightweight();
    int var20 = var3.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test436");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    boolean var14 = var0.contains((-1), 0);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    var15.nextFocus();
    var15.updateUI();
    var15.enableInputMethods(true);
    var15.setSize((-1), 1);
    java.awt.Component var26 = var0.add((java.awt.Component)var15);
    var15.nextFocus();
    var15.updateUI();
    int var29 = var15.getWidth();
    boolean var30 = var15.isFontSet();
    var15.setFocusCycleRoot(true);
    java.awt.Point var33 = var15.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test437");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setFiring(true);
    boolean var4 = var0.isDead();
    var0.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test438");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.lang.String var8 = var0.toString();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    java.awt.dnd.DropTarget var14 = var9.getDropTarget();
    var9.show(false);
    java.awt.Rectangle var17 = var9.getVisibleRect();
    java.awt.image.BufferedImage var19 = var9.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    boolean var21 = var9.isPaintingTile();
    boolean var22 = var9.isOptimizedDrawingEnabled();
    int var23 = var0.getComponentZOrder((java.awt.Component)var9);
    javax.swing.JRootPane var24 = var0.getRootPane();
    boolean var25 = var0.isMaximumSizeSet();
    boolean var26 = var0.isVisible();
    java.awt.event.ContainerListener[] var27 = var0.getContainerListeners();
    var0.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var8.equals("SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test439");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    java.lang.String var2 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(500);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var2,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var2.equals("SpaceWar.SpacePanel[,0,0,0var2,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test440");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    var19.firePropertyChange("", 1L, 1L);
    var19.setVerifyInputWhenFocusTarget(true);
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '4', '4');
    java.awt.Point var37 = var19.getLocation();
    var19.transferFocusUpCycle();
    java.awt.Cursor var39 = var19.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test441");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    var0.setUp(false);
    int var9 = var0.getScore();
    int var10 = var0.getX();
    int var11 = var0.getRequiredPower();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 400);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test442");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.LayoutManager var11 = var0.getLayout();
    var0.transferFocusDownCycle();
    boolean var15 = var0.inside(400, 24);
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test443");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    boolean var7 = var0.requestDefaultFocus();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var14 = var8.getMouseListeners();
    int var15 = var8.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    boolean var20 = var16.isDoubleBuffered();
    java.awt.dnd.DropTarget var21 = var16.getDropTarget();
    var16.show(false);
    java.awt.Rectangle var24 = var16.getVisibleRect();
    var8.paintImmediately(var24);
    var8.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", '#', '#');
    var8.list();
    java.awt.Rectangle var31 = var8.getBounds();
    var0.scrollRectToVisible(var31);
    SpaceWar.Player var33 = new SpaceWar.Player();
    boolean var34 = var33.isRecovering();
    var33.setRigth(false);
    int var37 = var33.getPowerLevel();
    var33.increasePower((-1));
    java.lang.Object var40 = var0.getClientProperty((java.lang.Object)(-1));
    boolean var41 = var0.hasFocus();
    java.awt.Image var44 = var0.createImage((-1), 99);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test444");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.event.KeyListener[] var25 = var0.getKeyListeners();
    java.awt.FocusTraversalPolicy var26 = var0.getFocusTraversalPolicy();
    java.awt.Component var29 = var0.locate(3, 100);
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    var33.nextFocus();
    var33.updateUI();
    var33.enableInputMethods(true);
    var30.add((java.awt.Component)var31, (java.lang.Object)true);
    java.awt.Image var44 = var31.createImage(1, (-1));
    java.awt.event.MouseListener[] var45 = var31.getMouseListeners();
    java.awt.Color var46 = var31.getBackground();
    boolean var47 = var31.getIgnoreRepaint();
    var31.enable();
    var31.repaint();
    java.lang.Object var50 = var0.getClientProperty((java.lang.Object)var31);
    java.awt.event.ComponentListener[] var51 = var31.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test445");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    boolean var8 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var15 = var9.getMouseListeners();
    int var16 = var9.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var17 = var9.getInputMethodRequests();
    var0.addKeyListener((java.awt.event.KeyListener)var9);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    var19.list();
    float var25 = var19.getAlignmentY();
    boolean var26 = var9.isFocusCycleRoot((java.awt.Container)var19);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    var28.nextFocus();
    var28.updateUI();
    java.awt.Component var34 = var9.add("", (java.awt.Component)var28);
    boolean var36 = var28.areFocusTraversalKeysSet(3);
    java.awt.Container var37 = var28.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test446");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    int var3 = var2.getR();
    var2.explode();
    var2.update();
    var2.explode();
    boolean var7 = var2.isDead();
    int var8 = var2.getR();
    boolean var9 = var2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test447");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    SpaceWar.SpacePanel var2 = new SpaceWar.SpacePanel();
    float var3 = var2.getAlignmentX();
    var2.setVisible(false);
    java.awt.Dimension var6 = var2.getPreferredSize();
    boolean var7 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Component var10 = var2.findComponentAt(10, 1);
    var0.addKeyListener((java.awt.event.KeyListener)var2);
    boolean var12 = var2.getFocusTraversalKeysEnabled();
    var2.requestFocus();
    java.lang.String var14 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test448");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.list();
    java.awt.Dimension var5 = var0.minimumSize();
    boolean var6 = var0.isOpaque();
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    java.awt.Color var8 = var7.getBackground();
    var7.repaint();
    java.awt.im.InputMethodRequests var10 = var7.getInputMethodRequests();
    var7.setDoubleBuffered(true);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    boolean var15 = var13.hasFocus();
    java.awt.Insets var16 = var13.getInsets();
    java.awt.Insets var17 = var7.getInsets(var16);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    java.awt.Color var19 = var18.getBackground();
    var18.repaint();
    java.awt.im.InputMethodRequests var21 = var18.getInputMethodRequests();
    var18.setDoubleBuffered(true);
    var18.setInheritsPopupMenu(false);
    boolean var26 = var18.isFocusTraversalPolicySet();
    var18.transferFocusUpCycle();
    java.awt.image.BufferedImage var29 = var18.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var30 = new SpaceWar.SpacePanel();
    float var31 = var30.getAlignmentX();
    var30.setVisible(false);
    var30.setInheritsPopupMenu(false);
    boolean var36 = var30.isDoubleBuffered();
    boolean var37 = var30.isMinimumSizeSet();
    java.awt.Font var38 = var30.getFont();
    java.awt.FontMetrics var39 = var18.getFontMetrics(var38);
    java.awt.FontMetrics var40 = var7.getFontMetrics(var38);
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    java.awt.Color var42 = var41.getBackground();
    var41.repaint();
    java.awt.im.InputMethodRequests var44 = var41.getInputMethodRequests();
    int var45 = var41.countComponents();
    java.awt.Dimension var46 = var41.getSize();
    var7.setMinimumSize(var46);
    var0.setMinimumSize(var46);
    var0.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test449");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    java.awt.Graphics var9 = var0.getGraphics();
    java.awt.Container var10 = var0.getTopLevelAncestor();
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.setVisible(false);
    var11.nextFocus();
    var11.reshape((-1), 1, (-1), 10);
    var11.disable();
    java.awt.LayoutManager var22 = var11.getLayout();
    var11.setVisible(false);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.setInheritsPopupMenu(false);
    boolean var31 = var25.isDoubleBuffered();
    boolean var32 = var25.isMinimumSizeSet();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    var33.setMaximumSize(var43);
    boolean var45 = var33.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var46 = var33.getAccessibleContext();
    boolean var47 = var33.isDoubleBuffered();
    java.awt.Rectangle var48 = var33.getVisibleRect();
    var25.setBounds(var48);
    var11.computeVisibleRect(var48);
    javax.swing.ActionMap var51 = var11.getActionMap();
    var0.setActionMap(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test450");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var18 = var0.getInputMethodRequests();
    var0.layout();
    java.awt.Point var20 = var0.getMousePosition();
    java.awt.Graphics var21 = var0.getGraphics();
    boolean var22 = var0.isManagingFocus();
    java.awt.event.MouseMotionListener[] var23 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test451");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setEnabled(false);
    java.awt.Image var8 = var0.createImage(10, 100);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var0.setForeground(var10);
    var0.setFocusTraversalPolicyProvider(true);
    java.util.Set var15 = var0.getFocusTraversalKeys(2);
    boolean var16 = var0.getFocusTraversalKeysEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var18 = var0.getComponent(500);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test452");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Container var8 = var0.getFocusCycleRootAncestor();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test453");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    var0.setAutoscrolls(false);
    boolean var8 = var0.isFocusTraversable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(99);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test454");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.move(10, 10);
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.removeAll();
    var0.setInheritsPopupMenu(true);
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    boolean var18 = var16.hasFocus();
    java.awt.Insets var19 = var16.getInsets();
    java.awt.Rectangle var20 = var16.bounds();
    java.awt.Rectangle var21 = var0.getBounds(var20);
    boolean var22 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test455");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    java.awt.Dimension var8 = var0.minimumSize();
    java.awt.Dimension var9 = var0.preferredSize();
    java.awt.Component[] var10 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test456");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.setIgnoreRepaint(false);
    java.lang.String var7 = var0.toString();
    java.awt.Color var8 = var0.getBackground();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    java.awt.Dimension var13 = var9.getPreferredSize();
    java.awt.Toolkit var14 = var9.getToolkit();
    java.awt.Toolkit var15 = var9.getToolkit();
    SpaceWar.Player var16 = new SpaceWar.Player();
    var16.increasePower(25);
    int var19 = var16.getScore();
    var16.setRigth(true);
    var16.loseLife();
    var0.putClientProperty((java.lang.Object)var9, (java.lang.Object)var16);
    boolean var24 = var16.isRecovering();
    boolean var25 = var16.isDead();
    int var26 = var16.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var7.equals("SpaceWar.SpacePanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 500);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test457");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    boolean var13 = var1.areFocusTraversalKeysSet(0);
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    java.awt.Color var16 = var15.getBackground();
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    var17.nextFocus();
    var17.updateUI();
    var17.enableInputMethods(true);
    var14.add((java.awt.Component)var15, (java.lang.Object)true);
    boolean var26 = var14.isMinimumSizeSet();
    java.awt.event.HierarchyListener[] var27 = var14.getHierarchyListeners();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    java.awt.Color var33 = var32.getBackground();
    var28.setForeground(var33);
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    boolean var39 = var35.isDoubleBuffered();
    java.awt.dnd.DropTarget var40 = var35.getDropTarget();
    var35.show(false);
    java.awt.Rectangle var43 = var35.getVisibleRect();
    var28.repaint(var43);
    java.awt.FocusTraversalPolicy var45 = var28.getFocusTraversalPolicy();
    java.awt.im.InputMethodRequests var46 = var28.getInputMethodRequests();
    var28.layout();
    boolean var48 = var28.isFocusTraversalPolicyProvider();
    java.lang.Object var49 = var14.getClientProperty((java.lang.Object)var48);
    boolean var50 = var14.isFocusTraversable();
    var1.remove((java.awt.Component)var14);
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    java.awt.Color var53 = var52.getBackground();
    var52.repaint();
    var52.setRequestFocusEnabled(false);
    var52.reshape(100, 0, 100, 0);
    var52.requestFocus();
    java.awt.Rectangle var63 = var52.getVisibleRect();
    var14.repaint(var63);
    SpaceWar.SpacePanel var65 = new SpaceWar.SpacePanel();
    float var66 = var65.getAlignmentX();
    var65.setVisible(false);
    SpaceWar.SpacePanel var69 = new SpaceWar.SpacePanel();
    java.awt.Color var70 = var69.getBackground();
    var65.setForeground(var70);
    SpaceWar.SpacePanel var72 = new SpaceWar.SpacePanel();
    float var73 = var72.getAlignmentX();
    var72.setVisible(false);
    boolean var76 = var72.isDoubleBuffered();
    java.awt.dnd.DropTarget var77 = var72.getDropTarget();
    var72.show(false);
    java.awt.Rectangle var80 = var72.getVisibleRect();
    var65.repaint(var80);
    java.awt.Component.BaselineResizeBehavior var82 = var65.getBaselineResizeBehavior();
    var65.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1L, 1L);
    boolean var87 = var65.isFocusTraversable();
    boolean var88 = var14.isAncestorOf((java.awt.Component)var65);
    javax.swing.JRootPane var89 = var14.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test458");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(100.0d, 1, 3);
    double var4 = var3.getX();
    double var5 = var3.getY();
    boolean var6 = var3.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test459");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseMotionListener[] var6 = var0.getMouseMotionListeners();
    java.awt.event.ComponentListener[] var7 = var0.getComponentListeners();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.repaint(1L);
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    boolean var19 = var15.isDoubleBuffered();
    var15.list();
    SpaceWar.SpacePanel var21 = new SpaceWar.SpacePanel();
    float var22 = var21.getAlignmentX();
    var21.setVisible(false);
    boolean var25 = var21.isDoubleBuffered();
    java.awt.dnd.DropTarget var26 = var21.getDropTarget();
    var21.show(false);
    java.awt.Rectangle var29 = var21.getVisibleRect();
    java.awt.Rectangle var30 = var15.getBounds(var29);
    var8.setBounds(var30);
    var0.paintImmediately(var30);
    java.awt.Point var33 = var0.getMousePosition();
    java.awt.image.BufferedImage var35 = var0.loadImg("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 3, 100);
    java.awt.ComponentOrientation var40 = var0.getComponentOrientation();
    var0.setAlignmentY(10.0f);
    SpaceWar.SpacePanel var43 = new SpaceWar.SpacePanel();
    float var44 = var43.getAlignmentX();
    var43.setVisible(false);
    var43.nextFocus();
    var43.updateUI();
    var43.enableInputMethods(true);
    java.awt.Point var52 = var43.getMousePosition(false);
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    var53.list();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    boolean var63 = var59.isDoubleBuffered();
    java.awt.dnd.DropTarget var64 = var59.getDropTarget();
    var59.show(false);
    java.awt.Rectangle var67 = var59.getVisibleRect();
    java.awt.Rectangle var68 = var53.getBounds(var67);
    var43.scrollRectToVisible(var67);
    java.awt.Rectangle var70 = var0.getBounds(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test460");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var6 = var0.getUI();
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    var8.nextFocus();
    var8.updateUI();
    var8.enableInputMethods(true);
    var8.setSize((-1), 1);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    var19.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var0.add((java.awt.Component)var8, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var25 = var8.getComponentOrientation();
    java.beans.VetoableChangeListener[] var26 = var8.getVetoableChangeListeners();
    java.awt.dnd.DropTarget var27 = var8.getDropTarget();
    var8.repaint(3, 499, 400, 1);
    var8.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test461");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    var0.setSize((-1), 1);
    boolean var13 = var0.contains(1, 1);
    java.awt.Dimension var14 = var0.getMinimumSize();
    java.beans.PropertyChangeListener[] var16 = var0.getPropertyChangeListeners("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test462");


    SpaceWar.PowerUp var3 = new SpaceWar.PowerUp(100, (-1.0d), 0.0d);
    double var4 = var3.getR();
    double var5 = var3.getY();
    double var6 = var3.getY();
    int var7 = var3.getType();
    double var8 = var3.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test463");


    SpaceWar.Explosion var4 = new SpaceWar.Explosion(370.2289277239558d, (-1.0d), 24, 0);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test464");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    boolean var5 = var0.getVerifyInputWhenFocusTarget();
    java.awt.Component var8 = var0.findComponentAt(10, 1);
    boolean var9 = var0.requestDefaultFocus();
    java.awt.Insets var10 = var0.getInsets();
    var0.setDoubleBuffered(false);
    java.awt.Point var14 = var0.getMousePosition(true);
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test465");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.lang.String var8 = var0.toString();
    java.awt.FocusTraversalPolicy var9 = var0.getFocusTraversalPolicy();
    var0.setLocation(0, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"+ "'", var8.equals("SpaceWar.SpacePanel[,0,0,0var8,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test466");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    java.awt.Dimension var10 = var6.getPreferredSize();
    var0.setMaximumSize(var10);
    boolean var12 = var0.getVerifyInputWhenFocusTarget();
    int var13 = var0.getX();
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    float var15 = var14.getAlignmentX();
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    float var17 = var16.getAlignmentX();
    var16.setVisible(false);
    java.awt.Dimension var20 = var16.getPreferredSize();
    boolean var21 = var16.getVerifyInputWhenFocusTarget();
    java.awt.Component var24 = var16.findComponentAt(10, 1);
    var14.addKeyListener((java.awt.event.KeyListener)var16);
    var16.repaint(100, (-1), (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    java.awt.Color var32 = var31.getBackground();
    var31.repaint();
    java.awt.im.InputMethodRequests var34 = var31.getInputMethodRequests();
    java.awt.GraphicsConfiguration var35 = var31.getGraphicsConfiguration();
    var16.remove((java.awt.Component)var31);
    java.awt.Font var37 = var31.getFont();
    var0.setFont(var37);
    boolean var39 = var0.isManagingFocus();
    SpaceWar.SpacePanel var40 = new SpaceWar.SpacePanel();
    float var41 = var40.getAlignmentX();
    var40.setVisible(false);
    var40.nextFocus();
    var40.requestFocus();
    java.lang.Object var46 = var0.getClientProperty((java.lang.Object)var40);
    java.lang.Object var47 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test467");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var23 = var17.getMouseListeners();
    int var24 = var17.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var25 = var17.getInputMethodRequests();
    java.awt.Point var26 = var17.getMousePosition();
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    var27.setInheritsPopupMenu(false);
    boolean var33 = var27.isDoubleBuffered();
    boolean var34 = var27.isMinimumSizeSet();
    java.awt.Font var35 = var27.getFont();
    var17.setFont(var35);
    java.awt.FontMetrics var37 = var1.getFontMetrics(var35);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    java.awt.Dimension var42 = var38.getPreferredSize();
    java.awt.Toolkit var43 = var38.getToolkit();
    boolean var44 = var38.isFocusable();
    javax.swing.KeyStroke[] var45 = var38.getRegisteredKeyStrokes();
    java.awt.Component var48 = var38.getComponentAt(100, 100);
    java.lang.Object var49 = var38.getTreeLock();
    boolean var52 = var38.inside(400, 0);
    java.awt.event.MouseWheelListener[] var53 = var38.getMouseWheelListeners();
    var38.requestFocus();
    SpaceWar.SpacePanel var55 = new SpaceWar.SpacePanel();
    java.awt.Color var56 = var55.getBackground();
    var55.repaint();
    java.awt.im.InputMethodRequests var58 = var55.getInputMethodRequests();
    var55.setDoubleBuffered(true);
    var55.setInheritsPopupMenu(false);
    boolean var63 = var55.isFocusTraversalPolicySet();
    var55.transferFocusUpCycle();
    java.awt.image.BufferedImage var66 = var55.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.setVisible(false);
    var67.setInheritsPopupMenu(false);
    boolean var73 = var67.isDoubleBuffered();
    boolean var74 = var67.isMinimumSizeSet();
    java.awt.Font var75 = var67.getFont();
    java.awt.FontMetrics var76 = var55.getFontMetrics(var75);
    var38.setFont(var75);
    java.awt.FontMetrics var78 = var1.getFontMetrics(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test468");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.loseLife();
    int var3 = var0.getR();
    var0.loseLife();
    int var5 = var0.getY();
    boolean var6 = var0.isRecovering();
    var0.setDown(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test469");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    boolean var7 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test470");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    SpaceWar.Enemy var17 = new SpaceWar.Enemy(0, 100);
    int var18 = var17.getR();
    var17.explode();
    var0.putClientProperty((java.lang.Object)var17, (java.lang.Object)(short)10);
    boolean var23 = var0.requestFocus(false);
    java.awt.Component var24 = var0.getNextFocusableComponent();
    SpaceWar.SpacePanel var26 = new SpaceWar.SpacePanel();
    java.awt.Color var27 = var26.getBackground();
    var26.repaint();
    var26.setRequestFocusEnabled(false);
    var26.removeAll();
    SpaceWar.SpacePanel var32 = new SpaceWar.SpacePanel();
    float var33 = var32.getAlignmentX();
    var32.setVisible(false);
    boolean var36 = var32.isDoubleBuffered();
    java.awt.dnd.DropTarget var37 = var32.getDropTarget();
    var32.show(false);
    boolean var40 = var32.isPaintingForPrint();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var47 = var41.getMouseListeners();
    int var48 = var41.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var49 = var41.getInputMethodRequests();
    var32.addKeyListener((java.awt.event.KeyListener)var41);
    SpaceWar.SpacePanel var51 = new SpaceWar.SpacePanel();
    float var52 = var51.getAlignmentX();
    var51.setVisible(false);
    boolean var55 = var51.isDoubleBuffered();
    var51.list();
    float var57 = var51.getAlignmentY();
    boolean var58 = var41.isFocusCycleRoot((java.awt.Container)var51);
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    var60.nextFocus();
    var60.updateUI();
    java.awt.Component var66 = var41.add("", (java.awt.Component)var60);
    boolean var67 = var26.isAncestorOf((java.awt.Component)var60);
    java.awt.Component var68 = var0.add("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]", (java.awt.Component)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test471");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var0.firePropertyChange("", false, false);
    boolean var21 = var0.isFocusTraversalPolicySet();
    var0.repaint(1L);
    java.awt.Dimension var24 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test472");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    var0.list();
    int var5 = var0.getHeight();
    var0.disable();
    var0.setFocusCycleRoot(true);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    boolean var13 = var9.isDoubleBuffered();
    java.awt.dnd.DropTarget var14 = var9.getDropTarget();
    var9.show(false);
    boolean var17 = var9.isPaintingForPrint();
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var24 = var18.getMouseListeners();
    int var25 = var18.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var26 = var18.getInputMethodRequests();
    var9.addKeyListener((java.awt.event.KeyListener)var18);
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.setVisible(false);
    boolean var32 = var28.isDoubleBuffered();
    var28.list();
    float var34 = var28.getAlignmentY();
    boolean var35 = var18.isFocusCycleRoot((java.awt.Container)var28);
    var28.firePropertyChange("", 1L, 1L);
    var28.setAutoscrolls(false);
    var28.reshape(0, 1, 100, 100);
    boolean var47 = var28.isFocusTraversalPolicySet();
    java.awt.Container var48 = var28.getFocusCycleRootAncestor();
    var0.setComponentZOrder((java.awt.Component)var28, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test473");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    int var4 = var0.getPowerLevel();
    var0.setUp(false);
    int var7 = var0.getPowerLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test474");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.image.BufferedImage var16 = var6.loadImg("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var17 = var0.isAncestorOf((java.awt.Component)var6);
    java.awt.GraphicsConfiguration var18 = var6.getGraphicsConfiguration();
    java.awt.Font var19 = var6.getFont();
    javax.swing.InputMap var20 = var6.getInputMap();
    java.lang.String var21 = var6.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test475");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    boolean var6 = var0.isFocusCycleRoot();
    var0.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 100, 0);
    SpaceWar.SpacePanel var11 = new SpaceWar.SpacePanel();
    float var12 = var11.getAlignmentX();
    var11.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var17 = var11.getUI();
    var0.add((java.awt.Component)var11, (java.lang.Object)(short)0);
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    javax.swing.plaf.PanelUI var40 = var20.getUI();
    SpaceWar.SpacePanel var41 = new SpaceWar.SpacePanel();
    float var42 = var41.getAlignmentX();
    var41.setVisible(false);
    SpaceWar.SpacePanel var45 = new SpaceWar.SpacePanel();
    java.awt.Color var46 = var45.getBackground();
    var41.setForeground(var46);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.setVisible(false);
    boolean var52 = var48.isDoubleBuffered();
    java.awt.dnd.DropTarget var53 = var48.getDropTarget();
    var48.show(false);
    java.awt.Rectangle var56 = var48.getVisibleRect();
    var41.repaint(var56);
    java.awt.FocusTraversalPolicy var58 = var41.getFocusTraversalPolicy();
    var41.resetKeyboardActions();
    SpaceWar.SpacePanel var60 = new SpaceWar.SpacePanel();
    float var61 = var60.getAlignmentX();
    var60.setVisible(false);
    boolean var64 = var60.isDoubleBuffered();
    java.awt.dnd.DropTarget var65 = var60.getDropTarget();
    var60.show(false);
    java.awt.Rectangle var68 = var60.getVisibleRect();
    var41.computeVisibleRect(var68);
    javax.swing.ActionMap var70 = var41.getActionMap();
    var20.setActionMap(var70);
    java.awt.Point var72 = var20.getMousePosition();
    int var73 = var11.getComponentZOrder((java.awt.Component)var20);
    var11.disable();
    java.lang.String var75 = var11.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test476");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    float var6 = var0.getAlignmentY();
    boolean var7 = var0.isOpaque();
    var0.nextFocus();
    java.awt.Component var9 = var0.getNextFocusableComponent();
    boolean var10 = var0.isMaximumSizeSet();
    java.awt.peer.ComponentPeer var11 = var0.getPeer();
    java.awt.Color var12 = var0.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test477");


    SpaceWar.Player var0 = new SpaceWar.Player();
    int var1 = var0.getPower();
    var0.setLeft(true);
    var0.increasePower(0);
    int var6 = var0.getR();
    int var7 = var0.getLives();
    var0.loseLife();
    int var9 = var0.getScore();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test478");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.updateUI();
    var0.enableInputMethods(true);
    java.awt.Point var8 = var0.location();
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    float var10 = var9.getAlignmentX();
    var9.setVisible(false);
    var9.nextFocus();
    java.awt.Component var14 = var0.add((java.awt.Component)var9);
    boolean var15 = var0.isRequestFocusEnabled();
    var0.setFocusCycleRoot(false);
    SpaceWar.SpacePanel var18 = new SpaceWar.SpacePanel();
    float var19 = var18.getAlignmentX();
    var18.setVisible(false);
    var18.nextFocus();
    var18.repaint(1L);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    var18.setPreferredSize(var35);
    javax.swing.plaf.PanelUI var38 = var18.getUI();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    var39.nextFocus();
    var39.reshape((-1), 1, (-1), 10);
    var39.disable();
    java.awt.LayoutManager var50 = var39.getLayout();
    java.awt.Container var51 = var39.getParent();
    java.lang.String var52 = var39.getUIClassID();
    SpaceWar.Enemy var55 = new SpaceWar.Enemy(0, 10);
    var18.add((java.awt.Component)var39, (java.lang.Object)10);
    javax.swing.JToolTip var57 = var18.createToolTip();
    java.awt.Component var58 = var0.add((java.awt.Component)var57);
    boolean var59 = var57.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PanelUI"+ "'", var52.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test479");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    var0.setFocusTraversalPolicyProvider(true);
    boolean var10 = var0.inside(25, 3);
    java.awt.Container var11 = var0.getFocusCycleRootAncestor();
    var0.enable(true);
    var0.paintImmediately(100, 0, 100, 399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test480");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.list();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    float var7 = var6.getAlignmentX();
    var6.setVisible(false);
    boolean var10 = var6.isDoubleBuffered();
    java.awt.dnd.DropTarget var11 = var6.getDropTarget();
    var6.show(false);
    java.awt.Rectangle var14 = var6.getVisibleRect();
    java.awt.Rectangle var15 = var0.getBounds(var14);
    javax.swing.JToolTip var16 = var0.createToolTip();
    boolean var17 = var16.getInheritsPopupMenu();
    var16.layout();
    var16.invalidate();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    java.awt.Color var25 = var24.getBackground();
    var20.setForeground(var25);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.setVisible(false);
    boolean var31 = var27.isDoubleBuffered();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    var27.show(false);
    java.awt.Rectangle var35 = var27.getVisibleRect();
    var20.repaint(var35);
    java.awt.FocusTraversalPolicy var37 = var20.getFocusTraversalPolicy();
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var44 = var38.getUI();
    java.awt.im.InputMethodRequests var45 = var38.getInputMethodRequests();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    float var47 = var46.getAlignmentX();
    var46.setVisible(false);
    var46.nextFocus();
    var46.updateUI();
    var46.enableInputMethods(true);
    var46.setSize((-1), 1);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    var57.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var38.add((java.awt.Component)var46, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    java.awt.ComponentOrientation var63 = var46.getComponentOrientation();
    java.beans.VetoableChangeListener[] var64 = var46.getVetoableChangeListeners();
    int var65 = var46.getHeight();
    javax.swing.ActionMap var66 = var46.getActionMap();
    var20.setActionMap(var66);
    java.awt.Font var68 = var20.getFont();
    java.awt.FontMetrics var69 = var16.getFontMetrics(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test481");


    SpaceWar.Player var0 = new SpaceWar.Player();
    boolean var1 = var0.isRecovering();
    var0.setRigth(false);
    var0.setScore(0);
    var0.loseLife();
    int var7 = var0.getR();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 25);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test482");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    int var7 = var0.getDebugGraphicsOptions();
    SpaceWar.SpacePanel var8 = new SpaceWar.SpacePanel();
    float var9 = var8.getAlignmentX();
    var8.setVisible(false);
    boolean var12 = var8.isDoubleBuffered();
    java.awt.dnd.DropTarget var13 = var8.getDropTarget();
    var8.show(false);
    java.awt.Rectangle var16 = var8.getVisibleRect();
    var0.paintImmediately(var16);
    java.awt.Rectangle var18 = var0.getBounds();
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    float var20 = var19.getAlignmentX();
    var19.setVisible(false);
    boolean var23 = var19.isDoubleBuffered();
    java.awt.dnd.DropTarget var24 = var19.getDropTarget();
    var19.show(false);
    boolean var27 = var19.isPaintingForPrint();
    SpaceWar.SpacePanel var28 = new SpaceWar.SpacePanel();
    float var29 = var28.getAlignmentX();
    var28.firePropertyChange("", (-1), 1);
    java.awt.event.MouseListener[] var34 = var28.getMouseListeners();
    int var35 = var28.getDebugGraphicsOptions();
    java.awt.im.InputMethodRequests var36 = var28.getInputMethodRequests();
    var19.addKeyListener((java.awt.event.KeyListener)var28);
    SpaceWar.SpacePanel var38 = new SpaceWar.SpacePanel();
    float var39 = var38.getAlignmentX();
    var38.setVisible(false);
    boolean var42 = var38.isDoubleBuffered();
    var38.list();
    float var44 = var38.getAlignmentY();
    boolean var45 = var28.isFocusCycleRoot((java.awt.Container)var38);
    boolean var46 = var38.isEnabled();
    java.awt.Dimension var47 = var38.getMaximumSize();
    var38.setFocusCycleRoot(false);
    java.awt.event.ComponentListener[] var50 = var38.getComponentListeners();
    boolean var51 = var38.isFocusCycleRoot();
    var38.show();
    SpaceWar.SpacePanel var53 = new SpaceWar.SpacePanel();
    float var54 = var53.getAlignmentX();
    var53.setVisible(false);
    boolean var57 = var53.isDoubleBuffered();
    var53.list();
    SpaceWar.SpacePanel var59 = new SpaceWar.SpacePanel();
    float var60 = var59.getAlignmentX();
    var59.setVisible(false);
    boolean var63 = var59.isDoubleBuffered();
    java.awt.dnd.DropTarget var64 = var59.getDropTarget();
    var59.show(false);
    java.awt.Rectangle var67 = var59.getVisibleRect();
    java.awt.Rectangle var68 = var53.getBounds(var67);
    javax.swing.JToolTip var69 = var53.createToolTip();
    var53.firePropertyChange("", false, false);
    var53.revalidate();
    int var75 = var53.getComponentCount();
    var0.add((java.awt.Component)var38, (java.lang.Object)var75);
    boolean var77 = var0.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test483");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    java.awt.Image var19 = var0.createImage((-1), (-1));
    java.awt.event.ComponentListener[] var20 = var0.getComponentListeners();
    var0.setName("PanelUI");
    var0.requestFocus();
    java.awt.Rectangle var24 = var0.getVisibleRect();
    java.awt.Rectangle var25 = var0.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test484");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    var0.setRequestFocusEnabled(false);
    var0.reshape(100, 0, 100, 0);
    var0.requestFocus();
    var0.firePropertyChange("hi!", '4', ' ');
    java.awt.Point var15 = var0.getLocation();
    java.awt.Dimension var16 = var0.size();
    boolean var17 = var0.isDoubleBuffered();
    var0.reshape(0, 3, 25, 3);
    java.awt.Font var23 = var0.getFont();
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test485");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.setInheritsPopupMenu(false);
    boolean var6 = var0.isDoubleBuffered();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    var0.setSize(400, (-1));
    var0.setInheritsPopupMenu(true);
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    var13.setInheritsPopupMenu(false);
    var13.setFocusTraversalPolicyProvider(true);
    boolean var23 = var13.inside(25, 3);
    SpaceWar.SpacePanel var24 = new SpaceWar.SpacePanel();
    float var25 = var24.getAlignmentX();
    var24.setVisible(false);
    boolean var28 = var24.isDoubleBuffered();
    java.awt.dnd.DropTarget var29 = var24.getDropTarget();
    var24.show(false);
    boolean var32 = var24.isPaintingForPrint();
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    SpaceWar.SpacePanel var35 = new SpaceWar.SpacePanel();
    float var36 = var35.getAlignmentX();
    var35.setVisible(false);
    java.awt.Dimension var39 = var35.getPreferredSize();
    boolean var40 = var35.getVerifyInputWhenFocusTarget();
    java.awt.Component var43 = var35.findComponentAt(10, 1);
    var33.addKeyListener((java.awt.event.KeyListener)var35);
    java.awt.Dimension var45 = var35.getMinimumSize();
    var24.setMinimumSize(var45);
    var13.setPreferredSize(var45);
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    float var49 = var48.getAlignmentX();
    var48.firePropertyChange("", (-1), 1);
    javax.swing.plaf.PanelUI var54 = var48.getUI();
    java.awt.im.InputMethodRequests var55 = var48.getInputMethodRequests();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.updateUI();
    var56.enableInputMethods(true);
    var56.setSize((-1), 1);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    var67.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    var48.add((java.awt.Component)var56, (java.lang.Object)"SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    var73.setName("");
    java.awt.ComponentOrientation var76 = var73.getComponentOrientation();
    var48.applyComponentOrientation(var76);
    var13.setComponentOrientation(var76);
    java.awt.peer.ComponentPeer var79 = var13.getPeer();
    java.awt.Rectangle var80 = var13.getBounds();
    var0.computeVisibleRect(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test486");


    SpaceWar.Bullet var3 = new SpaceWar.Bullet(25.0d, 499, 499);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test487");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    boolean var4 = var0.inside(0, (-1));
    SpaceWar.SpacePanel var5 = new SpaceWar.SpacePanel();
    float var6 = var5.getAlignmentX();
    var5.setVisible(false);
    SpaceWar.SpacePanel var9 = new SpaceWar.SpacePanel();
    java.awt.Color var10 = var9.getBackground();
    var5.setForeground(var10);
    var0.setForeground(var10);
    java.awt.image.VolatileImage var15 = var0.createVolatileImage(400, (-1));
    SpaceWar.SpacePanel var16 = new SpaceWar.SpacePanel();
    java.awt.Color var17 = var16.getBackground();
    boolean var20 = var16.inside(0, (-1));
    var16.transferFocusUpCycle();
    java.awt.Container var22 = var16.getParent();
    boolean var23 = var16.isMaximumSizeSet();
    var16.firePropertyChange("hi!", 594.7973940347722d, 5.0d);
    java.awt.Component var30 = var16.getComponentAt(25, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var32 = var0.add((java.awt.Component)var16, 25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test488");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.layout();
    java.beans.VetoableChangeListener[] var6 = var0.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test489");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.nextFocus();
    var0.reshape((-1), 1, (-1), 10);
    var0.disable();
    java.awt.Component var13 = var0.findComponentAt(0, (-1));
    SpaceWar.SpacePanel var14 = new SpaceWar.SpacePanel();
    var14.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", false, false);
    javax.swing.plaf.PanelUI var19 = var14.getUI();
    SpaceWar.SpacePanel var20 = new SpaceWar.SpacePanel();
    float var21 = var20.getAlignmentX();
    var20.setVisible(false);
    var20.nextFocus();
    var20.repaint(1L);
    SpaceWar.SpacePanel var27 = new SpaceWar.SpacePanel();
    float var28 = var27.getAlignmentX();
    var27.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    java.awt.Dimension var37 = var33.getPreferredSize();
    var27.setMaximumSize(var37);
    var20.setPreferredSize(var37);
    var14.setMaximumSize(var37);
    var0.setSize(var37);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    boolean var44 = var42.hasFocus();
    boolean var45 = var42.isPreferredSizeSet();
    SpaceWar.SpacePanel var46 = new SpaceWar.SpacePanel();
    java.awt.Color var47 = var46.getBackground();
    var46.repaint();
    var46.setRequestFocusEnabled(false);
    int var51 = var42.getComponentZOrder((java.awt.Component)var46);
    boolean var52 = var42.requestDefaultFocus();
    javax.swing.border.Border var53 = var42.getBorder();
    int var54 = var0.getComponentZOrder((java.awt.Component)var42);
    javax.accessibility.AccessibleContext var55 = var42.getAccessibleContext();
    SpaceWar.SpacePanel var56 = new SpaceWar.SpacePanel();
    float var57 = var56.getAlignmentX();
    var56.setVisible(false);
    var56.nextFocus();
    var56.updateUI();
    var56.enableInputMethods(true);
    var56.setSize((-1), 1);
    boolean var67 = var42.isAncestorOf((java.awt.Component)var56);
    boolean var70 = var56.contains(24, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test490");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    var0.enable(false);
    java.awt.Container var7 = var0.getTopLevelAncestor();
    boolean var9 = var0.requestFocus(true);
    var0.setToolTipText("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=10,height=10]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test491");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    SpaceWar.SpacePanel var6 = new SpaceWar.SpacePanel();
    var6.setName("");
    int var9 = var6.getX();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    var10.nextFocus();
    SpaceWar.SpacePanel var15 = new SpaceWar.SpacePanel();
    float var16 = var15.getAlignmentX();
    var15.setVisible(false);
    SpaceWar.SpacePanel var19 = new SpaceWar.SpacePanel();
    java.awt.Color var20 = var19.getBackground();
    var15.setForeground(var20);
    var10.setBackground(var20);
    var6.setBackground(var20);
    var0.setForeground(var20);
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    java.awt.Dimension var35 = var31.getPreferredSize();
    var25.setMaximumSize(var35);
    boolean var37 = var25.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var38 = var25.getAccessibleContext();
    boolean var39 = var25.isDoubleBuffered();
    java.awt.Rectangle var40 = var25.getVisibleRect();
    var0.scrollRectToVisible(var40);
    SpaceWar.SpacePanel var42 = new SpaceWar.SpacePanel();
    float var43 = var42.getAlignmentX();
    var42.setVisible(false);
    java.awt.Dimension var46 = var42.getPreferredSize();
    java.awt.Toolkit var47 = var42.getToolkit();
    SpaceWar.SpacePanel var48 = new SpaceWar.SpacePanel();
    var48.setName("");
    int var51 = var48.getX();
    SpaceWar.SpacePanel var52 = new SpaceWar.SpacePanel();
    float var53 = var52.getAlignmentX();
    var52.setVisible(false);
    var52.nextFocus();
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    SpaceWar.SpacePanel var61 = new SpaceWar.SpacePanel();
    java.awt.Color var62 = var61.getBackground();
    var57.setForeground(var62);
    var52.setBackground(var62);
    var48.setBackground(var62);
    var42.setForeground(var62);
    SpaceWar.SpacePanel var67 = new SpaceWar.SpacePanel();
    float var68 = var67.getAlignmentX();
    var67.firePropertyChange("", (-1), 1);
    SpaceWar.SpacePanel var73 = new SpaceWar.SpacePanel();
    float var74 = var73.getAlignmentX();
    var73.setVisible(false);
    java.awt.Dimension var77 = var73.getPreferredSize();
    var67.setMaximumSize(var77);
    boolean var79 = var67.getVerifyInputWhenFocusTarget();
    javax.accessibility.AccessibleContext var80 = var67.getAccessibleContext();
    boolean var81 = var67.isDoubleBuffered();
    java.awt.Rectangle var82 = var67.getVisibleRect();
    var42.scrollRectToVisible(var82);
    var0.removeKeyListener((java.awt.event.KeyListener)var42);
    javax.swing.InputVerifier var85 = var0.getInputVerifier();
    var0.enable();
    int var87 = var0.getY();
    javax.accessibility.AccessibleContext var88 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test492");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getScore();
    var0.update();
    int var5 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 400);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test493");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    java.awt.Dimension var4 = var0.getPreferredSize();
    java.awt.Toolkit var5 = var0.getToolkit();
    boolean var6 = var0.isFocusable();
    javax.swing.KeyStroke[] var7 = var0.getRegisteredKeyStrokes();
    java.awt.Component var10 = var0.getComponentAt(100, 100);
    java.lang.Object var11 = var0.getTreeLock();
    var0.grabFocus();
    SpaceWar.SpacePanel var13 = new SpaceWar.SpacePanel();
    float var14 = var13.getAlignmentX();
    var13.setVisible(false);
    java.awt.Dimension var17 = var13.getPreferredSize();
    boolean var18 = var13.getVerifyInputWhenFocusTarget();
    java.awt.Component var21 = var13.findComponentAt(10, 1);
    boolean var22 = var13.isCursorSet();
    java.lang.Object var23 = var0.getClientProperty((java.lang.Object)var22);
    boolean var24 = var0.isPaintingForPrint();
    SpaceWar.SpacePanel var25 = new SpaceWar.SpacePanel();
    float var26 = var25.getAlignmentX();
    var25.setVisible(false);
    var25.setInheritsPopupMenu(false);
    var25.setFocusTraversalPolicyProvider(true);
    SpaceWar.SpacePanel var33 = new SpaceWar.SpacePanel();
    float var34 = var33.getAlignmentX();
    var33.setVisible(false);
    boolean var37 = var33.isDoubleBuffered();
    var33.list();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    boolean var43 = var39.isDoubleBuffered();
    java.awt.dnd.DropTarget var44 = var39.getDropTarget();
    var39.show(false);
    java.awt.Rectangle var47 = var39.getVisibleRect();
    java.awt.Rectangle var48 = var33.getBounds(var47);
    javax.swing.JToolTip var49 = var33.createToolTip();
    var25.removeKeyListener((java.awt.event.KeyListener)var33);
    javax.swing.TransferHandler var51 = var25.getTransferHandler();
    boolean var52 = var25.isPaintingForPrint();
    int var53 = var25.getComponentCount();
    var25.setSize(400, 24);
    SpaceWar.SpacePanel var57 = new SpaceWar.SpacePanel();
    float var58 = var57.getAlignmentX();
    var57.setVisible(false);
    var57.nextFocus();
    var57.reshape((-1), 1, (-1), 10);
    var57.disable();
    java.awt.LayoutManager var68 = var57.getLayout();
    java.lang.Object var69 = var25.getClientProperty((java.lang.Object)var57);
    java.awt.Rectangle var70 = var57.getVisibleRect();
    var0.computeVisibleRect(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test494");


    SpaceWar.Player var0 = new SpaceWar.Player();
    var0.increasePower(25);
    int var3 = var0.getR();
    int var4 = var0.getScore();
    var0.loseLife();
    boolean var6 = var0.isRecovering();
    var0.setFiring(false);
    int var9 = var0.getScore();
    var0.setLeft(true);
    var0.setScore(499);
    var0.setUp(false);
    var0.update();
    var0.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test495");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var4 = var0.isDoubleBuffered();
    java.awt.dnd.DropTarget var5 = var0.getDropTarget();
    var0.show(false);
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Toolkit var9 = var0.getToolkit();
    SpaceWar.SpacePanel var10 = new SpaceWar.SpacePanel();
    float var11 = var10.getAlignmentX();
    var10.setVisible(false);
    java.awt.Dimension var14 = var10.getPreferredSize();
    boolean var15 = var10.getVerifyInputWhenFocusTarget();
    var0.addKeyListener((java.awt.event.KeyListener)var10);
    var0.setRequestFocusEnabled(true);
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test496");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    SpaceWar.SpacePanel var1 = new SpaceWar.SpacePanel();
    java.awt.Color var2 = var1.getBackground();
    SpaceWar.SpacePanel var3 = new SpaceWar.SpacePanel();
    float var4 = var3.getAlignmentX();
    var3.setVisible(false);
    var3.nextFocus();
    var3.updateUI();
    var3.enableInputMethods(true);
    var0.add((java.awt.Component)var1, (java.lang.Object)true);
    java.awt.Dimension var12 = var1.getPreferredSize();
    var1.firePropertyChange("SpaceWar.SpacePanel[,0,0,0x0,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", (-1.0f), 100.0f);
    SpaceWar.SpacePanel var17 = new SpaceWar.SpacePanel();
    float var18 = var17.getAlignmentX();
    var17.setVisible(false);
    boolean var21 = var17.isDoubleBuffered();
    SpaceWar.SpacePanel var22 = new SpaceWar.SpacePanel();
    java.awt.Color var23 = var22.getBackground();
    var22.repaint();
    java.lang.Object var25 = var17.getClientProperty((java.lang.Object)var22);
    var1.remove((java.awt.Component)var17);
    java.awt.Toolkit var27 = var1.getToolkit();
    var1.setAutoscrolls(false);
    boolean var30 = var1.isValidateRoot();
    SpaceWar.SpacePanel var31 = new SpaceWar.SpacePanel();
    float var32 = var31.getAlignmentX();
    var31.setVisible(false);
    boolean var35 = var31.isDoubleBuffered();
    var31.enable(false);
    boolean var38 = var31.getFocusTraversalKeysEnabled();
    SpaceWar.SpacePanel var39 = new SpaceWar.SpacePanel();
    float var40 = var39.getAlignmentX();
    var39.setVisible(false);
    java.awt.Dimension var43 = var39.getPreferredSize();
    java.awt.Toolkit var44 = var39.getToolkit();
    boolean var45 = var39.isFocusable();
    javax.swing.KeyStroke[] var46 = var39.getRegisteredKeyStrokes();
    SpaceWar.SpacePanel var47 = new SpaceWar.SpacePanel();
    float var48 = var47.getAlignmentX();
    SpaceWar.SpacePanel var49 = new SpaceWar.SpacePanel();
    float var50 = var49.getAlignmentX();
    var49.setVisible(false);
    java.awt.Dimension var53 = var49.getPreferredSize();
    boolean var54 = var49.getVerifyInputWhenFocusTarget();
    java.awt.Component var57 = var49.findComponentAt(10, 1);
    var47.addKeyListener((java.awt.event.KeyListener)var49);
    var49.repaint(100, (-1), (-1), 1);
    boolean var64 = var39.isAncestorOf((java.awt.Component)var49);
    var31.addKeyListener((java.awt.event.KeyListener)var49);
    java.awt.ComponentOrientation var66 = var31.getComponentOrientation();
    java.awt.ComponentOrientation var67 = var31.getComponentOrientation();
    var1.setComponentOrientation(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test497");


    SpaceWar.Enemy var2 = new SpaceWar.Enemy(0, 100);
    var2.explode();
    double var4 = var2.getY();
    var2.explode();
    boolean var6 = var2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test498");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    java.awt.Color var1 = var0.getBackground();
    var0.repaint();
    java.awt.im.InputMethodRequests var3 = var0.getInputMethodRequests();
    int var4 = var0.countComponents();
    java.awt.event.ComponentListener[] var5 = var0.getComponentListeners();
    var0.removeNotify();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getDebugGraphicsOptions();
    java.awt.Graphics var9 = var0.getGraphics();
    boolean var10 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test499");


    SpaceWar.Text var4 = new SpaceWar.Text(10.0d, (-1.0d), 0L, "SpaceWar.SpacePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=4194313,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]");
    boolean var5 = var4.update();
    boolean var6 = var4.update();
    boolean var7 = var4.update();
    boolean var8 = var4.update();
    boolean var9 = var4.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test500");


    SpaceWar.SpacePanel var0 = new SpaceWar.SpacePanel();
    float var1 = var0.getAlignmentX();
    var0.setVisible(false);
    SpaceWar.SpacePanel var4 = new SpaceWar.SpacePanel();
    java.awt.Color var5 = var4.getBackground();
    var0.setForeground(var5);
    SpaceWar.SpacePanel var7 = new SpaceWar.SpacePanel();
    float var8 = var7.getAlignmentX();
    var7.setVisible(false);
    boolean var11 = var7.isDoubleBuffered();
    java.awt.dnd.DropTarget var12 = var7.getDropTarget();
    var7.show(false);
    java.awt.Rectangle var15 = var7.getVisibleRect();
    var0.repaint(var15);
    java.awt.Component.BaselineResizeBehavior var17 = var0.getBaselineResizeBehavior();
    var0.firePropertyChange("SpaceWar.SpacePanel[,-1,1,-1x10,invalid,hidden,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=800,height=600]]", 1L, 1L);
    java.awt.image.ColorModel var22 = var0.getColorModel();
    java.awt.event.ComponentListener[] var23 = var0.getComponentListeners();
    float var24 = var0.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);

  }

}
